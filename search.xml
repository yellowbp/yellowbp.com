<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker</title>
      <link href="2021/07/29/%E6%B5%8B%E8%AF%95/"/>
      <url>2021/07/29/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>de ce </p></blockquote><p>df  d fds </p><blockquote><p>df f ds fs ds fd房东的丰富的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="2021/07/29/docker/"/>
      <url>2021/07/29/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>Docker 是一个开源的应用容器引擎，基于Go语言实现</p></li><li><p>Docker 可以让开发者把他们的 <strong>应用以及依赖包（应用所依赖的环境）打包成一个镜像</strong>到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上（容器可以相互迁移）</p></li><li><p>容器是完全使用沙箱机制，相互隔离（一台linux机器上可以启动多个容器，并且容器之间互不影响）</p></li><li><p>容器性能开销低（启动速度秒级）</p></li><li><p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版免费） 和 EE（Enterprise Edition: 企业版收费）</p></li></ul><p><strong>总结：docker是一种容器技术，解决了软件跨环境迁移问题</strong></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>官网文档：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p><ol><li><p>卸载旧版本的docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></li><li><p>下载需要的安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 出现输入的界面都按y</span></span><br><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>设置镜像的仓库（下面的地址默认是官网地址，我们不要用国外镜像地址，直接百度搜索 “docker阿里云镜像地址”）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装最新版的docker引擎(当然也可以安装指定的版本，具体看官网说明)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在安装引擎时，先把yum软件包更新到最新版本</span></span><br><span class="line">yum makecache fast</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl version</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h2><p><strong>镜像(Image)</strong></p><p>比如我们安装系统的.iso文件，其实就是镜像，这里你就可以把镜像认为是一种模板。我们可以使用docker根据这个模板创建容器来运行，说白了，镜像就是一堆静态的模板，运行起来的镜像就是容器。</p><p>docker镜像中有分层的概念，每个镜像是一个层，由于每个层上面还以有其他层，也就是一个镜像可能基于好几个镜像（基础镜像）。比如一个web运行环境可能需要操作系统linux、数据库mysql、.net core runtime运行时，那我们拉取的这个镜像就会包好这好几个镜像，这就好像我们前边说的打包好的运行环境一样，直接就拉下来一个小电脑一样。</p><p><strong>容器(Container)</strong></p><p>当我们拉取了一个镜像，然后run一下，就会根据这个镜像运行出来一个容器，运行的容器就好像我们的应用程序一样，可以访问可以停止，我们运用多次run命令，就运行了很多很多容器，也可以说是镜像的实例。就像是面向对象程序设计中的类和对象一样，我们可以把镜像看作是类，容器看作new出来的实例。</p><p><strong>仓库(Repository)</strong></p><p>存放镜像的地方就是仓库，就好比存放代码的地方是github一样，我们就把github称为代码的仓库。那么存放docker镜像的地方我们叫做dockerhub，是<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker的官网中央仓库</a>。当然我们也可以制作好我们自己镜像推送上去，不过这些肯定是要官方审核的，防止有些人写入一些恶意代码。不过我们可以推到我们自己的dockerhub上去，供我们自己使用，这个就好我们的github账号一样了，属于私有镜像了</p><p><strong>数据卷()</strong></p><p>上述提到容器是new出来的实例，既然是new出来的实例那就会销毁，那如果销毁了我们的程序产生出的需要持久化的数据怎么办呢，容器运行的时候我们可以进容器去查看，容器一旦销毁就什么都没有了。所以数据卷就是来解决这个问题的，是用来做数据持久化到我们的宿主机上容器间的数据共享，简单的说就是将宿主机的目录映射到容器中的目录，应用程序在容器中的目录读写数据会同步到宿主机上，这样容器产生的数据就可以持久化了，比如我们的数据库容器，就可以把数据存到我们宿主机上的真实磁盘上了。</p><h2 id="配置docker镜像加速器"><a href="#配置docker镜像加速器" class="headerlink" title="配置docker镜像加速器"></a>配置docker镜像加速器</h2><p>默认情况下，将来从docker hub（<a href="https://hub.docker.com/）上下载docker镜像，太慢。一般都会配置镜像加速器" target="_blank" rel="noopener">https://hub.docker.com/）上下载docker镜像，太慢。一般都会配置镜像加速器</a></p><ol><li>登录自己的阿里云，并进入控制台</li><li>左上角 “产品与服务” 中搜索 “镜像容器服务”</li><li>左侧寻找镜像加速器（每个人的加速地址都是不一样的）</li><li>在下面的操作文档选择安装的环境，然后直接全部粘贴即可使用</li></ol><h2 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h2><p>在docker中，我们只需要掌握三个大块的命令：镜像相关命令，容器相关命令、服务相关的命令</p><h3 id="服务相关的命令"><a href="#服务相关的命令" class="headerlink" title="服务相关的命令"></a>服务相关的命令</h3><ul><li><p>启动docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>停止docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure></li><li><p>重启docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>查看docker服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></li><li><p>开机启动docker服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li></ul><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><p><a href="https://docs.docker.com/reference/" target="_blank" rel="noopener">官网帮助文档</a></p><p>很多命令的后面都是可以接参数命令的，查找方式：1.要么看官网  2.  docker命令 –help   来查看可接命令。如 docker images –help</p><ul><li><p>查看镜像：查看本地所有的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 hbp]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line">  镜像名      版本号      镜像标识符  下载的时间  大小</span><br><span class="line">[root@centos7 hbp]# docker images -q # 查看所用镜像的id</span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]# docker images --help</span><br><span class="line">Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line">List images</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don't truncate output</span><br><span class="line">  -q, --quiet           Only show image IDs</span><br></pre></td></tr></table></figure></li><li><p>搜索镜像 ：从网络中查找需要的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">命令格式：docker search 镜像的名称</span><br><span class="line">NAME            DESCRIPTION          STARS     OFFICIAL   AUTOMATED</span><br><span class="line">镜像名称   该镜像描述   收藏数     是否官方</span><br><span class="line"></span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker search mysql</span></span><br><span class="line">NAME            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql          MySQL is a widely used, open-source relation…   11185       [OK]       </span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker search mysql -f=stars=3000   # 搜索出来的镜像就是stars&gt;3000的</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11185     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4246      [OK]       </span><br><span class="line"></span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker search --help</span></span><br><span class="line">Usage:  docker search [OPTIONS] TERM</span><br><span class="line">Search the Docker Hub <span class="keyword">for</span> images</span><br><span class="line">Options:</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --<span class="built_in">limit</span> int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don<span class="string">'t truncate output</span></span><br></pre></td></tr></table></figure></li><li><p>拉取镜像 ：从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本 lastest，如果不知道版本号，可以去docker hub 搜索对应的镜像查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">命令格式：docker pull 镜像名[:版本号]</span><br><span class="line"></span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker pull mysql</span></span><br><span class="line">Using default tag: latest  <span class="comment"># 不写版本，默认就是latest</span></span><br><span class="line">latest: Pulling from library/mysql </span><br><span class="line">33847f680f63: Pull complete  <span class="comment"># 分层下载，docker images的核心，分层文件系统（docker原理有解释）</span></span><br><span class="line">5cb67864e624: Pull complete </span><br><span class="line">1a2b594783f5: Pull complete </span><br><span class="line">b30e406dd925: Pull complete </span><br><span class="line">48901e306e4c: Pull complete </span><br><span class="line">603d2b7147fd: Pull complete </span><br><span class="line">802aa684c1c4: Pull complete </span><br><span class="line">715d3c143a06: Pull complete </span><br><span class="line">6978e1b7a511: Pull complete </span><br><span class="line">f0d78b0ac1be: Pull complete </span><br><span class="line">35a94d251ed1: Pull complete </span><br><span class="line">36f75719b1a9: Pull complete </span><br><span class="line">Digest: sha256:8b928a5117cf5c2238c7a09cd28c2e801ac98f91c3f8203a8938ae51f14700fd  <span class="comment"># 签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest <span class="comment"># 真实地址。docker pull mysql == docker pull docker.io/library/mysql:latest</span></span><br></pre></td></tr></table></figure></li><li><p>删除镜像：删除指定本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令格式：docker rmi 镜像id</span><br><span class="line">docker rmi `docker images -q` <span class="comment"># 删除所有本地镜像</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><p>有了镜像，才可以创建容器，这里只centos7镜像为例。</p><ul><li><p>查看容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="comment"># 查看正在运行的容器</span></span><br><span class="line"></span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker ps --help</span></span><br><span class="line">Usage:  docker ps [OPTIONS]</span><br><span class="line">List containers</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print containers using a Go template</span><br><span class="line">  -n, --last int        Show n last created containers (includes all states) (default -1)</span><br><span class="line">  -l, --latest          Show the latest created container (includes all states)</span><br><span class="line">      --no-trunc        Don<span class="string">'t truncate output</span></span><br><span class="line"><span class="string">  -q, --quiet           Only display container IDs</span></span><br><span class="line"><span class="string">  -s, --size            Display total file sizes</span></span><br><span class="line"><span class="string">[root@MiWiFi-R4CM-srv hbp]# docker ps -a  # 查看所有容器</span></span><br><span class="line"><span class="string">CONTAINER ID   IMAGE      COMMAND       CREATED              STATUS                      PORTS     NAMES</span></span><br><span class="line"><span class="string">be19f0a8b70a   centos:7   "/bin/bash"   About a minute ago   Exited (0) 20 seconds ago             upbeat_chandrasekhar</span></span><br><span class="line"><span class="string">[root@MiWiFi-R4CM-srv hbp]#</span></span><br></pre></td></tr></table></figure></li><li><p>创建并启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">命令格式：docker run [可选参数] imageName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line">-i：后台方式运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出(<span class="built_in">exit</span>)容器后，容器自动关闭。</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。</span><br><span class="line">-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker <span class="built_in">exec</span> 进入容器。退出后，容器不会关闭。</span><br><span class="line">-it 创建的容器一般称为交互式容器，-id 创建的容器一般称为守护式容器</span><br><span class="line">--name：为创建的容器命名。</span><br><span class="line">-p 指定容器的端口 可以是 主机端口:容器端口，也可以是 容器端口，但这个容器端口不会对外开放</span><br><span class="line">-P 随机指定端口</span><br><span class="line"></span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker run -it --name=centosTest centos:7</span></span><br><span class="line">[root@5ece4644d019 /]<span class="comment"># exit   # 此时的主机名已变</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> 参数 <span class="comment"># 退出容器，容器不会关闭</span></span><br></pre></td></tr></table></figure></li><li><p>停止容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">命令格式：docker stop 容器名称</span><br><span class="line"></span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE      COMMAND       CREATED          STATUS                     PORTS     NAMES</span><br><span class="line">5864da8b8d8e   centos:7   <span class="string">"/bin/bash"</span>   17 seconds ago   Up 16 seconds                        centosTest7</span><br><span class="line">5ece4644d019   centos:7   <span class="string">"/bin/bash"</span>   6 minutes ago    Exited (0) 6 minutes ago             centosTest</span><br><span class="line">be19f0a8b70a   centos:7   <span class="string">"/bin/bash"</span>   10 minutes ago   Exited (0) 9 minutes ago             upbeat_chandrasekhar</span><br><span class="line">[root@MiWiFi-R4CM-srv hbp]<span class="comment"># docker stop centosTest7</span></span><br><span class="line">centosTest7</span><br></pre></td></tr></table></figure></li><li><p>删除容器 ：如果容器是运行状态则删除失败，需要停止容器才能删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：docker rm 标识id或容器名称</span><br></pre></td></tr></table></figure></li><li><p>查看容器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：docker inspect 容器名称</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="数据卷概念"><a href="#数据卷概念" class="headerlink" title="数据卷概念"></a>数据卷概念</h3><p>思考的问题：</p><ol><li>Docker 容器删除后，在容器中产生的数据也会随之销毁</li><li>Docker容器和外部机器（不是指宿主机，而是宿主机以外的机器）可以直接交换文件？</li><li>容器之间如何进行数据交互</li></ol><p><strong>数据卷</strong></p><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li></ul><p><strong>数据卷的作用</strong></p><ul><li>容器数据持久化</li><li>外部机器和容器间通信</li><li>容器之间数据交换</li></ul><h3 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h3><ul><li><p>创建启动容器时，使用 –v 参数 设置数据卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">命令格式：docker run ... –v 宿主机目录(文件):容器内目录(文件) ... </span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载一个目录</span></span><br><span class="line">docker run -it --name=c1 -v /root/data:/root/data_container centos:7</span><br><span class="line"><span class="comment"># 挂载多个目录  \表示命名还没敲完，继续敲的意思</span></span><br><span class="line">docker run -it --name=c2 \</span><br><span class="line">-v /root/data2:/root/data2 \</span><br><span class="line">-v /root/data3:/root/data3 \</span><br><span class="line">centos:7</span><br></pre></td></tr></table></figure><p>【注意】</p><ol><li>目录必须是绝对路径</li></ol><p>​    2. 如果目录不存在，会自动创建</p><pre><code>3. 可以挂载多个数据卷</code></pre></li></ul><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多容器进行数据交换，有2种解决方案</p><p>​    1. 多个容器挂载同一个数据卷；但是数据卷一多，管理起来就非常麻烦</p><ol start="2"><li><p>数据卷容器</p><img src="C:\Users\hbbbbbbbbp\Desktop\docker\img\数据卷容器.png" alt="数据卷容器" style="zoom:67%;"></li></ol><h4 id="配置数据卷容器"><a href="#配置数据卷容器" class="headerlink" title="配置数据卷容器"></a>配置数据卷容器</h4><p>创建一个容器，挂载一个目录，让其他容器继承自该容器( –volume-from )</p><ol><li><p>创建启动c3数据卷容器，使用 –v 参数 设置数据卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run –it --name=c3 –v /volume centos:7 /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash</span><br><span class="line">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure></li></ol><h2 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h2><h3 id="部署MySQL"><a href="#部署MySQL" class="headerlink" title="部署MySQL"></a>部署MySQL</h3><ol><li>搜索mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意一般来说宿主机的端口跟容器所暴露的端口是保持一致的：端口映射</span></span><br><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=6666 \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=6666：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure><ol start="5"><li><p>使用外部机器连接容器中的mysql </p><p>【注意】</p><pre><code>1. 宿主机防火墙是否有开放对应的端口</code></pre></li></ol><h3 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h3><ol><li>搜索tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录挂载到容器的webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问tomcat</li></ol><h3 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h3><ol><li>搜索nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$PWD</span>/conf/nginx.conf 要先建好</span></span><br><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问nginx</li></ol><h3 id="部署Redis"><a href="#部署Redis" class="headerlink" title="部署Redis"></a>部署Redis</h3><ol><li>搜索redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p><img src="C:%5CUsers%5Chbbbbbbbbp%5CDesktop%5Cdocker%5Cimg%5C%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91.png" alt="网络拓扑"></p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h3><p><strong>思考的问题：</strong></p><ul><li><p>Docker 镜像本质是什么？</p></li><li><p>Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</p></li><li><p>Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</p></li></ul><hr><p>要解决这些问题，需要我们去了解linux的文件管理系统</p><p>linux文件系统是由 bootfs 和 rootfs 两部分组成(fs ：file system)</p><ul><li>bootfs ：包含bootloader（引导加载程序）和 kernel（内核）</li><li>rootfs ：root文件系统，包含的就是典型linux系统中的 /dev ，/proc，/bin，/etc等标准目录和文件</li></ul><p>一些厂商拿到了linux的核心源码之后(bootfs)，再此上面做了一些改动，然后便开始收费了，这些便称为linux发行版，不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu、centos等</p><img src="C:\Users\hbbbbbbbbp\Desktop\docker\img\linux文件管理系统示意图.png" alt="linux文件管理系统示意图" style="zoom: 80%;"><hr><ul><li><p>Docker镜像是由特殊的文件系统叠加而成</p></li><li><p>最底端是 bootfs，并使用宿主机的bootfs </p><blockquote><p>意思就是：假如目前由一个 linux系统，系统安装了docker软件，那么在linux启动之时，会把bootfs或者说内核进行加载，docker镜像也是要启动bootfs(内核)，而这时候就不需要加载内核了，因为它用的是宿主机的内核，简单来说就是：做了一个复用的操作。那么有个问题，可以在容器中启动winsdow系统吗，答案是不行的，因为内核不一样</p></blockquote></li><li><p>第二层是 root文件系统rootfs,称为base image基础镜像</p></li><li><p>然后再往上可以叠加其他的镜像文件</p><blockquote><p>那么如果你要下载tomcat镜像的时候，它就会看你有没有jdk的镜像，如果没有则先下载jdk，而jdk又依赖于基础镜像，如果也没有，则先下载基础镜像</p></blockquote></li><li><p>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。</p><blockquote><p>以图中的tomcat为例，而这三部分组合成一个文件系统，对外暴露的就只是tomcat镜像一个而已</p></blockquote></li><li><p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</p></li><li><p>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</p></li></ul><img src="C:\Users\hbbbbbbbbp\Desktop\docker\img\镜像原理.png" alt="镜像原理" style="zoom:80%;"><p>思考问题的答案：</p><ol><li><p>Docker 镜像本质是什么？</p><pre><code>是一个分层文件系统</code></pre></li><li><p>Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</p><p>​    Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层</p></li><li><p>Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</p><p>​    由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大    小500多MB</p></li></ol><h3 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h3><p>镜像的制作有2种方法：</p><ol><li><p>容器转为镜像</p><p>我们运行了tomcat镜像后，就创建了可写容器，在可写容器中进行改变，然后把可写容器转换为一个新的镜像（目录挂载的内容不会随着commit而保存到镜像中，而其他内容会）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器id 镜像名称:版本号</span><br></pre></td></tr></table></figure><p>因为镜像无法进行传输，所以我们需要把镜像变成一个压缩文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o 压缩文件名称 镜像名称:版本号</span><br></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load –i 压缩文件名称</span><br></pre></td></tr></table></figure></li><li><p><strong>dockerfile</strong></p><ul><li><p>Dockerfile 是一个文本文件</p></li><li><p>包含了一条条的指令</p></li><li><p>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</p></li><li><p>对于开发人员：可以为开发团队提供一个完全一致的开发环境</p></li><li><p>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了</p></li><li><p>对于运维人员：在部署时，可以实现应用的无缝移植</p></li></ul><p>Dochub网址：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com</a> 点进镜像里面，其实就是一个dockerfile文件</p><p>docker命令（必须大写）</p><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建，一切从这里开始（如果没有的话，会自动下载）</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的（姓名+邮箱）</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>镜像构建时需要执行的命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务。比如要弄一个tomcat镜像，需要用ADD把tomcat压缩包添加进来</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table></li></ol><h3 id="定义dockerfile，发布springboot项目"><a href="#定义dockerfile，发布springboot项目" class="headerlink" title="定义dockerfile，发布springboot项目"></a>定义dockerfile，发布springboot项目</h3><p>实现步骤：</p><ol><li><p>定义父镜像：FROM java:8</p></li><li><p>定义作者信息：MAINTAINER  xxxx  </p></li><li><p>将jar包添加到容器： ADD springboot.jar app.jar</p></li><li><p>定义容器启动执行的命令：CMD java–jar app.jar</p></li><li><p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本   .</p><p>-f ：表示指定当前dockerfile的文件路径</p><p>-t ：设置新的镜像名称与版本</p></li></ol><h2 id="Docker-服务编排"><a href="#Docker-服务编排" class="headerlink" title="Docker 服务编排"></a>Docker 服务编排</h2><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例（为了高可用），如果每个微服务都要手动启停，维护的工作量会很大。</p><p>按照上述的技术我们只能这样做：</p><ul><li><p>要从Dockerfile build image 或者去dockerhub拉取image</p></li><li><p>要创建多个container</p></li><li><p>要管理这些container（启动停止删除）</p></li></ul><p>但很显示，这并不实在。</p><p><strong>服务编排：按照一定的业务规则批量管理容器</strong></p><h3 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h3><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建，启动和停止。使用步骤（简单来说就是进行服务编排的工具）：</p><ol><li><p>利用 Dockerfile 定义运行环境镜像</p></li><li><p>使用 docker-compose.yml 定义组成应用的各服务</p></li><li><p>运行 docker-compose up 启动应用</p></li></ol><h4 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。 </span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置文件可执行权限 </span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本信息 </span></span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><h4 id="卸载Docker-Compose"><a href="#卸载Docker-Compose" class="headerlink" title="卸载Docker Compose"></a>卸载Docker Compose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="使用docker-compose编排nginx-springboot项目"><a href="#使用docker-compose编排nginx-springboot项目" class="headerlink" title="使用docker compose编排nginx+springboot项目"></a>使用docker compose编排nginx+springboot项目</h4><ol><li>创建docker-compose目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/docker-compose</span><br><span class="line">cd ~/docker-compose</span><br></pre></td></tr></table></figure><ol start="2"><li>编写 docker-compose.yml 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">   image: nginx</span><br><span class="line">   ports:</span><br><span class="line">    - 80:80</span><br><span class="line">   links:</span><br><span class="line">    - app</span><br><span class="line">   volumes:</span><br><span class="line">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">  app:</span><br><span class="line">    image: app</span><br><span class="line">    expose:</span><br><span class="line">      - "8080"</span><br></pre></td></tr></table></figure><ol start="3"><li>创建./nginx/conf.d目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure><ol start="4"><li>在./nginx/conf.d目录下 编写itheima.conf文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        // 反向代理</span><br><span class="line">        proxy_pass http://app:8080;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在~/docker-compose 目录下 使用docker-compose 启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><ol start="6"><li>测试访问</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.149.135/hello</span><br></pre></td></tr></table></figure><h2 id="Docker-私有仓库"><a href="#Docker-私有仓库" class="headerlink" title="Docker 私有仓库"></a><strong>Docker</strong> <strong>私有仓库</strong></h2><p>Docker官方的Docker hub（<a href="https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像" target="_blank" rel="noopener">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像</a> 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜 像放到公网当中，那么我们就需要搭建自己的私有仓库（一般是在一个独立的服务器）来存储和管理自己的镜像。</p><h3 id="私有仓库搭建"><a href="#私有仓库搭建" class="headerlink" title="私有仓库搭建"></a>私有仓库搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、拉取私有仓库镜像 </span></span><br><span class="line">docker pull registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、启动私有仓库容器 </span></span><br><span class="line">docker run -id --name=registry -p 5000:5000 registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到&#123;<span class="string">"repositories"</span>:[]&#125; 表示私有仓库 搭建成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、修改daemon.json   </span></span><br><span class="line">vim /etc/docker/daemon.json    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip ，如果之前配置过阿里云的镜像加速器，只需要用逗号分隔即可</span></span><br><span class="line">&#123;"insecure-registries":["私有仓库服务器ip:5000"]&#125; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、重启docker 服务 </span></span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure><h3 id="将镜像上传至私有仓库"><a href="#将镜像上传至私有仓库" class="headerlink" title="将镜像上传至私有仓库"></a>将镜像上传至私有仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、标记镜像为私有仓库的镜像     </span></span><br><span class="line">docker tag centos:7 私有仓库服务器IP:5000/centos:7</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、上传标记的镜像     </span></span><br><span class="line">docker push 私有仓库服务器IP:5000/centos:7</span><br></pre></td></tr></table></figure><h3 id="从私有仓库拉取镜像"><a href="#从私有仓库拉取镜像" class="headerlink" title="从私有仓库拉取镜像"></a>从私有仓库拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像 </span></span><br><span class="line">docker pull 私有仓库服务器ip:5000/centos:7</span><br></pre></td></tr></table></figure><h2 id="Docker容器化技术与虚拟机"><a href="#Docker容器化技术与虚拟机" class="headerlink" title="Docker容器化技术与虚拟机"></a>Docker容器化技术与虚拟机</h2><p><img src="C:%5CUsers%5Chbbbbbbbbp%5CDesktop%5Cdocker%5Cimg%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8Edoker.png" alt="虚拟机与doker"></p><p>相同：</p><ul><li>容器和虚拟机具有相似的资源隔离和分配优势</li></ul><p>不同：</p><ul><li><p>容器虚拟化的是操作系统(使用的是宿主机的os)，虚拟机虚拟化的是硬件(与宿主机共享的硬件，如网卡)</p></li><li><p>传统虚拟机可以运行不同的操作系统，容器只能运行同一类型操作系统</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins</title>
      <link href="2021/07/22/jenkins/"/>
      <url>2021/07/22/jenkins/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring为什么建议使用构造器来注入</title>
      <link href="2021/07/20/Spring%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%9D%A5%E6%B3%A8%E5%85%A5/"/>
      <url>2021/07/20/Spring%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%9D%A5%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring为什么建议使用构造器来注入"><a href="#Spring为什么建议使用构造器来注入" class="headerlink" title="Spring为什么建议使用构造器来注入"></a>Spring为什么建议使用构造器来注入</h1><p>首先给出三个问题：</p><ul><li>@Autowired, @Resource, @Inject 三个注解的区别 ？</li><li>当使用@Autowired时，是否有出现过Field injection is not recommended的警告？这是为什么 ？</li><li>Spring 依赖注入有哪几种方式？官方是建议哪种方式 ？</li></ul><p>首先，其实可以把bean理解成对象，这样好理解一点</p><h2 id="Autowired-Resource-Inject-三个注解的区别"><a href="#Autowired-Resource-Inject-三个注解的区别" class="headerlink" title="@Autowired, @Resource, @Inject 三个注解的区别"></a>@Autowired, @Resource, @Inject 三个注解的区别</h2><p>Spring 支持使用@Autowired, @Resource, @Inject 三个注解进行依赖注入</p><p>这里先给出一段准备代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serImplA</span> <span class="keyword">implements</span> <span class="title">ser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello, this is service A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serImplB</span> <span class="keyword">implements</span> <span class="title">ser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello, this is service B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired为Spring 框架提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">// @Qualifier("serImplB")</span></span><br><span class="line">    Ser serImplA; <span class="comment">// 这里不能命名为ser</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">diTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertNotNull(serImplA);</span><br><span class="line">        serImplA.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装配顺序(如果找不到才会继续下一步)：</strong></p><ol><li><p>按照type在上下文中查找匹配的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找type为Ser的bean</span><br></pre></td></tr></table></figure></li><li><p>如果有多个bean，则按照name进行匹配，这里的name还要继续分2种情况</p><ol><li><p>如果有@Qualifier注解，则按照@Qualifier指定的name进行匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找name为serverImplB的bean</span><br></pre></td></tr></table></figure></li><li><p>如果没有@Qualifier注解，则按照变量名进行匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找name为serImplA的bean</span><br></pre></td></tr></table></figure></li></ol></li><li><p>匹配不到，则报错。（@Autowired(required=false)，如果设置required为false(默认为true)，则注入失败时不会抛出异常）</p></li></ol><h3 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h3><p>在 Spring 的环境下，@Inject和@Autowired 是相同的 ，因为它们的依赖注入都是使用AutowiredAnnotationBeanPostProcessor来处理的。</p><p>如果硬要说两个的区别，首先@Inject是Java EE包里的，在SE环境需要单独引入。另一个区别在于@Autowired可以设置required=false而@Inject并没有这个属性。</p><p>所以既然@Autowired比@Inject更好，@Inject自然就很少人使用</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p><code>@Resource</code>有两个重要的属性：<code>name</code>和<code>type</code>，而Spring 将<code>@Resource</code>注解的<code>name</code>属性解析为bean的名字，而<code>type</code>属性则解析为bean的类型。</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"serImplB"</span>,type = SerImplB<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">Ser</span> <span class="title">ser</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">diTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertNotNull(ser);</span><br><span class="line">        ser.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装配顺序(如果找不到才会继续下一步)：</strong></p><ol><li>如果同时指定了<code>name</code>和<code>type</code>，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</li><li>如果指定了<code>name</code>，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</li><li>如果指定了<code>type</code>，则从上下文中找到类型匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</li><li>如果既没有指定<code>name</code>，又没有指定<code>type</code>，则默认先按照<code>byName</code>方式进行装配；如果没有匹配，按照<code>byType</code>进行装配。</li></ol><h2 id="Field-injection-is-not-recommended"><a href="#Field-injection-is-not-recommended" class="headerlink" title="Field injection is not recommended"></a>Field injection is not recommended</h2><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelpService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"serviceImplA"</span>)</span><br><span class="line">    <span class="keyword">private</span> Servicee servicee;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        servicee.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用IDEA 进行Spring 开发的时候，当你在字段上面使用<code>@Autowired</code>注解的时候，IDEA 会有警告提示：@Autowired会高亮或波浪线，并且把鼠标悬停在上面会显示<code>Field injection is not recommended</code></p><blockquote><p>Field injection is not recommended</p></blockquote><p>翻译过来的意思是：</p><blockquote><p>不建议使用基于 Field 的注入方式。</p><p>Spring 开发团队建议：在你的Spring Bean 永远使用基于constructor 的方式进行依赖注入。</p></blockquote><p>将光标放到<code>@Autowired</code>处，使用<code>Alt + Enter</code> 快捷进行修改之后，代码就会变成基于Constructor的注入方式，修改之后 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelpService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Ser serImplA;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelpService</span><span class="params">(Ser serImplA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serImplA = serImplA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        serImplA.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">diTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HelpService ser = <span class="keyword">new</span> HelpService(<span class="keyword">new</span> SerImplA());</span><br><span class="line">        Assertions.assertNotNull(ser);</span><br><span class="line">        ser.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正这个警告提示固然简单，但是更重要是去理解为什么Spring 团队会提出这样的建议？直接使用这种基于 field 的注入方式有什么问题？</p><h2 id="Spring-的3种依赖注入方式-："><a href="#Spring-的3种依赖注入方式-：" class="headerlink" title="Spring 的3种依赖注入方式 ："></a><strong>Spring 的3种依赖注入方式</strong> ：</h2><ul><li>基于 Field 注入（属性注入）</li><li>基于 setter 注入</li><li>基于 constructor 注入（构造器注入）</li></ul><h3 id="基于属性注入"><a href="#基于属性注入" class="headerlink" title="基于属性注入"></a>基于属性注入</h3><p>所谓基于 Field 注入，就是在bean变量上使用上述介绍的三种注解进行依赖注入。本质上是通过反射的方式直接注入到Field。这是平常开发中看的最多也是最熟悉的一种方式，同时，也正是 Spring 团队所不推荐的方式。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Ser ser;</span><br></pre></td></tr></table></figure><h3 id="基于setter方法注入"><a href="#基于setter方法注入" class="headerlink" title="基于setter方法注入"></a>基于setter方法注入</h3><p>通过对应变量的<code>setXXX()</code>方法以及在方法上面使用注解，来完成依赖注入。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> HelpService helper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelper</span><span class="params">(HelpService helper)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">this</span>.helper = helper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：在 <code>Spring 4.3</code> 及以后的版本中，setter 上面的 <code>@Autowired</code> 注解是可以不写的。</p></blockquote><h3 id="基于constructor注入"><a href="#基于constructor注入" class="headerlink" title="基于constructor注入"></a>基于constructor注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Ser ser;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiTest</span><span class="params">(@Qualifier(<span class="string">"serImplA"</span>)</span>Ser ser) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ser = ser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">diTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertNotNull(ser);</span><br><span class="line">        ser.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>Spring 4.3</code> 及以后的版本中，如果这个类只有一个构造方法，那么这个构造方法上面也可以不写 <code>@Autowired</code> 注解。</p></blockquote><h2 id="各注入方式的优缺点"><a href="#各注入方式的优缺点" class="headerlink" title="各注入方式的优缺点"></a>各注入方式的优缺点</h2><h3 id="基于属性注入-1"><a href="#基于属性注入-1" class="headerlink" title="基于属性注入"></a>基于属性注入</h3><p><strong>好处</strong></p><ul><li>注入方式简单</li><li>代码整洁</li></ul><p><strong>坏处</strong></p><ul><li><p><strong>容易违背了单一职责原则</strong> ，使用这种基于 field 注入的方式，依赖注入是很简单的，就算类中有十几个依赖开发者可能都觉得没有什么问题，普通的开发者很可能会无意识地给一个类添加很多基于属性的DI。拥有太多的依赖通常意味着你的类要承担更多的责任，明显违背了单一职责原则。</p></li><li><p><strong>不能使用属性注入的方式构建不可变对象(<code>final</code> 修饰的变量)</strong></p></li><li><p><strong>依赖注入与容器强耦合</strong></p><p>依赖注入的核心思想之一就是：受容器管理的类不应该再与容器强耦合。简单点来说就是：这个类应该是一个简单的类并且能够被单独实例化，这样在进行单元测试中实例化这个类时不必去启动IOC容器。</p><p>这个问题具体可以表现在单元测试的时候，开发者很容易出现一个问题就是，在测试类中，明明注入了这个依赖，但是在调用的时候就是报NPE，而此时解决办法就是，把那个依赖所在的启动类启动。</p><p>所以它造成了问题就是：通过依赖容器才能实例化</p><ul><li>类和依赖容器强耦合，不能在容器外使用</li><li>必须通过依赖容器才能实例化</li></ul></li></ul><h3 id="基于setter注入"><a href="#基于setter注入" class="headerlink" title="基于setter注入"></a>基于setter注入</h3><blockquote><p>Setter injection should primarily only be used for optional dependencies that can be assigned reasonable default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or re-injection later.</p></blockquote><p>基于 setter 的注入，则只应该被用于注入非必需的依赖，同时在类中应该对这个依赖提供一个合理的默认值。如果使用 setter 注入必需的依赖，那么将会有过多的 null 检查充斥在代码中。<strong>使用 setter 注入的一个优点是，这个依赖可以很方便的被改变或者重新注入</strong> </p><p><strong>优点：</strong></p><ul><li>灵活</li></ul><h3 id="基于constructor注入-推荐"><a href="#基于constructor注入-推荐" class="headerlink" title="基于constructor注入(推荐)"></a>基于constructor注入(推荐)</h3><blockquote><p>The Spring team generally advocates constructor injection as it enables one to implement application components as immutable objects and to ensure that required dependencies are not null. Furthermore constructor-injected components are always returned to client (calling) code in a fully initialized state. As a side note, a large number of constructor arguments is a bad code smell, implying that the class likely has too many responsibilities and should be refactored to better address proper separation of concerns.</p></blockquote><p>Spring 团队提倡使用基于构造方法的注入，因为这样一方面可以<strong>保证将依赖注入到一个不可变的变量中 (<code>final</code> 修饰的变量)</strong> ，另一方面也可以<strong>保证这些变量的值不会是 null</strong> 。此外，经过构造方法完成依赖注入的组件 (注：比如各个 <code>service</code>)，在被调用时可以<strong>保证完全初始化的状态</strong> 。</p><p><strong>优点：</strong></p><p>总结起来如下几点：</p><ul><li><p>依赖不可变：final关键字修饰</p></li><li><p>依赖不为空（省去了我们对其检查）：当要实例化组件依赖的时候，由于实现了有参数的构造函数，所以不会调用默认构造函数，那么就需要Spring容器传入所需要的参数，所以就两种情况：1、有该类型的参数-&gt;传入，OK 。2：无该类型的参数-&gt;报错。所以保证不会为空，Spring总不至于传一个null进去吧 </p></li><li><p>完全初始化的状态：这个可以跟上面的依赖不为空结合起来，向构造器传参之前，要确保注入的内容不为空，那么肯定要调用依赖组件的构造方法完成实例化。而在Java类加载实例化的过程中，构造方法是最后一步（之前如果有父类先初始化父类，然后自己的成员变量，最后才是构造方法。）所以返回来的都是初始化之后的状态。</p></li></ul><p><strong>缺点：</strong></p><ul><li>一个巨大的构造方法通常代表着出现了代码异味，这个类可能承担了过多的责任</li></ul><hr><p><strong>Q：</strong>这里有个疑问就是：要是有大量的依赖要注入，构造方法不会显得很臃肿吗？</p><p><strong>A：</strong>对于这个问题，说明你的类当中有太多的责任，那么你要好好想一想是不是自己违反了类的<strong>单一性职责原则</strong>，从而导致有这么多的依赖要注入。</p><h2 id="Spring-开发团队的建议"><a href="#Spring-开发团队的建议" class="headerlink" title="Spring 开发团队的建议"></a>Spring 开发团队的建议</h2><blockquote><p>Since you can mix constructor-based and setter-based DI, it is a good rule of thumb to use constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies.</p></blockquote><p>简单来说，就是</p><ul><li>强制依赖就用构造器方式</li><li>可选、可变的依赖就用setter 注入</li></ul><p>当然你可以在同一个类中使用这两种方法。构造器注入更适合强制性的注入旨在不变性，Setter注入更适合可变性的注入。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux虚拟机安装</title>
      <link href="2021/07/19/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
      <url>2021/07/19/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux虚拟机安装"><a href="#Linux虚拟机安装" class="headerlink" title="Linux虚拟机安装"></a>Linux虚拟机安装</h1><h2 id="下载IOS文件"><a href="#下载IOS文件" class="headerlink" title="下载IOS文件"></a>下载IOS文件</h2><p>centos7：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a></p><h2 id="安装vmware"><a href="#安装vmware" class="headerlink" title="安装vmware"></a>安装vmware</h2><p>安装好并破解vmware、</p><p>检测是否破解成功：打开软件后可通过 帮助 –&gt; 关于VMware Workstation </p><h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><ol><li>打开软件后，创建新的虚拟机</li><li>选择典型，并选择下载好的ios文件</li><li>自定义虚拟机名字，位置：<code>H:\VMware\Virtual Machines\CentOS7</code></li><li>最大磁盘大小 &gt; 20G 即可，选择将虚拟磁盘拆分成多个文件</li><li>因为默认的内存1G，适配器NAT是不符合的，选择自定义硬件<ol><li>根据自身电脑选择内存大小（如果用到jenkins建议内存4G）</li><li>处理器数量2核2处理器</li><li>网络适配器：桥接模式并勾选复制物理网络连接状态(主机和虚拟机可以互相通信，虚拟机也可以上外网)</li></ol></li><li>点击完成后，鼠标点进画面按下回车，等待安装即可</li><li>选择英文(English)界面</li><li>“DATE &amp; TIME” 选择 上海时间</li><li>“SOFTWARE SELECTION” 选择安装“GNOME Desktop”</li><li>点击”INSTALLATION DESTINATION” ，都是默认即可</li><li>“NETWORK &amp; HOST NAME” –&gt; 打开开关（可以看到它自动给我们给配了一个动态的ip地址，子网掩码，网关）,为了下次不会改变，我们选择 “Conguare” –&gt; IPv4 Settings –&gt; Automatic address only –&gt; Add –&gt; 把分配给我们的ip、子网掩码、网关输入进去即可</li><li>Begin Installation 安装即可</li><li>设置root的登录密码(如果密码过于简单，需要按2次Done)</li><li>finsih</li><li>重启之后，勾选协议即可</li><li>finsh</li><li>来到linux的欢迎界面</li><li>选择英文</li><li>关闭Privacy</li></ol><h2 id="终端连接"><a href="#终端连接" class="headerlink" title="终端连接"></a>终端连接</h2><p>进入到centos7界面之后，关闭getting started，看到的是图形化界面，这时候我们需要测试一下宿主机是否可以连接上虚拟机</p><ol><li>右键linux桌面，选择 open in terminal ，输入命令 <code>ifconfig</code> 查看linux的ip地址</li><li>在宿主机中通过dos命令测试(如果dos没有安装ssh，可以使用git bash)，命令为 <code>ssh root@ip地址</code> 后，输入yes，并输入linux密码，如果能进入linux中，继续进行测试</li><li>在宿主机中查看ip地址后，回到linux终端里，用同样的测试linux能否连接宿主机 <code>ping 宿主机ip地址</code></li><li>最后再ping一下百度即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serializable序列化</title>
      <link href="2021/07/19/Serializable%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>2021/07/19/Serializable%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Serializable序列化"><a href="#Serializable序列化" class="headerlink" title="Serializable序列化"></a>Serializable序列化</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>java提供了一种对象持久化保存技术。</p><p>类对象都是保存在内存中，在程序结束后就会被自动回收掉；但是如果想要对象被持久化保存下来，以便下次能够使用，就需要使用到java对象的序列化与反序列化。</p><p>比如说：要把对象持久化到本地文件，就需要把对象转换成字节序列(序列化)，该字节序列包含：对象的数据、对象的类型和对象中存储的属性，字节序列写出到文件之后，相当于对象持久化保存到了文件；反之，该字节序列还可以从文件中读取回来，重构对象(反序列化)。如图:</p><p><img src="https://serialieableimages.oss-cn-guangzhou.aliyuncs.com/%E5%BA%8F%E5%88%97%E5%8C%96.png" alt></p><h2 id="序列化的用途"><a href="#序列化的用途" class="headerlink" title="序列化的用途"></a>序列化的用途</h2><ol><li>需要对象在网络中传输</li><li>持久化保存到本地文件或数据库</li></ol><h2 id="序列化需满足的条件"><a href="#序列化需满足的条件" class="headerlink" title="序列化需满足的条件"></a>序列化需满足的条件</h2><p>一个对象要想序列化，必须满足两个条件：</p><ol><li>该类必须实现 java.io.Serializeable 接口，Serializable是一个空接口，里面没有属性和方法。</li><li>该类所有属性必须是可序列化的，即属性类型都有直接或间接实现Serializable接口，如果一个属性不需要可序列化，则需要使用 <code>transient</code> 关键字修饰这个字段</li></ol><h2 id="序列化示例操作"><a href="#序列化示例操作" class="headerlink" title="序列化示例操作"></a>序列化示例操作</h2><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><p>ObjectOutputStream 序列化流，将对象序列化为字节序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getter/setter 构造器等方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"小王"</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化：把内存信息写入硬盘</span></span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"person.txt"</span>));</span><br><span class="line">        <span class="comment">// 将对象写出到文件中</span></span><br><span class="line">        outputStream.writeObject(person);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：因为对象没有进行序列化，所以报了以下异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.io.NotSerializableException: com.hbp.serializable.Person</span><br></pre></td></tr></table></figure><p>因此我们需要在对象后面实现 Serializable 接口即可</p><h3 id="反序列化操作"><a href="#反序列化操作" class="headerlink" title="反序列化操作"></a>反序列化操作</h3><p>ObjectInputStream 反序列化流，将之前使用ObjectOutputStream序列化的原始数据重构为对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeSerializableDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里会额外抛一个异常ClassNotFoundException，因为反序列的对象有可能找不到。因为现在写的这两个类有可能分布在不同的系统中，有可能找不到另一个系统传过来的二进制流文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 反序列</span></span><br><span class="line">        ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"person.txt"</span>));</span><br><span class="line">        Person person = (Person) inputStream.readObject();</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：成功打印出对象的信息。</p><p>在这个类中，没有进行对象的创建，就通过这种流的形式就可以重构出对象信息，这样就可以通过在网络中传输对象信息</p><h3 id="transient-示例"><a href="#transient-示例" class="headerlink" title="transient 示例"></a>transient 示例</h3><p>假如给Person中的name属性加入transient </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再进行序列化和反序列化。</p><p>结果，反序列化打印出来的name为null，age正常输出</p><h3 id="版本号示例"><a href="#版本号示例" class="headerlink" title="版本号示例"></a>版本号示例</h3><p>当 JVM 反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个InvalidClassException异常。发生这个异常的原因可能如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含未知数据类型</li><li>该类没有可访问的无参数构造方法</li></ul><p>Serializable 接口给需要序列化的类，提供了一个序列版本号。SerialVersionUID 该版本号的目的在于验证序列化的对象和对应类是否版本匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这行在序列化之后再添加</span></span><br><span class="line">    <span class="comment">//private String sex;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：先序列化再把注释取消，结果：反序列失败，抛出异常。</p><p>因为对 对象进行修改，它的版本号都会修改；所以如果对类的信息进行了修改，要重新序列化一次。</p><p>当然还可以加入序列版本号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加入序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 这行在序列化之后再添加</span></span><br><span class="line">    <span class="comment">//private String sex;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时测试：先进行序列化，再把注释取消。</p><p>结果，正常运行，只要加了版本号，它两的版本号就会是一样的。其实类修改了，本就应该重新序列化一下，但是有时候因为某些原因忘记重新序列化了，那么只要有了版本号，就不会报错。</p><p>因为Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地响应实体类的serialVersionUID进行比较，相同则认为一致，否则报异常。</p><p>一般来说，定义serialVersionUID的定义有两种，分别为</p><ol><li><p>采用默认的1L，具体为 private static final long serialVersionUID = 1L;</p><p>在可兼容的前提下，可以保留旧版本号，如果不兼容，或者想让它不兼容，就手动递增版本号 1-&gt; 2 -&gt; 3..</p></li><li><p>根据类名，接口名，成员方法及属性来生成一个64位的哈希字段，如private static final long serialVersionUID = xxxL</p><p>开发者认为每次修改类后就需要生成新的版本号，不想向下兼容，操作就是删除原有的serialVersionUID声明语句，再重新自动生成一下</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudAlibaba(7.网关Gateway)</title>
      <link href="2021/07/13/Spring%20Cloud%20Alibaba(7.%E7%BD%91%E5%85%B3Gateway)/"/>
      <url>2021/07/13/Spring%20Cloud%20Alibaba(7.%E7%BD%91%E5%85%B3Gateway)/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-7-网关Gateway"><a href="#Spring-Cloud-Alibaba-7-网关Gateway" class="headerlink" title="Spring Cloud Alibaba(7.网关Gateway)"></a>Spring Cloud Alibaba(7.网关Gateway)</h1><h2 id="网关简介"><a href="#网关简介" class="headerlink" title="网关简介"></a>网关简介</h2><p>在微服务架构中，一个系统会被拆分为很多个微服务。那么作为客户端要如何去调用这么多的微服务呢？如果没有网关的存在，我们只能在客户端记录每个微服务的地址，然后分别去用。</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E4%BC%A0%E7%BB%9F%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F.png" alt></p><p><strong>这样的架构，会存在着诸多的问题：</strong></p><ul><li>每个业务都会需要鉴权、限流、权限校验、跨域等逻辑，如果<strong>每个业务都各自为战，自己造轮子实现一遍</strong>，会很蛋疼，完全可以抽出来，放到一个统一的地方去做。</li><li>如果业务量比较简单的话，这种方式前期不会有什么问题，但随着业务越来越复杂，比如淘宝、亚马逊打开一个页面可能会涉及到数百个微服务协同工作，如果每一个微服务都分配一个域名的话，一方面客户端代码会很难维护，涉及到数百个域名，另一方面是连接数的瓶颈，想象一下你打开一个APP，通过抓包发现涉及到了数百个远程调用，这在移动端下会显得非常低效。</li><li>后期如果需要对微服务进行重构的话，也会变的非常麻烦，需要客户端配合你一起进行改造，比如商品服务，随着业务变的越来越复杂，后期需要进行拆分成多个微服务，这个时候对外提供的服务也需要拆分成多个，同时需要客户端配合你进行改造，非常蛋疼。</li></ul><p>上面的这些问题可以借助API网关来解决，API网关好比一个小区的门卫，他可以帮我们做很多事情。</p><ul><li>全局性流控</li><li>日志统计</li><li>防止sql注入</li><li>防止web攻击</li><li>屏蔽工具扫描</li><li>黑白IP名单</li><li>证书/加解密处理</li></ul><p>所谓的API网关，就是指系统的统一入口，它封装了应用程序的内部结构，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、路由转发等等。</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/api%E7%BD%91%E5%85%B3%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F.png" alt></p><h2 id="什么是Spring-Cloud-Gateway"><a href="#什么是Spring-Cloud-Gateway" class="headerlink" title="什么是Spring Cloud Gateway"></a>什么是Spring Cloud Gateway</h2><p>网关作为流量的入口，常用的功能包括路由转发，权限校验，限流等。</p><p>Spring Cloud Gateway 是Spring Cloud官方推出的第二代网关框架，定位于取代 Netflix Zuul1.0。相比 Zuul 来说，Spring Cloud Gateway 提供更优秀的性能，更强大的有功能。Spring Cloud Gateway 是由 WebFlux + Netty + Reactor 实现的响应式的 API 网关。<strong>它不能在传统的 servlet 容器中工作，也不能构</strong>建成 war 包。</p><p>Spring Cloud Gateway 旨在为微服务架构提供一种简单且有效的 API 路由的管理方式，并基于 Filter 的方式提供网关的基本功能，例如说安全认证、监控、限流等等。</p><p><strong>其他的网关组件：</strong></p><p>在SpringCloud微服务体系中，有个<strong>很重要的组件就是网关</strong>，在1.x版本中都是采用的Zuul网关；但在2.x版本中，zuul的升级一直跳票，<strong>SpringCloud最后自己研发了一个网关替代Zuul，</strong>那就是<strong>SpringCloud Gateway</strong>网上很多地方都说Zuul是阻塞的，Gateway是非阻塞的，这么说是不严谨的，准确的讲Zuul1.x是阻塞的，而在2.x的版本中，Zuul也是基于Netty，也是非阻塞的，如果一定要说性能，其实这个真没多大差距。</p><h2 id="Spring-Cloud-Gateway-功能特征"><a href="#Spring-Cloud-Gateway-功能特征" class="headerlink" title="Spring Cloud Gateway 功能特征"></a>Spring Cloud Gateway 功能特征</h2><ul><li><p>基于Spring Framework 5, Project Reactor 和 Spring Boot 2.0 进行构建；</p></li><li><p>动态路由：能够匹配任何请求属性；</p></li><li><p>支持路径重写;</p></li><li><p>集成 Spring Cloud 服务发现功能（Nacos、Eruka）；</p></li><li><p>可集成流控降级功能（Sentinel、Hystrix）；</p></li><li><p>可以对路由指定易于编写的 Predicate（断言) 和 Filter（过滤器）</p></li></ul><p><strong>核心概念</strong></p><ul><li><p>路由（route) </p><p>路由是网关中最基础的部分，路由信息包括一个ID、一个目的URI、一组断言工厂、一组Filter组成。如果断言为真，则说明请求的URL和配置的路由匹配</p></li><li><p>断言(predicates)</p><p>Java8中的断言函数，SpringCloud Gateway中的断言函数类型是Spring5.0框架中的ServerWebExchange。断言函数允许开发者去定义匹配Http request中的任何信息，比如请求头和参数等。</p></li><li><p>过滤器（Filter)</p><p>SpringCloud Gateway中的filter分为Gateway FilIer和Global Filter。Filter可以对请求和响应进行处理。</p></li></ul><h2 id="Spring-Cloud-Gateway快速开始"><a href="#Spring-Cloud-Gateway快速开始" class="headerlink" title="Spring Cloud Gateway快速开始"></a><strong>Spring Cloud Gateway快速开始</strong></h2><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 路由规则</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order_route</span>  <span class="comment"># 路由唯一标识，路由到order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8010</span>  <span class="comment"># 需要转发的地址</span></span><br><span class="line">          <span class="comment"># 断言规则 用于路由规则的匹配</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-server/**</span> <span class="comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class="line">              <span class="comment"># 通常都会指定一个前缀来进行区分接口，因为有可能另一个服务也有order/add这个接口地址 路由到 ↓</span></span><br><span class="line">              <span class="comment"># http://localhost:8088/order-server/order/add</span></span><br><span class="line">              <span class="comment"># http://localhost:8010/order-server/order/add</span></span><br><span class="line">              <span class="comment"># 但因为order-server这个服务的接口没有order-server，所以我们需要把第一个给去掉</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  <span class="comment"># 转发之前去掉第一层路径，变成http://localhost:8010/order/add</span></span><br><span class="line">        <span class="comment">#- id: stock_route</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="集成Nacos"><a href="#集成Nacos" class="headerlink" title="集成Nacos"></a>集成Nacos</h3><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos服务注册与发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 路由规则</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order_route</span>  <span class="comment"># 路由唯一标识，路由到order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order-server</span>  <span class="comment"># 需要转发的地址  lb:使用nacos中的本地负载均衡策略</span></span><br><span class="line">          <span class="comment"># 断言规则 用于路由规则的匹配</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-server/**</span></span><br><span class="line">              <span class="comment"># 通常都会指定一个前缀来进行区分接口，因为有可能另一个服务也有order/add这个接口地址 路由到 ↓</span></span><br><span class="line">              <span class="comment"># http://localhost:8088/order-server/order/add</span></span><br><span class="line">              <span class="comment"># http://localhost:8010/order-server/order/add</span></span><br><span class="line">              <span class="comment"># 但因为order-server这个服务的接口没有order-server，所以我们需要把第一个给去掉</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  <span class="comment"># 转发之前去掉第一层路径，变成http://localhost:8010/order/add</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>测试即可，url为：localhost:8088/order-server/order/add</p></li></ol><p>当然，第2点的yml文件，还可以有一种简写的方式（不推荐这种写法，可读性差），去掉关于路由的配置，自动寻找服务</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启动自动识别nacos服务；它能自动在nacos控制台中查看服务名，并且默认断言，过滤服务名</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><h4 id="路由断言工厂配置"><a href="#路由断言工厂配置" class="headerlink" title="路由断言工厂配置"></a>路由断言工厂配置</h4><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories" target="_blank" rel="noopener">官方文档有多种断言工厂方式</a></p><p>当然还可以自定义路由断言工厂：</p><p>自定义路由断言工厂需要继承 AbstractRoutePredicateFactory 类，重写 apply 方法的逻辑。在 apply 方法中可以通过 exchange.getRequest() 拿到 ServerHttpRequest 对象，从而可以获取到请求的参数、请求方式、请求头等信息。 </p><p>【<strong>注意</strong>】：</p><ol><li>必须是Spring组件</li><li>类必须加上RoutePredicateFactory作为结尾</li><li>必须继承AbstractRoutePredicateFactory</li><li>必须声明静态内部类，声明属性来接受，配置文件中对应的断言的信息</li><li>需要结合shortcutFieldOrder进行绑定</li><li>通过apply进行逻辑判断 true就是匹配成功，false匹配失败</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckAuthRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRoutePredicateFactory</span>&lt;<span class="title">CheckAuthRoutePredicateFactory</span>.<span class="title">Con</span></span></span><br><span class="line"><span class="class"><span class="title">fig</span>&gt; </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheckAuthRoutePredicateFactory</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(Config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GatewayPredicate() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(ServerWebExchange serverWebExchange)</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">"调用CheckAuthRoutePredicateFactory"</span> + config.getName());</span><br><span class="line">                <span class="keyword">if</span>(config.getName().equals(<span class="string">"xushu"</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快捷配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="string">"name"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">gateway:</span> </span><br><span class="line">    <span class="comment">#设置路由：路由id、路由到微服务的uri、断言</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="string">‐</span> <span class="string">id:</span> <span class="string">order_route</span> <span class="comment">#路由ID，全局唯一</span></span><br><span class="line">          <span class="string">uri:</span> <span class="string">http://localhost:8020</span> <span class="comment">#目标微服务的请求地址和端口</span></span><br><span class="line">          <span class="attr">predicates:</span>   <span class="comment"># 测试：http://localhost:8888/order/findOrderByUserId/1</span></span><br><span class="line">            <span class="string">‐</span> <span class="string">Path=/order/**</span> <span class="comment">#Path路径匹配</span></span><br><span class="line">            <span class="comment">#自定义CheckAuth断言工厂</span></span><br><span class="line">            <span class="string">‐</span> <span class="string">CheckAuth=hbp</span></span><br></pre></td></tr></table></figure><h4 id="过滤器工厂配置"><a href="#过滤器工厂配置" class="headerlink" title="过滤器工厂配置"></a>过滤器工厂配置</h4><p>Gateway 内置了很多的过滤器工厂，我们通过一些过滤器工厂可以进行一些业务逻辑处理器，比如添加剔除响应头，添加去除参数等</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener">官网介绍了有30多种工厂配置</a></p><p>当然还可以自定义过滤器工厂配置</p><p>继承AbstractNameValueGatewayFilterFactory且我们的自定义名称必须要以GatewayFilterFactory结尾并交给spring管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckAuthGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractNameValueGatewayFilterFactory</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(NameValueConfig config)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) ‐&gt; &#123; </span><br><span class="line">            log.info(<span class="string">"调用CheckAuthGatewayFilterFactory==="</span> + config.getName() + <span class="string">":"</span> + config.getValue());</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置自定义的过滤器工厂</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">gateway:</span> </span><br><span class="line">    <span class="comment">#设置路由：路由id、路由到微服务的uri、断言</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="string">‐</span> <span class="string">id:</span> <span class="string">order_route</span> <span class="comment">#路由ID，全局唯一</span></span><br><span class="line">          <span class="string">uri:</span> <span class="string">http://localhost:8020</span> <span class="comment">#目标微服务的请求地址和端口</span></span><br><span class="line">      <span class="comment">#配置过滤器工厂</span></span><br><span class="line">      <span class="attr">filters:</span></span><br><span class="line">        <span class="string">‐</span> <span class="string">CheckAuth=fox,男</span></span><br></pre></td></tr></table></figure><h3 id="全局过滤器配置"><a href="#全局过滤器配置" class="headerlink" title="全局过滤器配置"></a>全局过滤器配置</h3><p>局部过滤器和全局过滤器区别： </p><p>局部：局部针对某个路由， 需要在路由中进行配置</p><p>全局：针对所有路由请求， 一旦定义就会投入使用</p><p>GlobalFilter有很多的过滤器，具体可在官网查看</p><p>GlobalFilter 接口和 GatewayFilter 有一样的接口定义，只不过， GlobalFilter 会作用于所有路由。</p><h4 id="LoadBalancerClientFilter"><a href="#LoadBalancerClientFilter" class="headerlink" title="LoadBalancerClientFilter"></a><strong>LoadBalancerClientFilter</strong></h4><p>LoadBalancerClientFilter 会查看exchange的属性 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 的值（一个URI），如果该值的scheme是 lb，比如：lb://myservice ，它将会使用Spring Cloud的LoadBalancerClient 来将 myservice 解析成实际的host和port，并替换掉 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 的内容。</p><p>其实就是用来整合负载均衡器Ribbon的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">  cloud: </span><br><span class="line">    gateway:  </span><br><span class="line">      routes: </span><br><span class="line">        ‐ id: order_route</span><br><span class="line">          uri: lb:<span class="comment">//mall‐order</span></span><br><span class="line">      predicates:  </span><br><span class="line">        ‐ Path=/order<span class="comment">/**</span></span><br></pre></td></tr></table></figure><h4 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span> </span>&#123; <span class="number">8</span>  Logger log= LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">      log.info(exchange.getRequest().getPath().value());</span><br><span class="line">      <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Gateway跨域配置【有待完善】"><a href="#Gateway跨域配置【有待完善】" class="headerlink" title="Gateway跨域配置【有待完善】"></a>Gateway跨域配置【有待完善】</h4><h5 id="通过yml配置的方式"><a href="#通过yml配置的方式" class="headerlink" title="通过yml配置的方式"></a><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration" target="_blank" rel="noopener">通过yml配置的方式</a></h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跨域配置</span></span><br><span class="line"><span class="attr">globalcors:</span></span><br><span class="line">  <span class="attr">cors-configurations:</span></span><br><span class="line">    <span class="string">'[/**]'</span><span class="string">:</span>  <span class="comment"># 允许跨域访问的资源</span></span><br><span class="line">      <span class="attr">allowedOrigins:</span> <span class="string">"*"</span> <span class="comment"># 跨域允许来源</span></span><br><span class="line">      <span class="attr">allowedMethods:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">POST</span></span><br></pre></td></tr></table></figure><p>前端示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"用户列表"</span> <span class="attr">onclick</span>=<span class="string">"getData()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.<span class="keyword">get</span>('http://localhost:8088/order-server/order/add',function (data) &#123;</span></span><br><span class="line">            alert(data)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：使用IDEA打开：open in Broswer -&gt; chrome</p><h5 id="通过java配置的方式"><a href="#通过java配置的方式" class="headerlink" title="通过java配置的方式"></a>通过java配置的方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行访问的资源 webflux需要额外设置下面的代码</span></span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gateway整合sentinel流控降级"><a href="#gateway整合sentinel流控降级" class="headerlink" title="gateway整合sentinel流控降级"></a>gateway整合sentinel流控降级</h2><p>网关作为内部系统外的一层屏障, 对内起到一定的保护作用, 限流便是其中之一. 网关层的限流可以简单地针对不同路由进行限流, 也可针对业务的接口进行限流，或者根据接口的特征分组限流。</p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81</a></p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐alibaba‐sentinel‐gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐starter‐alibaba‐sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在dashboard中添加配置，这里的控制台界面跟普通的sentinel界面稍微有些不一样，可以自定玩一下，它可以对API分组统一进行流控等，可选参数多了</p></li></ol><h3 id="自定义流控降级异常"><a href="#自定义流控降级异常" class="headerlink" title="自定义流控降级异常"></a>自定义流控降级异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BlockRequestHandler blockRequestHandler = <span class="keyword">new</span> BlockRequestHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange exchange, Throwable throwable)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 当然在这一块还可以通过throwable来判断是流控还是降级异常</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 这里可以同统一处理的返回对象Result</span></span><br><span class="line">                Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">"code"</span>,<span class="number">20001</span>);</span><br><span class="line">                map.put(<span class="string">"msg"</span>,<span class="string">"限流了"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK)</span><br><span class="line">                        .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                        .body(BodyInserters.fromValue(map));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试。然后在dashboard设置规则后，访问接口，就可以自动触发这个自定义流控降级异常了</p><p>当然还可以通过yaml进行自定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring:cloud.sentinel.scg.fallback.mode</span> <span class="string">=</span> <span class="string">response</span></span><br><span class="line"><span class="string">pring.cloud.sentinel.scg.fallback.response‐body</span> <span class="string">=</span> <span class="string">'&#123;"code":403,"mes":"限流了"&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="网关高可用"><a href="#网关高可用" class="headerlink" title="网关高可用"></a><strong>网关高可用</strong></h2><p>为了保证 Gateway 的高可用性，可以同时启动多个 Gateway 实例进行负载，在 Gateway 的上游使用 Nginx 或者 F5 进行负载转发以达到高可用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream gateway&#123;</span><br><span class="line">server localhost:8889;</span><br><span class="line">server localhost:8888;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"># root html;</span><br><span class="line"># index indexhtml index.htm</span><br><span class="line">proxy_pass http://gateway;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba(4.Nacos Config配置中心)</title>
      <link href="2021/07/08/Spring%20Cloud%20Alibaba(5.Nacos-Config%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83)/"/>
      <url>2021/07/08/Spring%20Cloud%20Alibaba(5.Nacos-Config%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83)/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-4-Nacos-Config配置中心"><a href="#Spring-Cloud-Alibaba-4-Nacos-Config配置中心" class="headerlink" title="Spring Cloud Alibaba(4.Nacos Config配置中心)"></a>Spring Cloud Alibaba(4.Nacos Config配置中心)</h1><p>在微服务架构中，服务很多，并且每个服务我们都需要为其配置一个配置文件，如开发环境，生产环境等，很显示他们中会有相同的配置信息，每个服务都维护这一配置文件，假如需要换个数据源，那么他们用到该数据源的配置文件都需要进行修改，非常麻烦。</p><p>因此这种方式有3大问题：</p><ol><li>维护性（每次修改配置文件，都需要找到相应的服务的配置文件，更改完之后还得重启）</li><li>时效性（改完之后还得重启）</li><li>安全性（数据库的ip地址暴露在配置文件，造成不安全，假如程序员删库跑路之类就惨了） </li></ol><p>以上3个问题，配置中心都可以解决，把公共的放在配置中心中，只要一改，所有服务(即nacos客户端)都能发生及时地更新，他们能动态感知到，并且不需要重启。nacos是由一个权限控制的。这就可以解决安全性问题</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/naos%E4%BD%9C%E7%94%A8%E5%9B%BE.jpg" alt></p><p><strong>springcloud config 对比</strong></p><p><strong>三大优势：</strong></p><p>springcloud config大部分场景结合git 使用, 动态变更还需要依赖Spring Cloud Bus 消息总线来通过所有的客户端变化.</p><p>springcloud config不提供可视化界面</p><p>nacos config使用长轮询更新配置, 一旦配置有变动后，通知Provider的过程非常的迅速, 从速度上秒杀springcloud原来的config几条街。</p><p>市面上的配置中心有 spring cloud config、apollo、nacos。</p><p>总的来说nacos最强。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li><p>准备配置，nacos server中 配置管理 –&gt; 配置列表 –&gt; 新建com.hbp.order.redis，然后根据自己的配置输入即可</p><ul><li>Namespace（命名空间）：代表不同<strong>环境</strong>，如开发、测试、生产环境。</li><li>Group：代表某<strong>项目</strong>，属于命名空间中的细粒度划分，如XX医疗项目、XX电商项目</li><li>DataId：每个项目下往往有若干个<strong>工程（微服务）</strong>，每个配置集(DataId)是一个<strong>工程（微服务）</strong>的<strong>主配置文件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 他们之间的层级关系为：</span></span><br><span class="line">namespace      --环境</span><br><span class="line">   group       --项目 </span><br><span class="line">      DataId   --工程</span><br></pre></td></tr></table></figure></li><li><p>权限管理（低版本的Nacos是没有这个权限管理的）</p><p>通过给用户设置权限来管理这些配置文件。</p><p>要开启权限管理，首先得先去修改Nacos文件中的 application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### If turn on auth system:</span><br><span class="line">nacos.core.auth.enabled=true</span><br></pre></td></tr></table></figure></li></ol><h3 id="搭建nacos-config服务"><a href="#搭建nacos-config服务" class="headerlink" title="搭建nacos-config服务"></a><strong>搭建nacos-config服务</strong></h3><p>首先在项目中新建nacos-config子Maven服务</p><ol><li><p>新建com.hbp.config.ConfigApplication启动类</p></li><li><p>新建yml配置文件，配上端口号即可</p></li><li><p>添加Nacos config依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在resources文件夹下新建bootstrap.yml 配置文件，bootstrap.yml 先于 application.yml 加载。因为官网文档说明：必须使用bootstrap.yml 配置文件来配置Nacos Server地址。</p><p>当然如果你的Nacos中开启的权限管理开关，则还需要输入用户名、密码跟命名空间。还有就是不是所有的配置都需要写在 bootstrap.yml 中的，只有那些关于配置中心的配置才需要</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-nacos</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>启动服务，测试微服务是否使用配置中心的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = SpringApplication.run(ConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        String userName = applicationContext.getEnvironment().getProperty(<span class="string">"user.name"</span>);</span><br><span class="line">        String userAge = applicationContext.getEnvironment().getProperty(<span class="string">"user.age"</span>);</span><br><span class="line">        System.out.println(<span class="string">"user name :"</span> + userName + <span class="string">"; age: "</span> + userAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果发现，启动后它并没有读取我们定义的配置文件，而是输出了我们自己电脑的用户名。为什么会造成这种结果呢？是因为我们需要把nacos管理平台中的 Data Id 跟 我们bootstrap.yml 配置文件中的 spring.application.name 对应起来。即它是根据服务名去配置中心读取配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 会自动根据服务名拉取dataId对应的配置文件</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">com.hbp.order.redis</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>测试成功。当然我们很多时候一个服务会有几个配置文件，如还会有一个公共配置文件，那么这个时候Data Id就不可能跟我们的服务名一致了，<strong>如果Data Id跟服务名不一致，则需要手动指定Data Id（下面会讲解）</strong>。并且这时候还可以测试一下配置文件动态改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ConfigurableApplicationContext applicationContext = SpringApplication.run(ConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 当动态配置刷新时，会更新到Enviroment中，因此这里每隔一秒刷新一下</span></span><br><span class="line">        String userName = applicationContext.getEnvironment().getProperty(<span class="string">"user.name"</span>);</span><br><span class="line">        String userAge = applicationContext.getEnvironment().getProperty(<span class="string">"user.age"</span>);</span><br><span class="line">        System.out.println(<span class="string">"user name :"</span> + userName + <span class="string">"; age: "</span> + userAge);</span><br><span class="line">        <span class="comment">// 底层源码就是用Thread.sleep，只是用TimeUnit时间可读性更好</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Nacos-config的其他配置"><a href="#Nacos-config的其他配置" class="headerlink" title="Nacos-config的其他配置"></a>Nacos-config的其他配置</h3><h4 id="修改默认文件扩展名"><a href="#修改默认文件扩展名" class="headerlink" title="修改默认文件扩展名"></a>修改默认文件扩展名</h4><p>naocs-config默认是读取文件拓展名为 properties 的文件</p><p>当然它也可以进行切换成其他拓展名的。只需要在应用的 bootstrap.yml配置文件中显示声明dataid文件拓展名</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nacos客户端，默认是Properties的文件扩展名</span></span><br><span class="line"><span class="comment"># 一旦修改成了非Properties格式，则必须通过file-extension进行设置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">config:</span></span><br><span class="line">    <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure><h4 id="支持profile粒度的配置：加载配置文件优先级"><a href="#支持profile粒度的配置：加载配置文件优先级" class="headerlink" title="支持profile粒度的配置：加载配置文件优先级"></a>支持profile粒度的配置：加载配置文件优先级</h4><p>在配置中心出来之前，我们的项目配置文件通常都分有 ：application-dev.yml、application-prod.yml 的环境配置，通常命名格式为<code>application-profile.yml</code>，然后通过Spring默认加载的主配置application.yml 通过 spring.profiles.active=dev 的方式进行修改。</p><p>配置中心同样支持这种profiles粒度的文件配置，其实跟传统方式是差不多的：</p><p>spring-cloud-starter-alibaba-nacos-config 在加载配置的时候，默认加载配置以 DataId 为                                   <code>{spring.application.name}.{file-extension:yaml}</code>为基础配置。还加载 DataId为 <code>{spring.application.name}.{profile}.{file-extension:properties}</code>的基础配置。在日常开发中，遇到多套环境下的不同配置，同样可以通过<code>spring.profiles.active</code>来配置，当然这种profile方式的配置只能针对默认的配置文件（跟服务名相同的DataId的配置文件）才能使用。</p><p><strong>【注意】：除了默认的配置文件， 其他dataId都要加上后缀扩展名</strong></p><p>此时的bootstrap.yml配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 会自动根据服务名拉取dataId对应的配置文件</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">com.hbp.order.redis</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="comment"># Nacos客户端，默认是Properties的文件扩展名</span></span><br><span class="line">      <span class="comment"># 一旦修改成了非Properties格式，则必须通过file-extension进行设置(!!只针对默认配置文件和profiles!!)</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure><p>此时激活的配置为：dev，读取配置的后缀名为：yaml。则因此我们在配置中心创建配置文件时，需要按照规则来进行命名：</p><p> <code>{spring.application.name}.{profile}.{file-extension:properties}</code>，如下图，<strong>并且一定要加上文件后缀名</strong>。</p><p><img src="H:%5Cimages%5CspringCloudAlibabaimages%5C%E5%90%8E%E7%BC%80%E5%90%8D%E5%BF%85%E9%A1%BB%E5%8A%A0%E4%B8%8A.png" alt="后缀名必须加上"></p><p>【<strong>测试</strong>】发布之后，我们可以在控制台发现，配置已经实时更新了。而且由此我们可以得出他们的优先级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile &gt; 默认配置的文件。并且形成互补(即profile没有而默认配置文件有的，则也会显示默认配置文件的配置)。这里其实跟传统是一样的。</span><br></pre></td></tr></table></figure><p>当然，更多推荐的是使用命名空间的方式来配置不同的环境配置，因此上述的做法是没有办法针对不同的环境来做权限的配置的（权限管理只针对命名空间进行管理）。因此存在之前所说的安全性问题。</p><h4 id="支持自定义-namespace的配置"><a href="#支持自定义-namespace的配置" class="headerlink" title="支持自定义 namespace的配置"></a><strong>支持自定义</strong> namespace的配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">com.hbp.order.redis</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment"># 新增的配置，这里的value是我dev命名空间所对应的MD5，新版的nacos直接写dev即可</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">cb1d0fb2-3165-4d18-b4e7-3f2577060f3e</span></span><br></pre></td></tr></table></figure><p>自定克隆测试</p><h4 id="支持自定义-Group-的配置"><a href="#支持自定义-Group-的配置" class="headerlink" title="支持自定义 Group 的配置"></a><strong>支持自定义</strong> <strong>Group</strong> 的配置</h4><p>Group是继命名空间之后更细粒划分，比方说：此时已经按照不同的环境进行归类了，在此环境下，按照不同的项目进行归类。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">com.hbp.order.redis</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">cb1d0fb2-3165-4d18-b4e7-3f2577060f3e</span></span><br><span class="line">        <span class="comment"># 新增的配置 (!!只针对默认配置文件和profiles!!)</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">SpringCloud</span></span><br></pre></td></tr></table></figure><p><img src="H:%5Cimages%5CspringCloudAlibabaimages%5C%E4%B8%8D%E5%90%8C%E7%BB%84%E5%8F%AF%E4%BB%A5%E5%AD%98%E5%9C%A8%E7%9B%B8%E5%90%8C%E5%90%8D%E5%AD%97.png" alt="不同组可以存在相同名字"></p><p>由此我们可以得出：不同组中，DataId 可以相同</p><h4 id="支持自定义扩展的DataId-配置"><a href="#支持自定义扩展的DataId-配置" class="headerlink" title="支持自定义扩展的DataId 配置"></a>支持自定义扩展的DataId 配置</h4><p>前面我们说到，DataId 要跟我们的服务名要一致，否则读取不了配置文件，但是往往除了默认的配置文件之外，还会有一个公共的配置文件，那么这时候就跟服务名不一致了，要想读取公共的配置文件，我们可以使用自定义的DataId 配置</p><p>它提供了2种方式进行读取：区别就只是优先级不同</p><h5 id="shared-configs"><a href="#shared-configs" class="headerlink" title="shared-configs"></a>shared-configs</h5><p>下图中的Data ID 和 Group 是可以自定义，无约束</p><p>【<strong>注意</strong>】：Data ID的后缀名和Group不需要跟Bootstrap.yml中的file-extension和Group一致。这两个约束只针对于默认配置文件和profiles。而当前这个是自定义的，与这些无关</p><p><img src="H:%5Cimages%5CspringCloudAlibabaimages%5C%E8%87%AA%E5%AE%9A%E4%B9%89DataId%E9%85%8D%E7%BD%AE.png" alt="自定义DataId配置"></p><p>启动类修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    String userName = applicationContext.getEnvironment().getProperty(<span class="string">"user.name"</span>);</span><br><span class="line">    String userAge = applicationContext.getEnvironment().getProperty(<span class="string">"user.age"</span>);</span><br><span class="line">    String config = applicationContext.getEnvironment().getProperty(<span class="string">"user.config"</span>);</span><br><span class="line">    System.out.println(<span class="string">"user name :"</span> + userName + <span class="string">"; age: "</span> + userAge + <span class="string">"; config: "</span> + config);</span><br><span class="line">    <span class="comment">// 底层源码就是用Thread.sleep，只是用TimeUnit时间可读性更好</span></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">com.hbp.order.redis</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">cb1d0fb2-3165-4d18-b4e7-3f2577060f3e</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">SpringCloud</span></span><br><span class="line">        <span class="comment"># 新增的配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">com.SpringCloud.common.properties</span>     <span class="comment">#下标为[0]</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#group: 默认是Default-group</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">com.SpringCloud.common02.properties</span>   <span class="comment">#下标为[0]</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#group: 默认是Default-group</span></span><br></pre></td></tr></table></figure><p>重启服务并测试。并且我们可以得出优先级的结论：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile &gt; 默认配置的文件 &gt; shared-configs(下标越大优先级越大)</span><br></pre></td></tr></table></figure><h5 id="extension-configs"><a href="#extension-configs" class="headerlink" title="extension-configs"></a>extension-configs</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">com.hbp.order.redis</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">cb1d0fb2-3165-4d18-b4e7-3f2577060f3e</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">SpringCloud</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">com.SpringCloud.common.properties</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#group: 默认是Default-group</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">com.SpringCloud.common02.properties</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#group: 默认是Default-group</span></span><br><span class="line">        <span class="string">extension-configs[0]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">com.SpringCloud.common03.properties</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>自定创建配置文件。重启服务并测试。并且我们可以得出优先级的结论：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile &gt; 默认配置的文件 &gt; extension-configs(下标越大优先级越大) &gt; shared-configs(下标越大优先级越大)</span><br></pre></td></tr></table></figure><blockquote><p> <strong>总结：我们一些特有的配置可以放在默认配置的文件或profile中，而公共文件则可以放在 shared-configs中，当某些时候需要临时修改配置文件的时候，我们可以使用 extension-configs进行覆盖处理</strong></p></blockquote><h4 id="RefreshScope"><a href="#RefreshScope" class="headerlink" title="@RefreshScope"></a>@RefreshScope</h4><p>@Value注解可以获取到配置中心的值，但是无法动态感知修改后的值，需要利用@RefreshScope注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;common.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String age;   </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/common"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba(3.Ribbon负载均衡器)</title>
      <link href="2021/07/05/Spring%20Cloud%20Alibaba(3.Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8)/"/>
      <url>2021/07/05/Spring%20Cloud%20Alibaba(3.Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-3-Ribbon负载均衡器"><a href="#Spring-Cloud-Alibaba-3-Ribbon负载均衡器" class="headerlink" title="Spring Cloud Alibaba(3.Ribbon负载均衡器)"></a>Spring Cloud Alibaba(3.Ribbon负载均衡器)</h1><h2 id="什么是Ribbon"><a href="#什么是Ribbon" class="headerlink" title="什么是Ribbon"></a>什么是Ribbon</h2><p>目前主流的负载负载方案分为以下两种：</p><ol><li>（服务器）集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如Nginx）</li><li>（客户端）客户端根据自己的请求情况做负载均衡</li></ol><p>Spring Cloud Ribbon是基于Netflix Ribbon 实现的一套客户端的负载均衡工具，Ribbon客户端组件提供一系列的完善的配置，如超时，重试等。通过Load Balancer获取到服务提供的所有机器实例，Ribbon会自动基于某种规则(轮询，随机)去调用这些服务。Ribbon也可以实现我们自己的负载均衡算法。</p><h3 id="客户端的负载均衡"><a href="#客户端的负载均衡" class="headerlink" title="客户端的负载均衡"></a>客户端的负载均衡</h3><p>例如spring cloud中的ribbon，客户端会有一个服务器地址列表，在发送请求前通过负载均衡算法选择一个服务器，然后进行访问，这是客户端负载均衡；即在客户端就进行负载均衡算法</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.jpg" alt></p><h3 id="服务端的负载均衡"><a href="#服务端的负载均衡" class="headerlink" title="服务端的负载均衡"></a>服务端的负载均衡</h3><p>服务端主要是通过中间层（可由硬件实现，或由软件实现），把服务提供者的远程地址列表配置到Nginx中，集中配置</p><p>例如Nginx，通过Nginx进行负载均衡，先发送请求，然后通过负载均衡算法，在多个服务器之间选择一个进行访问；即在服务器端再进行负载均衡算法分配。</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt></p><p> <strong>常见负载均衡算法</strong></p><p>随机，通过随机选择服务进行执行，一般这种方式使用较少;</p><p>轮训，负载均衡默认实现方式，请求来之后排队处理;</p><p>加权轮训，通过对服务器性能的分型，给高配置，低负载的服务器分配更高的权重，均衡各个服务器的压力;</p><p>地址Hash，通过客户端请求的地址的HASH值取模映射进行服务器调度。 ip —&gt;hash</p><p>最小链接数，即使请求均衡了，压力不一定会均衡，最小连接数法就是根据服务器的情况，比如请求积压数等参数，将请求分配到当前压力最小的服务器上，最小活跃数</p><h2 id="Nacos使用Ribbon"><a href="#Nacos使用Ribbon" class="headerlink" title="Nacos使用Ribbon"></a><strong>Nacos使用Ribbon</strong></h2><ol><li><p>nacos-discovery依赖了ribbon，可以不用再引入ribbon依赖</p></li><li><p>添加<code>@LoadBalanced</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfig</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();                                   </span><br><span class="line">    &#125;                       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"下单成功"</span>);</span><br><span class="line">    String url = <span class="string">"http://stock-server/stock/reduce"</span>;</span><br><span class="line">    String msg = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span> + msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Ribbon负载均衡策略"><a href="#Ribbon负载均衡策略" class="headerlink" title="Ribbon负载均衡策略"></a><strong>Ribbon负载均衡策略</strong></h2><ol><li><p><strong>IRule</strong></p><p>这是所有负载均衡策略的父接口，里边的核心方法就是choose方法，用来选择一个服务实例。</p></li><li><p><strong>AbstractLoadBalancerRule</strong></p><p>AbstractLoadBalancerRule是一个抽象类，里边主要定义了一个ILoadBalancer，这里定义它的目的主要是辅助负责均衡策略选取合适的服务端实例。</p><ol><li><p><strong>RandomRule</strong></p><p>看名字就知道，这种负载均衡策略就是<strong>随机选择一个服务实例</strong>，看源码我们知道，在RandomRule的无参构造方法中初始化了一个Random对象，然后在它重写的choose方法又调用了choose(ILoadBalancer lb, Object key)这个重载的choose方法，在这个重载的choose方法中，每次利用random对象生成一个不大于服务实例总数的随机数，并将该数作为下标所以获取一个服务实例。</p></li><li><p><strong>RoundRobinRule</strong></p><p>RoundRobinRule这种负载均衡策略叫做线性<strong>轮询负载均衡策略</strong>。这个类的choose(ILoadBalancer lb, Object key)函数整体逻辑是这样的：开启一个计数器count，在while循环中遍历服务清单，获取清单之前先通过incrementAndGetModulo方法获取一个下标，这个下标是一个不断自增长的数先加1然后和服务清单总数取模之后获取到的（所以这个下标从来不会越界），拿着下标再去服务清单列表中取服务，每次循环计数器都会加1，如果连续10次都没有取到服务，则会报一个警告No available alive servers after 10 tries from load balancer: XXXX。</p></li><li><p><strong>RetryRule</strong>（在轮询的基础上进行重试）</p><p>看名字就知道这种负载均衡策略带有<strong>重试</strong>功能。首先RetryRule中又定义了一个subRule，它的实现类是RoundRobinRule，然后在RetryRule的choose(ILoadBalancer lb, Object key)方法中，每次还是采用RoundRobinRule中的choose规则来选择一个服务实例，如果选到的实例正常就返回，如果选择的服务实例为null或者已经失效，则在失效时间deadline之前不断的进行重试（重试时获取服务的策略还是RoundRobinRule中定义的策略），如果超过了deadline还是没取到则会返回一个null。 </p></li><li><p><strong>WeightedResponseTimeRule</strong>（<strong>权重 —nacos的NacosRule ，Nacos还扩展了一个自己的基于配置的权重扩展</strong>）****</p><p>WeightedResponseTimeRule是RoundRobinRule的一个子类，在WeightedResponseTimeRule中对RoundRobinRule的功能进行了扩展，WeightedResponseTimeRule中会根据每一个实例的运行情况来给计算出该实例的一个<strong>权重</strong>，然后在挑选实例的时候则根据权重进行挑选，这样能够实现更优的实例调用。WeightedResponseTimeRule中有一个名叫DynamicServerWeightTask的定时任务，默认情况下每隔30秒会计算一次各个服务实例的权重，权重的计算规则也很简单，<strong>如果一个服务的平均响应时间越短则权重越大，那么该服务实例被选中执行任务的概率也就越大</strong>。</p></li><li><p><strong>ClientConfigEnabledRoundRobinRule</strong></p><p>ClientConfigEnabledRoundRobinRule选择策略的实现很简单，内部定义了RoundRobinRule，choose方法还是采用了RoundRobinRule的choose方法，所以它的选择策略<strong>和**</strong>RoundRobinRule<strong>**的选择策略一致</strong>，不赘述。</p></li><li><p><strong>BestAvailableRule</strong></p><p>BestAvailableRule继承自ClientConfigEnabledRoundRobinRule，它在ClientConfigEnabledRoundRobinRule的基础上主要增加了根据loadBalancerStats中保存的服务实例的状态信息来<strong>过滤掉失效的服务实例的功能，然后顺便找出并发请求最小的服务实例来使用。</strong>然而loadBalancerStats有可能为null，如果loadBalancerStats为null，则BestAvailableRule将采用它的父类即ClientConfigEnabledRoundRobinRule的服务选取策略（线性轮询）。</p></li><li><p><strong>ZoneAvoidanceRule</strong> （<strong>默认规则</strong>，复合判断server所在区域的性能和server的可用性选择服务器。）</p><p>ZoneAvoidanceRule是PredicateBasedRule的一个实现类，只不过这里多一个过滤条件，ZoneAvoidanceRule中的过滤条件是以ZoneAvoidancePredicate为主过滤条件和以AvailabilityPredicate为次过滤条件组成的一个叫做CompositePredicate的组合过滤条件，过滤成功之后，继续采用线性轮询(<strong>RoundRobinRule</strong>)的方式从过滤结果中选择一个出来，所以RoundRobinRule也是默认规则。</p></li><li><p><strong>AvailabilityFilteringRule</strong>（先过滤掉故障实例，再选择并发较小的实例）</p><p> 过滤掉一直连接失败的被标记为circuit tripped的后端Server，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤server的逻辑，其实就是检查status里记录的各个Server的运行状态。</p></li></ol></li></ol><h3 id="修改默认负载均衡策略"><a href="#修改默认负载均衡策略" class="headerlink" title="修改默认负载均衡策略"></a>修改默认负载均衡策略</h3><p>修改默认策略有2种方式：1.配置类  2.通过配置文件使用内置的负载均衡均衡策略(也可以自定义负载均衡策略)</p><h4 id="配置类方式-不推荐"><a href="#配置类方式-不推荐" class="headerlink" title="配置类方式(不推荐)"></a><strong>配置类方式(不推荐)</strong></h4><ol><li><p>复制order-nacos模块，重命名为order-ribbon，注意不要复制stock，因为客户端的负载均衡是服务消费者，即服务调用者</p></li><li><p>新建配置类 【注意】：<strong>此处有坑。</strong>不能写在@SpringbootApplication注解的@CompentScan扫描得到的地方，否则自定义的配置类就会被所有的 RibbonClients共享。 不建议这么使用，推荐yml方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonRandomRuleConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名一定要叫iRule</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">iRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机权重）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NacosRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E5%8C%85%E5%B1%82%E7%BA%A7.png" alt></p></li><li><p>利用@RibbonClient指定微服务及其负载均衡策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClients</span>(value = &#123;</span><br><span class="line">        <span class="comment">// 这里的name放的是服务提供方</span></span><br><span class="line">        <span class="meta">@RibbonClient</span>(name = <span class="string">"stock-server"</span>,configuration = RibbonRandomRuleConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试服务测试 。测试结果：不再是默认的轮询，而是会有重复的出现</p></li></ol><h4 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a><strong>配置文件方式</strong></h4><p>调用指定微服务提供的服务时，使用对应的负载均衡算法。</p><h5 id="修改默认负载均衡策略-1"><a href="#修改默认负载均衡策略-1" class="headerlink" title="修改默认负载均衡策略"></a>修改默认负载均衡策略</h5><ol><li><p>首先把OrderApplication主程序种的RibbonClients注解去掉</p></li><li><p>修改order-ribbon中的application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务提供方。即被调用的微服务名。这里没有提示的</span></span><br><span class="line"><span class="attr">stock-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment"># 指定负载均衡的实现类(完整类路径)，这里指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机&amp;权重）</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span></span><br></pre></td></tr></table></figure></li><li><p>启动3个服务，并且到nacos的管理平台里，把其中一个stock的服务权重设置大一点（我这里把其中一个的权重设置为5，方便观察结果）</p></li><li><p>测试。</p></li></ol><h5 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h5><p>通过实现 IRule 接口或者继承AbstractLoadBalancerRule可以自定义负载策略，主要的选择服务逻辑在 choose 方法中。</p><ol><li><p>在ribbon包新建自定义的负载均衡策略，当然这里也可以建在扫描包里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ribbon.rule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        ILoadBalancer loadBalancer = <span class="keyword">this</span>.getLoadBalancer();</span><br><span class="line">        <span class="comment">// 获得当前请求的服务的实例</span></span><br><span class="line">        List&lt;Server&gt; reachableServers = loadBalancer.getReachableServers();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里只有2个实例，随机数值为0跟1</span></span><br><span class="line">        <span class="keyword">int</span> random = ThreadLocalRandom.current().nextInt(reachableServers.size());</span><br><span class="line"></span><br><span class="line">        Server server = reachableServers.get(random);</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方式是初始化配置的，这里不需要实现复杂的功能</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复制CustomRule的全限定路径到配置文件中（这里是没有提示的）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务提供方。即被调用的微服务名。这里没有提示的</span></span><br><span class="line"><span class="attr">stock-server:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment"># 指定负载均衡的实现类(完整类路径)，这里指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机&amp;权重）</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.ribbon.rule.CustomRule</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><p>Ribbon默认懒加载，意味着只有在发起调用的时候才会创建客户端。在进行服务调用的时候，如果网络情况不好，第一次调用会超时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次调用服务时，才会出现这句话</span></span><br><span class="line">DynamicServerListLoadBalancer <span class="keyword">for</span> client stock-server initialized: DynamicServerListLoadBalancer:....</span><br></pre></td></tr></table></figure><p>那么我们希望在启动的时候，就默认加载我们的负载均衡器.</p><p>开启饥饿加载，解决第一次调用慢的问题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="comment"># 开启ribbon饥饿加载</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置stock-server使用ribbon饥饿加载，多个使用逗号分隔</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">stock-server</span></span><br></pre></td></tr></table></figure><h2 id="什么是Spring-Cloud-LoadBalancer"><a href="#什么是Spring-Cloud-LoadBalancer" class="headerlink" title="什么是Spring Cloud LoadBalancer"></a>什么是Spring Cloud LoadBalancer</h2><p>Spring Cloud LoadBalancer是Spring Cloud官方自己提供的客户端负载均衡器, 用来替代Ribbon（目前还不能完全代替，毕竟Ribbon策略更多更完善，而LoadBalancer只有轮询和随机）<br>Spring官方提供了两种负载均衡的客户端：<br>RestTemplate<br>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率。默认情况下，RestTemplate默认依赖jdk的HTTP连接工具。<br>WebClient<br>WebClient是从Spring WebFlux 5.0版本开始提供的一个非阻塞的基于响应式编程的进行Http请求的客户端工具。它的响应式编程的基于Reactor的。WebClient中提供了标准Http请求方式对应的get、post、put、delete等方法，可以用来发起相应的请求。</p><h2 id="使用loadbalancer代替Ribbon"><a href="#使用loadbalancer代替Ribbon" class="headerlink" title="使用loadbalancer代替Ribbon"></a>使用loadbalancer代替Ribbon</h2><h3 id="RestTemplate整合LoadBalancer"><a href="#RestTemplate整合LoadBalancer" class="headerlink" title="RestTemplate整合LoadBalancer"></a>RestTemplate整合LoadBalancer</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供了RestTemplate支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--nacos服务注册发现，这里不需要写版本，因为父Maven的springCloudAlibaba管理器已经帮我们管理好版本了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--移除Ribbon支持--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加loadbalancer依赖，如果这个依赖有问题，则指定以下版本就有了，正常来说版本是由版本控制器来管理的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐starter‐loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;version&gt;3.0.0&lt;/version&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【注意】： nacos-discovery中引入了ribbon，需要移除ribbon的包如果不移除，也可以在yml中配置不使用ribbon</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不使用ribbon</span></span><br><span class="line"><span class="attr">loadbalancer:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>使用@LoadBalanced注解配置RestTemplate （当然Ribbon默认也是这个注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = builder.build();</span><br><span class="line">    <span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"下单成功"</span>);</span><br><span class="line">    String url = <span class="string">"http://stock-server/stock/reduce"</span>;</span><br><span class="line">    String msg = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span> + msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他的地方都可以不用修改了。测试即可。不用怀疑测试结果，因为你可以看到maven的依赖已经没有ribbon的了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba(4:使用OpenFeign服务调用)</title>
      <link href="2021/07/05/Spring%20Cloud%20Alibaba(4.%E4%BD%BF%E7%94%A8OpenFeign%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8)/"/>
      <url>2021/07/05/Spring%20Cloud%20Alibaba(4.%E4%BD%BF%E7%94%A8OpenFeign%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-4-使用OpenFeign服务调用"><a href="#Spring-Cloud-Alibaba-4-使用OpenFeign服务调用" class="headerlink" title="Spring Cloud Alibaba(4:使用OpenFeign服务调用)"></a>Spring Cloud Alibaba(4:使用OpenFeign服务调用)</h1><p>在前面我们是通过restTemplate进行服务之间的调用，我们可以发现一个弊端就是我们是通过硬编码的方式进行调用，而我们更多地习惯用面向对象的方式来进行调用，也就是说对象.方法名。</p><p><strong>JAVA 项目中如何实现接口调用？</strong></p><ol><li><p>Httpclient</p><p>HttpClient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持 Http 协议的客户端编程工具包，并且它支持 HTTP 协议最新版本和建议。HttpClient 相比传统 JDK 自带的 URLConnection，提升了易用性和灵活性，使客户端发送 HTTP 请求变得容易，提高了开发的效率。</p></li><li><p>Okhttp</p><p>一个处理网络请求的开源项目，是安卓端最火的轻量级框架，由 Square 公司贡献，用于替代 HttpUrlConnection 和 Apache HttpClient。OkHttp 拥有简洁的 API、高效的性能，并支持多种协议（HTTP/2 和 SPDY）。</p></li><li><p>HttpURLConnection</p><p>HttpURLConnection 是 Java 的标准类，它继承自 URLConnection，可用于向指定网站发送 GET 请求、POST 请求。HttpURLConnection 使用比较复杂，不像 HttpClient 那样容易使用。</p></li><li><p>RestTemplate  WebClient（webflux）</p><p>RestTemplate 是 Spring 提供的用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 HTTP 服务的方法，能够大大提高客户端的编写效率。上面介绍的是最常见的几种调用接口的方法，我们下面要介绍的方法比上面的更简单、方便，它就是 Feign。</p></li></ol><p>前三者都能调用http请求，但是如果要调用rest请求的话，就比较麻烦了。rest接口是通过Json数据来进行服务之间的通讯的。他们如果要调用rest接口，就需要把java对象转成json文本，而响应回去呢，也同样需要把json文本转成java对象，所以前三者不像restTemplate一样可以进行json的序列化与反序列化。</p><h2 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign"></a>什么是Feign</h2><p>Feign是Netflix开发的声明式、模板化的HTTP客户端。</p><p>声明式、模板化意味着我们可以像调用方法一样调用服务。Feign是声明在服务消费端的，而消费端也可以称之为客户端，当然这里的客户端时相对来说的，没有绝对的消费者跟提供者。</p><p>Feign可帮助我们更加便捷、优雅地调用HTTP API。Feign支持多种注解，例如Feign自带的注解或者JAX-RS注解等。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>Feign可以做到使用 HTTP 请求远程服务时就像调用本地方法一样的体验，开发者完全感知不到这是远程方法，更感知不到这是个 HTTP 请求。它像 Dubbo 一样，consumer 直接调用接口方法调用 provider，而不需要通过常规的 Http Client 构造请求再解析返回数据。它解决了让开发者调用远程接口就跟调用本地方法一样，无需关注与远程的交互细节，更无需关注分布式环境开发。</p><p><strong>Spring Cloud openfeign对Feign进行了增强，使其支持Spring MVC注解，另外还整合了Ribbon和Nacos，从而使得Feign的使用更加方便</strong></p><p>在spring cloud的架构中，说是使用feign，其实也就是使用openFeign，因为openFeign实现了SpringMVC的接口，并且实现了feign的所有功能，而单独用feign的话，还需要慢慢学习它的注解</p><h2 id="Spring-Cloud-Alibaba快速整合OpenFeign"><a href="#Spring-Cloud-Alibaba快速整合OpenFeign" class="headerlink" title="Spring Cloud Alibaba快速整合OpenFeign"></a>Spring Cloud Alibaba快速整合OpenFeign</h2><ol><li><p>创建一个模块，记得是调用者的模块：order-openFeign，自行修改配置</p></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写feign接口（接口名命名：服务提供者中的controller前面的单词+Service，进行一一对应）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.feign;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name 执行调用rest接口所对应的服务(即服务提供者的服务)</span></span><br><span class="line"><span class="comment">// path 指定调用rest接口所在的StockContrller执行的@RequestMapping,没有可不填</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"stock-server"</span>,path = <span class="string">"/stock"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StockFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明需要调用服务提供者的rest接口，而且这里不需要写实现类</span></span><br><span class="line">     <span class="meta">@RequestMapping</span>(<span class="string">"/reduce"</span>)</span><br><span class="line">     <span class="function">String <span class="title">reduce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestMapping</span>("/stock")</span></span><br><span class="line"><span class="comment"> * public class StockController &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Value</span>("$&#123;server.port&#125;")</span></span><br><span class="line"><span class="comment"> *     String port;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@RequestMapping</span>("/reduce")</span></span><br><span class="line"><span class="comment"> *     public String reduce()&#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println("扣减库存");</span></span><br><span class="line"><span class="comment"> *         return "扣减库存:" + port;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>去掉之前的服务调用的方式。把restTemplate全部去掉</p></li><li><p>在controller注入feign接口，并调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StockFeignService stockFeignService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"下单成功"</span>);</span><br><span class="line">    String msg = stockFeignService.reduce();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello feign"</span> + msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动类中加入注解 <code>@EnableFeignClients</code></p></li><li><p>测试</p></li></ol><h2 id="Spring-Cloud-Feign的自定义配置及使用"><a href="#Spring-Cloud-Feign的自定义配置及使用" class="headerlink" title="Spring Cloud Feign的自定义配置及使用"></a>Spring Cloud Feign的自定义配置及使用</h2><p>Feign 提供了很多的扩展机制，让用户可以更加灵活的使用。</p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a><strong>日志配置</strong></h3><p>有时候我们遇到 Bug，比如接口调用失败、参数没收到等问题，或者想看看调用性能，就需要配置 Feign 的日志了，以此让 Feign把请求信息数出来。</p><p>通过源码可以看到日志等级有 4 种，分别是：</p><ol><li><strong>NONE</strong>【性能最佳，适用于生产】：不记录任何日志（默认值）。</li><li><strong>BASIC</strong>【适用于生产环境追踪问题】：仅记录请求方法、URL、响应状态代码以及执行时间。</li><li><strong>HEADERS</strong>：记录BASIC级别的基础上，记录请求和响应的header。</li><li><strong>FULL</strong>【比较适用于开发及测试环境定位问题】：记录请求和响应的header、body和元数据</li></ol><p>日志配置有2种配置。全局配置和局部配置</p><p>首先搭建一下环境来进行后续的测试：新建一个商品的服务：product-server。然后order对库存和商品进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询商品"</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"查询商品"</span> + id + <span class="string">":"</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>它可以针对所有的服务提供者来进行配置。</p><ol><li><p>在消费者新建一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局配置： 当使用@Configuation，会将配置作用所有的服务提供方</span></span><br><span class="line"><span class="comment">// 局部配置： 如果只想针对某一个服务进行配置，就不要加@Configuation</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在feign包下声明一个product的feign接口</p><p>这里要注意一下Feign对SpringMVC的注解更严格，在springMvc中路径变量只要跟传参名一样即可，不需要显示地在@PathVariable声明value，而在Feign中是要的，否则编译不通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"product-server"</span>,path = <span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">     <span class="function">String <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StockFeignService stockFeignService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductFeignService productFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"下单成功"</span>);</span><br><span class="line">        String msg = stockFeignService.reduce();</span><br><span class="line">        String product = productFeignService.get(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello feign"</span> + msg + product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试，此时我们可以看到控制台还是没有日志信息，这是为什么呢？因为Feign的日志是Debug级别输出的，而springboot默认的日志级别为info，而info级别是大于Debug的，所以不会输出Debug的日志。</p></li><li><p>修改yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8050</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 不要在这一层设置，在这一层设置是针对所有的包，我们只需要针对feign这个包即可</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hbp.feign:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li><li><p>测试，结果：控制台输出了debug信息。</p></li></ol><h4 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h4><p>针对某一个服务提供者配置。</p><h5 id="配置类配置"><a href="#配置类配置" class="headerlink" title="配置类配置"></a>配置类配置</h5><p>比如这里只需要库存服务的debug日志信息</p><ol><li><p>首先配置类不能标注@Configuation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局配置： 当使用@Configuation，会将配置作用所有的服务提供方</span></span><br><span class="line"><span class="comment">// 局部配置： 如果只想针对某一个服务进行配置，就不要加@Configuation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>库存Feign接口的参数修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"stock-server"</span>,path = <span class="string">"/stock"</span>,configuration = FeignConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">StockFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明需要调用服务提供者的rest接口，而且这里不需要写实现类</span></span><br><span class="line">     <span class="meta">@RequestMapping</span>(<span class="string">"/reduce"</span>)</span><br><span class="line">     <span class="function">String <span class="title">reduce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试即可</p></li></ol><h5 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h5><p>这个方法就很简单了，直接在配置文件配置即可生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feign日志局部配置</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="comment"># 服务名</span></span><br><span class="line">      <span class="attr">product-server:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span></span><br></pre></td></tr></table></figure><h3 id="契约配置"><a href="#契约配置" class="headerlink" title="契约配置"></a>契约配置</h3><p>Spring Cloud 在 Feign 的基础上做了扩展，使用 Spring MVC 的注解来完成Feign的功能。原生的 Feign 是不支持 Spring MVC 注解的，如果你想在 Spring Cloud 中使用原生的注解方式来定义客户端也是可以的，通过配置契约来改变这个配置，Spring Cloud 中默认的是 SpringMvcContract</p><p>Spring Cloud 1 早期版本就是用的原生Fegin. 随着netflix的停更替换成了Open feign</p><ol><li><p>修改契约配置，支持Feign原生的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改契约配置，支持Feign原生的注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Contract.Default();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：修改契约配置后，OrderFeignService 不再支持springmvc的注解，需要使用Feign原生的注解。比如@RequestMpping对应原生注解的@RequestLine、@PathVarible对应@Parm</p></li><li><p>也可以通过yml配置契约</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span> </span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">  <span class="attr">config:</span> </span><br><span class="line">  <span class="string">mall‐order:</span> <span class="comment">#对应微服务</span></span><br><span class="line">  <span class="attr">loggerLevel:</span> <span class="string">FULL</span></span><br><span class="line">  <span class="string">contract:</span> <span class="string">feign.Contract.Default</span> <span class="comment">#指定Fei</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="超时时间配置"><a href="#超时时间配置" class="headerlink" title="超时时间配置"></a>超时时间配置</h3><p>通过 Options 可以配置连接超时时间和读取超时时间，Options 的第一个参数是连接的超时时间（ms），默认值是 2s；第二个是请求处理的超时时间（ms），默认值是 5s。</p><p>2个设置方法：</p><ol><li><p><strong>全局配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Request.<span class="function">Options <span class="title">options</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Request.Options(<span class="number">5000</span>, <span class="number">10000</span>);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还可以通过配置文件局部设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span> </span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="comment"># 对应微服务</span></span><br><span class="line">      <span class="string">product‐order:</span></span><br><span class="line">      <span class="comment"># 连接超时时间，默认2s </span></span><br><span class="line">      <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment"># 请求处理超时时间，默认5s </span></span><br><span class="line">      <span class="attr">readTimeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><p>自行测试：设置一个Threed.sleep()  控制台会打印：Read timed out</p></li></ol><h3 id="还可以自定义服务调用的拦截器"><a href="#还可以自定义服务调用的拦截器" class="headerlink" title="还可以自定义服务调用的拦截器"></a>还可以自定义服务调用的拦截器</h3><p>这里自行上网查资料，用得不多</p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba(2.注册中心管理微服务)</title>
      <link href="2021/07/04/Spring%20Cloud%20Alibaba(2.Nacao%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1)/"/>
      <url>2021/07/04/Spring%20Cloud%20Alibaba(2.Nacao%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1)/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-2-注册中心管理微服务"><a href="#Spring-Cloud-Alibaba-2-注册中心管理微服务" class="headerlink" title="Spring Cloud Alibaba(2.注册中心管理微服务)"></a>Spring Cloud Alibaba(2.注册中心管理微服务)</h1><p>上篇可以看到分布式架构有缺点：在处理多服务之间的调用关系错综复杂，难以维护。因此我们使用Nacos注册中心来完善服务间的调用关系。</p><h2 id="什么是Nacos"><a href="#什么是Nacos" class="headerlink" title="什么是Nacos"></a>什么是Nacos</h2><p>简单来说就是集 注册中心 + 配置中心 + 服务管理 的平台</p><h2 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h2><p>在微服务的体系里，注册中心是最重要的组件之一</p><blockquote><p> 什么是注册中心？</p></blockquote><p>注册中心和DNS(域名解析系统)类似，我们平时访问百度，毫无疑问我们输入的地址是 www. baidu.com ，而不是直接访问ip地址。</p><p>那么注册中心就承担了这样一个类似DNS这样的一个角色，它记录了服务和服务地址的映射关系。在微服务的架构中，服务会注册到这里，当服务需要调用其它服务时，就到这里找到服务的地址，进行调用。当然这里的消费者和生产者是相对而言的</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%AE%80%E5%8D%95%E4%BD%9C%E7%94%A8%E7%90%86%E8%A7%A3.jpg" alt></p><p>注册中心的作用就是<strong>服务的注册（Nacos Register）</strong>和<strong>服务的发现（Nocos Discovery）</strong></p><h3 id="注册中心的演变"><a href="#注册中心的演变" class="headerlink" title="注册中心的演变"></a>注册中心的演变</h3><ol><li><p>存在的问题：如果出现订单服务ip:port变更或服务迁移或集群部署，维护代码麻烦且容易出错</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8BRestTemplate.png" alt></p></li><li><p>针对上述问题，我们做出以下改进：在注册表中以key-value的方式记录服务信息，key为服务的名称，value为ip:port，当有请求时，只需根据服务名称注册表中查找value即可，这样我们只需维护注册表即可，不需维护代码。为了提高性能，我们还可以在会员服务里做一个缓存，这样就不需要每次都去查。</p><p>存在的问题：订单服务水平扩容问题、某个订单服务宕机，手动修改注册表麻烦</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B%E6%89%8B%E5%8A%A8%E7%BB%B4%E6%8A%A4%E6%B3%A8%E5%86%8C%E8%A1%A8.jpg" alt></p></li><li><p>存在的问题：成千上万的微服务，当是一个电商系统的时候，遇到大促销，对Nginx修改配置，或者扩容，当大促销结束后，又需要改回去，这对运维人员工作量大，且容易出错，</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8Bnginx.jpg" alt></p></li><li><p>存在的问题：如果订单服务宕机了，那么会员服务拿到的请求是无效的；再者每次到注册中心获取服务列表，性能不高</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%8301.jpg" alt></p></li><li><p>完善后：加入了心跳机制（通过定时接收心跳请求来监测服务运行是否正常）和缓存机制（不需要每次都获取服务列表），而且这里假如需要水平扩展，就不需要引入Nginx作负载均衡了，因为这样的话，又需要把注册中心的注册表复制一份到nginx维护这个注册表。这里会有一个客户端的负载均衡来帮助我们实现。</p><p><strong>其实这里每个服务本质上就是nacos的客户端</strong></p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%8302.jpg" alt></p></li></ol><h4 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h4><p><strong>服务注册</strong>：Nacos Client会通过发送REST请求的方式向Nacos Server注册自己的服务，提供自身的元数据，比如ip地</p><p>址、端口等信息。Nacos Server接收到注册请求后，就会把这些元数据信息存储在一个双层的内存Map中。</p><p><strong>服务发现</strong>：服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面</p><p>注册的服务清单，并且缓存在Nacos Client本地，同时会在Nacos Client本地开启一个定时任务定时拉取服务端最新的注</p><p>册表信息更新到本地缓存</p><p><strong>服务心跳</strong>：在服务注册后，Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防</p><p>止被剔除。默认5s发送一次心跳。</p><p><strong>服务同步</strong>：Nacos Server集群之间会互相同步服务实例，用来保证服务信息的一致性。 leader  raft  </p><p><strong>服务健康检查</strong>：Nacos Server会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳</p><p>的实例会将它的healthy属性置为false(客户端服务发现时不会发现)，如果某个实例超过30秒没有收到心跳，直接剔除该</p><p>实例(被剔除的实例如果恢复发送心跳则会重新注册)</p><h3 id="常见的注册中心"><a href="#常见的注册中心" class="headerlink" title="常见的注册中心"></a>常见的注册中心</h3><table><thead><tr><th align="left">特性</th><th align="left">Eureka</th><th align="left">Nacos</th><th align="left">Consul</th><th align="left">Zookeeper</th></tr></thead><tbody><tr><td align="left">CAP</td><td align="left">AP</td><td align="left">CP + AP</td><td align="left">CP</td><td align="left">CP</td></tr><tr><td align="left">健康检查</td><td align="left">Client Beat</td><td align="left">TCP/HTTP/MYSQL/Client Beat</td><td align="left">TCP/HTTP/gRPC/Cmd</td><td align="left">Keep Alive</td></tr><tr><td align="left">雪崩保护</td><td align="left">有</td><td align="left">有</td><td align="left">无</td><td align="left">无</td></tr><tr><td align="left">自动注销实例</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">访问协议</td><td align="left">HTTP</td><td align="left">HTTP/DNS</td><td align="left">HTTP/DNS</td><td align="left">TCP</td></tr><tr><td align="left">监听支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">多数据中心</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">跨注册中心同步</td><td align="left">不支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">SpringCloud集成</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr></tbody></table><p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p><table><thead><tr><th>特性</th><th>定理</th></tr></thead><tbody><tr><td>一致性(C)</td><td>也叫做数据原子性，系统在执行某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后<br>所有的用户都应该读到最新的值，这样的系统被认为是具有强一致性的。等同于所有节点访问同一份最新的<br>数据副本。</td></tr><tr><td>可用性(A)</td><td>每一个操作总是能够在一定的时间内返回结果，这里需要注意的是”一定时间内”和”返回结果”。一定时间内<br>指的是，在可以容忍的范围内返回结果，结果可以是成功或者是失败。</td></tr><tr><td>分区容错性(P)</td><td>在网络分区的情况下，被分隔的节点仍能正常对外提供服务(分布式集群，数据被分布存储在不同的服务<br>器上，无论什么情况，服务器都能正常被访问)。</td></tr></tbody></table><p>由此可见：P特性在分布式架构中，肯定是要有得，因为假如这个都没有，就违背了分布式架构的初衷了。而C特性是分布式架构，一般是有一个主从架构，这个主的节点是用来同步从节点的数据的，来保持数据的一致性，而你一旦保证了一致性，就无法保证可用性，因为可用性是一旦你超过了一半的节点不可用的话，整个集群也会不可用。</p><p><strong>总结</strong>：</p><p>现如今，对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，节点只会越来越多，所以节点故障、网络故障是常态，因此分区容错性也就成为了一个分布式系统必然要面对的问题。那么就只能在 C 和 A 之间进行取舍。但对于传统的项目就可能有所不同，拿银行的转账系统来说，涉及到金钱的对于数据一致性不能做出一丝的让步，C 必须保证，出现网络故障的话，宁可停止服务，可以在 A 和 P 之间做取舍。</p><p>总而言之，没有最好的策略，好的系统应该是根据业务场景来进行架构设计的，只有适合的才是最好的。</p><h2 id="Nacos-Server部署"><a href="#Nacos-Server部署" class="headerlink" title="Nacos Server部署"></a>Nacos Server部署</h2><p>要使用Nacos，就必须单独启动Nacos服务，启动服务后，才能将我们的微服务注册到注册中心去</p><p>官方文档：<a href="https://nacos.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/deployment.html</a></p><ol><li><p>下载安装包 ： <a href="https://github.com/alibaba/Nacos/release" target="_blank" rel="noopener">https://github.com/alibaba/Nacos/release</a> 然后通过工具把安装包上传到linux服务器</p><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir nacos</span><br><span class="line">$ wget https://github.com/alibaba/nacos/releases/download/1.4.1/nacos‐server‐1.4.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入nacos目录，解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar ‐zxvf nacos‐server‐1.4.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>单机启动nacos，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/startup.sh ‐m standalone</span><br></pre></td></tr></table></figure><p>也可以修改默认启动方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim startup.sh</span><br><span class="line"><span class="comment"># 把MODE=“cluster” 修改为 "standalone"</span></span><br></pre></td></tr></table></figure></li><li><p>访问nocas的管理端：127.0.0.1:8848/nacos ，默认用户名密码都为 nacos</p></li></ol><p><strong>Nacos支持三种部署模式</strong></p><ul><li>单机模式 - 用于测试和单机试用。默认没有配数据源，是存在内存的，也可以进行持久化到mysql数据源（在application.properties）单机模式下用内存模式就可以了，集群就用mysql数据源</li><li><a href="https://nacos.io/zh­cn/docs/cluster­mode­quick­start.html" target="_blank" rel="noopener">集群模式</a> - 用于生产环境，确保高可用。</li><li>多集群模式 - 用于多数据中心场景。</li></ul><p><a href="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/2%E3%80%81Alibaba%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.pdf" target="_blank" rel="noopener">单机搭建伪集群</a></p><p>接下来便是进入到微服务中，添加我们的服务注册与发现依赖</p><h2 id="搭建Nacos-client服务"><a href="#搭建Nacos-client服务" class="headerlink" title="搭建Nacos-client服务"></a><strong>搭建Nacos-client服务</strong></h2><ol><li><p>复制order和stock为副本命名为order-nacos和stock-nacos，并删除order和stock</p></li><li><p>各自修改pom中的artifactId</p></li><li><p>父Maven中的pom添加这两个模块</p></li><li><p>项目结构如下：</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/nacos%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.jpg" alt></p></li><li><p>引入依赖</p></li></ol><p>order-nacos和stock-nacos的pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos服务注册发现，这里不需要写版本，因为父Maven的springCloudAlibaba管理器已经帮我们管理好版本了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>application.yaml中配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p>更多配置：<code>https://github.com/alibaba/spring­cloud­alibaba/wiki/Nacos­discovery</code></p><ol start="3"><li><p>在模块启动类中添加注解<code>@EnableDiscoveryClient</code>开启服务注册发现功能（看版本需要添加）这个不需要添加</p></li><li><p>启动nacos server</p></li><li><p>启动springboot应用，nacos管理端界面查看是否成功注册（这里可以把其中一个服务关闭，来体验nacos心跳机制）</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/nacos%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0.jpg" alt></p></li><li><p>测试</p><ol><li><p>使用RestTemplate进行服务调用，不需要硬编码ip:port，可以使用微服务名称 （spring.application.name）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"http://stock-server/stock/reduce"</span>;</span><br><span class="line">String msg = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>需要添加@LoadBalanced注解（看注册中心的演变过程，nacos客户端调用需要依赖负载均衡器来进行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = builder.build();</span><br><span class="line">    <span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试成功 hello world扣减库存</p></li></ol></li><li><p>模拟Nacos默认的轮询负载均衡机制（Ribbon）</p><p>也就是说订单服务调用库存服务时，会轮着来调用不用的库存服务</p><p>那么Idea如何运行不同端口的库存服务呢？操作如下：</p><ol><li><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%90%8C%E4%B8%80%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE.png" alt></p></li><li><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%90%8C%E4%B8%80%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE02.jpg" alt></p></li><li><p>为了更加直观的显示，修改库存服务中的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/stock"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/reduce"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扣减库存"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"扣减库存:"</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启3个服务，输入 localhost:8010/order/add 后，观察效果：库存服务的端口不断的变化</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba（1:基本开发框架搭建）</title>
      <link href="2021/07/04/Spring%20Could%20Alibaba(1.%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA)/"/>
      <url>2021/07/04/Spring%20Could%20Alibaba(1.%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA)/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba（1-基本开发框架搭建）"><a href="#Spring-Cloud-Alibaba（1-基本开发框架搭建）" class="headerlink" title="Spring Cloud Alibaba（1:基本开发框架搭建）"></a>Spring Cloud Alibaba（1:基本开发框架搭建）</h1><p>SpringCloud Alibaba对运行环境有一定的版本要求：</p><ol><li>64 bit JDK 1.8+</li><li>Maven 3.2.x+</li></ol><h2 id="搭建分布式架构"><a href="#搭建分布式架构" class="headerlink" title="搭建分布式架构"></a>搭建分布式架构</h2><p>先来体验一下分布式架构下，服务与服务之间的通讯是如何实现的，然后再慢慢过渡到SpringCloud</p><h3 id="创建多Module工程"><a href="#创建多Module工程" class="headerlink" title="创建多Module工程"></a>创建多Module工程</h3><h4 id="基于SpringBoot的父maven项目"><a href="#基于SpringBoot的父maven项目" class="headerlink" title="基于SpringBoot的父maven项目"></a>基于SpringBoot的父maven项目</h4><ol><li><p>通过idea自带的Spring Initializr进行创建父项目，Type选择’Maven POM’，然后一直next即可</p><ul><li>当然你也可以选择maven去创建，这两种创建方式都需要你自己手动去修改一些配置，Spring Initializr会自动帮我们继承父依赖，与自动帮我们引入一些常用的场景启动器，所以会方便一些</li><li>父Maven项目一般是用来聚合子Maven项目，即管理子项目，或者说子项目一般是继承父Maven项目的依赖和配置的，所以父Maven项目不会作为一个具体项目去使用，也就是说我们不会把它打成一个jar包，Type选择POM，这样在创建父Maven项目后，不会为我们创建src、resources，只有pom.xml，但因为packing只有jar和war，所以这个地方在创建项目后需自行修改</li></ul></li><li><p>修改pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot版本仲裁管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hbp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置为pom，管理依赖，这样执行mvn package时，就不会打包成jar包了，只会打包子Maven项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Alibaba<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="创建子Module"><a href="#创建子Module" class="headerlink" title="创建子Module"></a>创建子Module</h4><ol><li><p>右键项目，创建module，然后选择Maven创建</p><ul><li><p>这里不要选择spring Initializr，因为这样的话，又会在新建模块的pom.xml创建很多与父Maven相同的配置。子Maven项目时可以去继承父Maven项目的，所以我们不需要去同样创建相同配置</p></li><li><p>这时候会自动帮我们继承父Maven项目</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E5%88%9B%E5%BB%BAmodule.png" alt="创建module"></p></li><li><p>按照上述步骤创建2个子Maven模块，分别为order（订单服务）、stock（库存服务）</p></li></ul></li></ol><p>这样一个简单的开发框架就搭建起来了。</p><h3 id="创建rest接口，简单地实现服务的调用"><a href="#创建rest接口，简单地实现服务的调用" class="headerlink" title="创建rest接口，简单地实现服务的调用"></a>创建rest接口，简单地实现服务的调用</h3><p>让订单接口调用库存接口</p><ol><li><p>要写rest接口，就需要在order和stock依赖springMvc，在各自的pom中引入web启动器即可</p></li><li><p>各自服务创建controller、application.yml和启动器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"下单成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/stock"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/reduce"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扣减库存"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"扣减库存"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置RestTemplate来实现服务的调用</p><ul><li>springboot之前我们一般是用httpclient，现在我们可以用RestTemplate</li></ul><p>在order服务下新建config来配置RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = builder.build();</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>在order中的controller注入restTemplate，并调用stock服务中的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"下单成功"</span>);</span><br><span class="line">        String msg = restTemplate.getForObject(<span class="string">"http://localhost:8011/stock/reduct"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span> + msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件yml   order端口8010     stock端口8011</p></li></ol></li></ol><h3 id="启动服务，测试接口"><a href="#启动服务，测试接口" class="headerlink" title="启动服务，测试接口"></a>启动服务，测试接口</h3><h4 id="run-dashboard"><a href="#run-dashboard" class="headerlink" title="run dashboard"></a>run dashboard</h4><p>在开发多服务的架构时，建议打开<code>run dashboard</code>，这样我们启动多个服务的话，就不用一个个找main方法了，非常麻烦。</p><p>它所在的位置一般时idea底部(旧版本可能默认没有此选项)</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/run%20Dashboard%E9%9D%A2%E6%9D%BF.png" alt="run Dashboard面板"></p><p>如果底部没有，则需要我们自行配置：</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/run-dashboard%E9%85%8D%E7%BD%AE.jpg" alt="run dashboard配置"></p><p>设置完之后，点击run dashboard是没有东西的，我们得先一个个启动一次服务后才会出现</p><p>启动后，有个小技巧，我们可以在该main方法后加入此服务的端口号</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/main%E6%96%B9%E6%B3%95%E5%90%8E%E5%8A%A0%E7%AB%AF%E5%8F%A3%E5%8F%B7.png" alt="main方法后加端口号"></p><h4 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8010</span>/order/add</span><br></pre></td></tr></table></figure><p>显示结果：hello world扣减库存</p><p>上面便是分布式架构服务与服务之间的通讯，那么这里面会出现一个问题：假如我的库存服务进行了负载均衡水平扩展或者服务器迁移或者下架，那么这些ip端口都需要在订单服务里面进行维护，并且非常麻烦，这个时候我们可以采用注册中心来解决上述问题，注册中心只需要将我们服务名注册进行就可以了。</p><p>下面便进行结构改进。</p><h2 id="SpringCloudAlibaba微服务架构搭建"><a href="#SpringCloudAlibaba微服务架构搭建" class="headerlink" title="SpringCloudAlibaba微服务架构搭建"></a>SpringCloudAlibaba微服务架构搭建</h2><p>在引入springcloudAlibaba的时候，我们必须要注意版本适配的问题，因为如果某一个组件跟框架版本不适配，很可能会出现问题。</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">版本依赖关系查看</a></p><p>下面我的项目使用的版本：</p><p>Spring Cloud Alibaba:2.2.5.RELEASE </p><p>Spring Boot :2.3.2.RELEASE </p><p>Spring Cloud:Hoxton.SR8 （这个版本也称为H版，这个版本命令是根据伦敦地铁站命名的，当然如果没有用到SpringCloud里面的组件的话，这个可以不引）</p><p>父Maven项目pom.xml修改如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>stock<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--以后公司开发中就可以用parent去继承公司自定义的父Maven项目--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;parent&gt;&lt;/parent&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hbp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Alibaba<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        dependencyManagement只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；</span></span><br><span class="line"><span class="comment">        只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba的版本管理器，通过dependency来实现继承--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--springboot版本仲裁管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring cloud版本仲裁管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这样项目相当于继承了三个版本管理，因为parent标签只能存在一个，所以使用dependencyManagement来完成继承关系</li><li><strong>dependencies</strong> 和 <strong>dependencyManagement</strong> 区别<ol><li><strong>dependencies</strong>即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）</li><li><strong>dependencyManagement</strong>里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li></ol></li></ul><p>到此springcloud Alibaba环境就已经搭建完成了，这样我们就可以在子Maven项目添加我们的微服务组件了。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba(5.服务熔断sentinel)</title>
      <link href="2021/07/04/Spring%20Cloud%20Alibaba(6.sentinel)/"/>
      <url>2021/07/04/Spring%20Cloud%20Alibaba(6.sentinel)/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-5-服务熔断sentinel"><a href="#Spring-Cloud-Alibaba-5-服务熔断sentinel" class="headerlink" title="Spring Cloud Alibaba(5.服务熔断sentinel)"></a>Spring Cloud Alibaba(5.服务熔断sentinel)</h1><h2 id="分布式遇到的问题"><a href="#分布式遇到的问题" class="headerlink" title="分布式遇到的问题"></a>分布式遇到的问题</h2><p>服务的可用性，造成一个服务挂掉有很多的原因：</p><ul><li>硬件的原因：内存不够，磁盘空间不足等</li><li>软件层面上：运行时的OOM异常，或者说第三方的服务、DB 挂掉或迟迟没有响应，从而导致所有请求系统的线程堆积，造成线程池爆满</li></ul><p>原因总结来说就是：</p><ol><li>激增流量</li><li>被其他服务拖垮</li><li>异常没处理（出现异常，造成代码中断，本该正常释放的资源没释放到，比如内存释放，清空对象等）</li></ol><p>说白了就是系统缺乏高可用防护/容错机制，尤其是针对流量的防护</p><h2 id="服务的可用性场景"><a href="#服务的可用性场景" class="headerlink" title="服务的可用性场景"></a>服务的可用性场景</h2><p>在一个高度服务化的系统中,我们实现的一个业务逻辑通常会依赖多个服务，并且常常也会调用同一个服务。</p><p>假如说秒杀商品服务链路下，积分服务因为并发大、流量激增等而导致挂掉了。当请求过来，在商品请求积分的时候，所有的请求都会挤压在商品到积分的链路上，得不到响应，在服务提供者不可用的时候，会出现大量重试的情况：用户重试、代码逻辑重试，这些重试最终导致：进一步加大请求流量。所以归根结底导致雪崩效应的最根本原因是：大量请求线程同步等待造成的资源耗尽。当服务调用者使用同步调用时, 会产生大量的等待线程占用系统资源。一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 于是服务雪崩效应产生了。，从而加剧流量的增加，请求停留在商品服务中，商品服务也挂掉了，以此类推。而商品服务作为一个共享的服务，从而导致其他服务链路不可用。这就是服务雪崩。</p><p><strong>服务雪崩效应</strong>：因服务提供者的不可用导致服务调用者的不可用,并将不可用逐渐放大的过程，就叫服务雪崩效应。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>常见的容错机制：</p><ul><li><p><strong>超时机制</strong></p><p>在不做任何处理的情况下，服务提供者不可用会导致消费者请求线程强制等待，而造成系统资源耗尽。加入超时机制，一旦超时，就释放资源。由于释放资源速度较快，一定程度上可以抑制资源耗尽的问题。这种机制是很基本，也挺常用的防护机制。比如设置服务与服务之间的连接超时时间。如果在规定时间内没有得到响应的话，给用户返回请求超时等，当然如果在这个规定时间内，并发量还是很大的话，还是会挤爆线程池。</p></li><li><p><strong>服务限流(针对流量进行限制)</strong></p><p>当某个服务访问量达到了它所能承受的临界值后，肯定要为它设置限流：比如说，会提前为这个服务进行一个压测，得到一个QPS(每秒访问量)的临界值为500，然后为它进行限流，一旦QPS为800的时候，有300会进行限流，只有500才能访问服务，针对300的请求我们可以进行降级，比如返回请求服务过多，或者直接拒绝等。</p></li><li><p><strong>隔离(根据线程或信号)</strong></p><p>原理：用户的请求将不再直接访问服务，而是通过线程池中的空闲线程来访问服务，如果线程池已满，则会进行降级处理，用户的请求不会被阻塞，至少可以看到一个执行结果（例如返回友好的提示信息），而不是无休止的等待或者看到系统崩溃。</p></li><li><p><strong>服务熔断</strong></p><p>远程服务不稳定或网络抖动时暂时关闭，就叫服务熔断。</p><p>现实世界的断路器大家肯定都很了解，断路器实时监控电路的情况，如果发现电路电流异常，就会跳闸，从而防止电路被烧毁。</p><p>软件世界的断路器可以这样理解：实时监测应用，如果发现在一定时间内失败次数/失败率达到一定阈值，就“跳闸”，断路器打开——此时，请求直接返回，而不去调用原本调用的逻辑。跳闸一段时间后（例如10秒），断路器会进入半开状态，这是一个瞬间态，此时允许一次请求调用该调的逻辑，如果成功，则断路器关闭，应用正常调用；如果调用依然不成功，断路器继续回到打开状态，过段时间再进入半开状态尝试——通过”跳闸“，应用可以保护自己，而且避免浪费资源；而通过半开的设计，可实现应用的“自我修复“。所以，同样的道理，当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源。比如我们设置了超时时间为1s,如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个依赖了，这个时候就应该使用断路器避免资源浪费。</p></li><li><p><strong>服务降级</strong></p><p>有服务熔断，必然要有服务降级。</p><p>通过来说，服务还会区分强依赖(订单服务就是强依赖，它一挂掉，秒杀商品就不能用了)还是弱依赖(比如积分服务，它挂掉之后，它不影响秒杀商品的下单，此时就应该给它一个降级，比如说给它记录一个日志，哪个商品哪个订单，后续再根据调度对它进行补偿，把积分恢复起来)，在弱依赖上实现降级</p><p>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据) 。这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景。</p></li></ul><h2 id="Sentinel是什么"><a href="#Sentinel是什么" class="headerlink" title="Sentinel是什么"></a>Sentinel是什么</h2><p>Sentinel是阿里巴巴开源的，面向分布式服务架构的高可用防护组件</p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。</p><p>官方文档：<a href="https://github.com/alibaba/Sentinel/wiki" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki</a></p><p><strong>Sentinel和Hystrix对比</strong></p><h2 id="Sentinel代码使用"><a href="#Sentinel代码使用" class="headerlink" title="Sentinel代码使用"></a>Sentinel代码使用</h2><p>Sentinel 可以简单的分为 Sentinel 核心库(需要在代码中进行依赖的)和 Dashboard(Sentinel的控制台，界面化操作)。核心库不依赖 Dashboard，但是结合 Dashboard 可以取得最好的效果（也就是说核心库的东西可以通过java代码来实现）。</p><p>定义的Sentinel进行资源保护的几个步骤（我们说的资源，可以是任何东西，服务，服务里的方法，甚至是一段代码）：</p><ol><li><p>定义资源</p></li><li><p>定义规则</p></li><li><p>检验规则是否生效</p></li></ol><p>先把可能需要保护的资源定义好（埋点），之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。</p><p>下面先使用 Java 代码来实现流控的操作(有利于对源码的理解)：</p><ol><li><p>创建一个sentinel_demo模块，这里pom文件中的parent没有继承springcloud父项目(因为单纯的使用sentinel核心库的时候，不需要一定得在spring cloud alibaba上使用的，它可以在分布式架构中使用，并不一定说是微服务，即我们可以单纯地使用这个核心库)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--针对rest接口进行设置的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sentinel核心库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--如果要使用@SentinelResource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个接口，用来定义资源(通常资源名与接口名一致)，然后为资源进行规则的设置(这里是流控规则)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESOURCE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.定义资源</span></span><br><span class="line"><span class="comment">     * 进行sentinel流控</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Entry entry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.sentinel针对资源进行限制的(通常资源的名称会跟接口的名称一致)</span></span><br><span class="line">            entry = SphU.entry(RESOURCE_NAME);</span><br><span class="line">            String str = <span class="string">"hello Sentinel"</span>;</span><br><span class="line">            log.info(<span class="string">"====="</span> + str + <span class="string">"====="</span>);</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">            <span class="comment">// 资源访问阻止，被限流或被降级</span></span><br><span class="line">            <span class="comment">// 进行相应的处理操作</span></span><br><span class="line">            log.info(<span class="string">"block!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"被流控了!!"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">// 若需要配置降级规则，需要通过这种方式记录业务异常</span></span><br><span class="line">            Tracer.traceEntry(ex,entry);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                entry.exit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.为资源进行定义规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostConstruct</span>： Spring的初始化注解。</span></span><br><span class="line"><span class="comment">     * 当前HelloController这个Bean创建的时候，它会自动调用被<span class="doctag">@PostConstruct</span>标注的初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 流控规则集合</span></span><br><span class="line">        ArrayList&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 一个流控规则</span></span><br><span class="line">        FlowRule rule = <span class="keyword">new</span> FlowRule();</span><br><span class="line">        <span class="comment">// 设置受保护的资源(为哪个资源进行流控)</span></span><br><span class="line">        rule.setResource(RESOURCE_NAME);</span><br><span class="line">        <span class="comment">// 设置流控规则 QPS(每秒的访问数)</span></span><br><span class="line">        rule.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">        <span class="comment">// 设置受保护的资源阈值</span></span><br><span class="line">        <span class="comment">// 结合上行的QPS，这里的意思就是：每秒只能访问1次，如果超过1次，就会对其进行流控(出发BlockException异常)</span></span><br><span class="line">        rule.setCount(<span class="number">1</span>);</span><br><span class="line">        rules.add(rule);</span><br><span class="line">        <span class="comment">// 加载配置好的规则</span></span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试。测试结果：每秒访问接口1次是可以正常访问的，而如果每秒多次访问，则会显示”被流控了!!”。</p></li></ol><p>缺点：</p><ol><li>业务侵入性很强，需要在controller中写入非业务代码，定义资源和处理被控流的处理代码都得耦合到这个接口当中。</li><li>配置不灵活 若需要添加新的受保护资源 需要手动添加 init方法来添加流控规则 </li></ol><p>因此，可以通过@SentinelResource可以改善上面的方式</p><h3 id="注解-SentinelResource"><a href="#注解-SentinelResource" class="headerlink" title="注解@SentinelResource"></a>注解@SentinelResource</h3><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果要使用@SentinelResource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SentinelApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SentinelResourceAspect <span class="title">sentinelResourceAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelResourceAspect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_RESOURCE_NAME = <span class="string">"user"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SentinelResource</span>：改善接口中资源定义和被流控降级后的处理方法(也就是hello接口中的try和第一个catch)</span></span><br><span class="line"><span class="comment"> * 【使用】：</span></span><br><span class="line"><span class="comment"> * value：定义资源</span></span><br><span class="line"><span class="comment"> * blockHandler：设置流控降级后的处理方法(默认该方法必须声明在同一个类中)</span></span><br><span class="line"><span class="comment"> *      如果不想在同一个类中，则可以使用 blockHandlerClass，并且该方法一定得使用static</span></span><br><span class="line"><span class="comment"> * fallback：当接口出现了异常，就可以交给fallback指定得方法进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(value = USER_RESOURCE_NAME, blockHandler = <span class="string">"blockHandlerForGetUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"hbp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>降级后(不符合规则)的处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【注意】：</span></span><br><span class="line"><span class="comment"> * 1.一定要public</span></span><br><span class="line"><span class="comment"> * 2.返回值一定要和定义资源的方法的返回值保持一致，并要包含源方法参数，顺序也要一样(即被<span class="doctag">@SentinelResource</span>，设置了blockHandler对应的方法，称为源方法)</span></span><br><span class="line"><span class="comment"> *     因为A服务调用B服务的时候，一旦被流控，不可能直接返回一个异常给用户，假如B服务是一个无关紧要的服务(弱依赖)，完全可以返回一个正常的结果；如果是强依赖，则返回“当前请求过多=”</span></span><br><span class="line"><span class="comment"> * 3.可以在参数后添加 BlockException 可以区分是什么规则的处理方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">blockHandlerForGetUser</span><span class="params">(String id,BlockException ex)</span> </span>&#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"流控了！！！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为资源定义降级规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2.为资源进行定义规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PostConstruct</span>： Spring的初始化注解。</span></span><br><span class="line"><span class="comment"> * 当前HelloController这个Bean创建的时候，它会自动调用被<span class="doctag">@PostConstruct</span>标注的初始化操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 流控规则集合</span></span><br><span class="line">    ArrayList&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 一个流控规则</span></span><br><span class="line">    FlowRule rule = <span class="keyword">new</span> FlowRule();</span><br><span class="line">    <span class="comment">// 设置受保护的资源(为哪个资源进行流控)</span></span><br><span class="line">    rule.setResource(RESOURCE_NAME);</span><br><span class="line">    <span class="comment">// 设置流控规则 QPS(每秒的访问数)</span></span><br><span class="line">    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">    <span class="comment">// 设置受保护的资源阈值</span></span><br><span class="line">    <span class="comment">// 结合上行的QPS，这里的意思就是：每秒只能访问1次，如果超过1次，就会对其进行流控(出发BlockException异常)</span></span><br><span class="line">    rule.setCount(<span class="number">1</span>);</span><br><span class="line">    rules.add(rule);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过@SentinelResource来定义资源并配置降级和流控的处理方法</span></span><br><span class="line">    FlowRule rule2 = <span class="keyword">new</span> FlowRule();</span><br><span class="line">    rule2.setRefResource(USER_RESOURCE_NAME);</span><br><span class="line">    rule2.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">    rule2.setCount(<span class="number">1</span>);</span><br><span class="line">    rules.add(rule2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载配置好的规则</span></span><br><span class="line">    FlowRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试。</p></li><li><p>异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(value = USER_RESOURCE_NAME,</span><br><span class="line">        fallback = <span class="string">"fallbackhandleForGetUser"</span>,</span><br><span class="line">        blockHandler = <span class="string">"blockHandlerForGetUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"hbp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">fallbackhandleForGetUser</span><span class="params">(String id,Throwable e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"有异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若 blockHandler 和 fallback 都进行了配置，流控降级的优先级要更高。</strong></p></li><li><p>具体@SentinelResouce 用法，看<a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">官方文档</a></p></li></ol><h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><ol><li><p>定义资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/degrade"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(value = DEGRADE_RESOURCE_NAME,entryType = EntryType.IN,blockHandler = <span class="string">"blockHandlerForFb"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">degrade</span><span class="params">(String id)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为资源设置降级处理操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">blockHandlerForFb</span><span class="params">(String id,BlockException ex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"hbbbbp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置熔断降级规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 降级规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDegradeRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList&lt;DegradeRule&gt; degradeRules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    DegradeRule degradeRule = <span class="keyword">new</span> DegradeRule();</span><br><span class="line">    degradeRule.setResource(DEGRADE_RESOURCE_NAME);</span><br><span class="line">    <span class="comment">// 设置降级规则：异常数</span></span><br><span class="line">    degradeRule.setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT);</span><br><span class="line">    <span class="comment">// 触发熔断异常数:2</span></span><br><span class="line">    degradeRule.setCount(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发熔断最小请求数:3</span></span><br><span class="line">    degradeRule.setMinRequestAmount(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计时长，单位ms 。这里如果时间太短不好测试</span></span><br><span class="line">    degradeRule.setStatIntervalMs(<span class="number">60</span>*<span class="number">1000</span>*<span class="number">60</span>);</span><br><span class="line">    <span class="comment">// 上面4行代码意思：1分钟内，请求3次，如果出现了2次异常就会触发熔断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断持续时长，单位是秒，根据上述规则，一旦触发了熔断，就会有一个熔断期，</span></span><br><span class="line"><span class="comment">     * 在这熔断期内，如果还有请求，就会调用我们的降级处理方法，而不是调用我们接口的代码，</span></span><br><span class="line"><span class="comment">     * 如果熔断期完了之后，它会恢复接口请求调用，但是如果在恢复后的第一次请求异常，</span></span><br><span class="line"><span class="comment">     * 就会直接再次熔断，而不会设置的规则进行判定了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    degradeRule.setTimeWindow(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    degradeRules.add(degradeRule);</span><br><span class="line">    <span class="comment">// 加载熔断规则</span></span><br><span class="line">    DegradeRuleManager.loadRules(degradeRules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自行测试</p></li></ol><p>流控规则一般设置在服务提供方，而降级规则一般设置在调用方</p><p>其他降级规则代码如上的套路。</p><h2 id="启动-Sentinel-控制台"><a href="#启动-Sentinel-控制台" class="headerlink" title="启动 Sentinel 控制台"></a><strong>启动</strong> <strong>Sentinel</strong> 控制台</h2><p>下载控制台 jar 包并在本地启动：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动控制台命名</span></span><br><span class="line">java -jar sentinel-dashboard-1.8.0.jar</span><br></pre></td></tr></table></figure><p>访问：localhost:8080  默认账号密码都是 sentinel</p><blockquote><p>用户可以通过如下参数进行配置：</p><p>-Dsentinel.dashboard.auth.username=sentinel -Dsentinel.dashboard.auth.password 用于指定控制台的登录用户名和密码</p><p>-Dserver.port=8858 启动端口号</p></blockquote><p>更多配置参考：</p><p><strong>为了方便快捷启动可以在桌面创建.bat批处理文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java ‐Dserver.port=8858 ‐Dsentinel.dashboard.auth.username=hbp ‐Dsentinel.dashboard.auth.password=123456 ‐jar D:\server\sentinel‐dashboard‐1.8.0.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>保存，双击运行即可快速启动Sentinel服务了(如果运行时，cmd出现乱码，请把命令删除，重新手动输入)</p><h2 id="Spring-Cloud-Alibaba整合Sentinel"><a href="#Spring-Cloud-Alibaba整合Sentinel" class="headerlink" title="Spring Cloud Alibaba整合Sentinel"></a>Spring Cloud Alibaba整合Sentinel</h2><p>自行创建模块测试</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加yml配置，为微服务设置sentinel控制台地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8061</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-sentinel</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8858</span></span><br></pre></td></tr></table></figure></li><li><p>添加测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/flow"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(value = <span class="string">"flow"</span>,blockHandler = <span class="string">"flowBlockHandler"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">flow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"正常访问"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">flowBlockHandler</span><span class="params">(BlockException e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"流控flow了"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在sentinel控制台中设置流控规则</p><p>流量控制(flow control)，其原理是监控应用流量的QPS (每秒访问量)或 并发线程数 等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性</p><p>应用场景：</p><ul><li>应对洪峰流量：秒杀，大促，下单，订单回流处理</li><li>消息型场景：削峰填谷，冷热启动</li><li>付费系统：根据使用流量付费</li><li>API Gateway：精准控制API流量</li><li>任何应用：探测应用中运行的满程序块，进行限制</li></ul><p>最普适的场景：</p><ol><li>Provider端（提供端是被访问的，所以是在提供端进行流控）控制脉冲流量（忽然的高峰流量）</li><li>针对不同调用来源进行流控(H5端，App端=)</li><li>Web接口流控</li></ol><p>如何配置流控规则：</p><ol><li>梳理核心接口</li><li>通过事前压测评估核心接口的容量</li><li>配置QPS</li></ol></li></ol><h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><p><strong>这里是对@SentinelResource中的value资源进行流控，即是使用自定义的</strong>，设置单机阈值为2</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99%E8%AE%BE%E7%BD%AE.jpg" alt></p><ol><li>测试结果。</li></ol><p>【<strong>注意</strong>】：每次重启服务，就要重新在控制台里设置规则。下面会讲如何持久化</p><h3 id="并发线程数"><a href="#并发线程数" class="headerlink" title="并发线程数"></a><strong>并发线程数</strong></h3><p>并发数控制用于保护业务线程池不被慢调用耗尽。Sentinel 并发控制不负责创建和管理线程池，而是简单统计当前请求上下文的线程数目（正在执行的调用数目），如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。并发数控制通常在调用端进行配置。</p><p>QPS和并发线程数区别：</p><p>QPS是每次只允许一个请求访问。</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/qps.png" alt></p><p>线程是当一个请求进来，服务器还在处理中，还没有响应给客户端，则其他线程必须等待。</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E7%BA%BF%E7%A8%8B.png" alt></p><h3 id="BlockException异常统一处理"><a href="#BlockException异常统一处理" class="headerlink" title="BlockException异常统一处理"></a>BlockException异常统一处理</h3><p>如果接口声明了@SentinelResource的话，就不用走全局异常的方法</p><ol><li><p>处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.exception;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockExceptionHandler</span> <span class="keyword">implements</span> <span class="title">BlockExceptionHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// getRule() 资源 规则的详细信息</span></span><br><span class="line">        log.info(e.getRule());</span><br><span class="line">        </span><br><span class="line">        Result r = <span class="keyword">new</span> Result();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">            r = Result.error(<span class="number">100</span>, <span class="string">"接口限流了"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">            r = Result.error(<span class="number">101</span>, <span class="string">"服务降级了"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException) &#123;</span><br><span class="line">            r = Result.error(<span class="number">102</span>, <span class="string">"热点参数限流了"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SystemBlockException) &#123;</span><br><span class="line">            r = Result.error(<span class="number">103</span>, <span class="string">"触发系统保护规则了"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">            r = Result.error(<span class="number">104</span>, <span class="string">"授权规则不通过"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回json数据</span></span><br><span class="line">        response.setStatus(<span class="number">500</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        <span class="keyword">new</span> ObjectMapper().writeValue(response.getWriter(), r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把controller要测试接口中的@SentinelResource去掉，并且在dashboard控制台对’order/flow’配置流控。</p></li><li><p>测试是否使用了全局异常处理</p></li></ol><h3 id="流控的高级模式-提供端"><a href="#流控的高级模式-提供端" class="headerlink" title="流控的高级模式(提供端)"></a>流控的高级模式(提供端)</h3><p><strong>直接(默认)</strong></p><p>资源调用达到设置的阈值后直接被流控抛出异常</p><p><strong>关联</strong></p><p>当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联。比如要下单，要进行商品进行秒杀的时候，需要保证插入数据库的操作，而此时如果查询量也同样大的时候，这时候对数据库造成读操作和写操作的资源争抢，读的速度过高会影响写得速度，从而影响系统的吞吐量，写的速度过高会影响读的速度。如果放任读写操作争抢资源，这样当写库操作过于频繁时，读数据的请求会被限流。因此我们可以通过对插入限制流控，进而影响查询。当插入频繁的时候，读数据的请求会被限流。即由生成订单来触发查询项目的流线。</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E5%85%B3%E8%81%94.jpg" alt></p><p><strong>链路</strong></p><p>根据调用链路入口限流。</p><p>sentinel同样支持对方法进行流控</p><p> 下面中记录了资源之间的调用链路，这些资源通过调用关系，相互之间构成一棵调用树。这棵树的根节点是一个名字为getUser 的虚拟节点，调用链的入口都是这个虚节点的子节点。</p><p>一棵典型的调用树如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/order/test1  /order/test2</span><br><span class="line">    \             /     </span><br><span class="line">     \           /     </span><br><span class="line">      \         /</span><br><span class="line">        getUser</span><br></pre></td></tr></table></figure><p>上图中来自入口 /order/test1 和 /order/test2的请求都调用到了方法(资源) getUser（即在/order/test1 &amp; /order/test2的业务方法中都调用了getUser这个方法(需要标注@SentinelResource注解)）</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E9%93%BE%E8%B7%AF.jpg" alt></p><p>测试，发现链路规则不生效。</p><p>这时候需要在配置文件中配置下列参数即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.cloud.sentinel.web‐context‐unify:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h3><h4 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h4><p>（RuleConstant.CONTROL_BEHAVIOR_DEFAULT）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出FlowException。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p><h4 id="Warm-Up（激增流量）"><a href="#Warm-Up（激增流量）" class="headerlink" title="Warm Up（激增流量）"></a>Warm Up（激增流量）</h4><p>Warm Up（RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。比如以电商举例，平时有无人问津的商品，一搞大促，流量激增，正常来说应该先去找Cache，但这时Cache不存在或已过时，这时候大量的请求就会瞬间达到DB层。压垮系统。而Warm up则是会慢慢地访问，那么在此期间，缓存就上来了，到后面查询就很快了。</p><p>冷加载因子: codeFactor 默认是3，即请求 QPS 从 threshold / 3 开始，经预热时长逐渐升至设定的 QPS 阈值。</p><h4 id="排队等待（脉冲流量）"><a href="#排队等待（脉冲流量）" class="headerlink" title="排队等待（脉冲流量）"></a><strong>排队等待（脉冲流量）</strong></h4><p>匀速排队（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法</p><p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><p>注意：匀速排队模式暂时不支持 QPS &gt; 1000 的场景</p><p>以上可以用 jemeter 进行压测</p><h3 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a><strong>降级规则</strong></h3><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端<strong>（调用端）</strong>进行配置。</p><h4 id="熔断降级与隔离-通常在消费端组合配置"><a href="#熔断降级与隔离-通常在消费端组合配置" class="headerlink" title="熔断降级与隔离(通常在消费端组合配置)"></a>熔断降级与隔离(通常在消费端组合配置)</h4><ul><li>并发控制(信号量隔离)</li><li>基于慢调用比例熔断</li><li>基于异常比例熔断</li></ul><h4 id="触发熔断后的处理逻辑示例"><a href="#触发熔断后的处理逻辑示例" class="headerlink" title="触发熔断后的处理逻辑示例"></a>触发熔断后的处理逻辑示例</h4><ul><li>提供 fallback 或 blockhandler 实现(服务降级)</li><li>返回错误result</li><li>读缓存(DB访问降级)</li></ul><h5 id="慢调用比例"><a href="#慢调用比例" class="headerlink" title="慢调用比例"></a><strong>慢调用比例</strong></h5><p>慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF­OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p><h5 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a><strong>异常比例</strong></h5><p>异常比例 (ERROR_RATIO)：当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF­OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% ­ 100%。</p><h5 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a><strong>异常数</strong></h5><p>异常数 (ERROR_COUNT)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF­OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。注意：异常降级仅针对业务异常，对 Sentinel 限流降级本身的异常（BlockException）不生效。</p><h3 id="整合openfeign进行降级"><a href="#整合openfeign进行降级" class="headerlink" title="整合openfeign进行降级"></a>整合openfeign进行降级</h3><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/openFeign%E6%95%B4%E5%90%88sentinel.jpg" alt></p><ol><li><p>自行创建模块，并引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--nacos服务注册发现，这里不需要写版本，因为父Maven的springCloudAlibaba管理器已经帮我们管理好版本了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>库存服务中controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/reduce2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reduce2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"扣减库存"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"扣减库存:"</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用者的OpenFeign接口：StockFeignService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"stock-server"</span>,path = <span class="string">"/stock"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StockFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/reduce2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reduce2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用者的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StockFeignService stockFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"下单成功"</span>);</span><br><span class="line">        String msg = stockFeignService.reduce2();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello feign"</span> + msg ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>先测试一下是否报500(正常来说是会报的)</p></li><li><p>openfegin的fallback实现类(得继承上面得OpenFeign接口)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockFeignServiceFallback</span> <span class="keyword">implements</span> <span class="title">StockFeignService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reduce2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"被降级啦！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>openfeign接口添加fallback参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"stock-server"</span>,path = <span class="string">"/stock"</span>,fallback = StockFeignServiceFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">StockFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/reduce2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reduce2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件中启动openfeign整合sentinel</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="comment"># openfeign整合sentinel</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h3><p>热点识别流控</p><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的数据，并对其访问进行限制。（某些商品是电商系统经常访问的）</p><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p>【<strong>注意】：</strong></p><ol><li><p>热点规则需要使用@SentinelResource(“resourceName”)注解，否则不生效</p></li><li><p>参数必须是7种基本数据类型才会生效</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/info/&#123;id&#125;"</span>) </span><br><span class="line"><span class="meta">@SentinelResource</span>(value = <span class="string">"userinfo"</span>, </span><br><span class="line">                 blockHandler = <span class="string">"handleException2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">info</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">  UserEntity user = userService.getById(id);</span><br><span class="line">  <span class="keyword">return</span> R.ok().put(<span class="string">"user"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 单机阈值： 针对所有参数的值进行设置的一个公共的阈值</p><ol><li><p>假设当前 参数 大部分的值都是热点流量， 单机阈值就是针对热点流量进行设置，  额外针对普通流量进行参数值流控</p></li><li><p>假设当前 参数 大部分的值都是普通流量， 单机阈值就是针对普通流量进行设置，  额外针对热点流量进行参数值流控</p></li></ol><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a><strong>系统规则</strong></h3><p>就算是有上述的所有防控规则，也不能一定能保证系统的稳定性</p><p>比如：</p><ol><li>容量评估不到位，某个大流量接口没有配置，导致系统崩溃</li><li>突然发现机器的Load和CPU使用率过高，但却没有办法很快的确认到底是哪里出现了问题，也来不及处理</li><li>规则难配，依赖难梳理等</li></ol><p>希望有个全局的兜底防护，即便因为种种原因导致系统崩了，也希望有个一定的保护机制</p><p>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><ul><li><strong>Load</strong> <strong>自适应</strong>（仅对 Linux/Unix­like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。<a href="https://www.cnblogs.com/gentlemanhai/p/8484839.html" target="_blank" rel="noopener">https://www.cnblogs.com/gentlemanhai/p/8484839.html</a></li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0­1.0），比较灵敏。</li><li><strong>平均</strong> <strong>RT</strong>：当单台机器上所有入口流量的<strong>平均</strong> RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的平均并发线程数达到阈值即触发系统保护。</li><li><strong>入口</strong> <strong>QPS</strong>：当单台机器上所有入口流量的<strong>平均</strong> QPS 达到阈值即触发系统保护。</li></ul><h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><p>目前来说，在控制台设置的信息，一旦重复服务后，配置将失效，因为它默认保存在内存中。这给我们带来非常大的不便</p><h3 id="Sentinel持久化模式"><a href="#Sentinel持久化模式" class="headerlink" title="Sentinel持久化模式"></a>Sentinel持久化模式</h3><h4 id="原始模式-默认模式"><a href="#原始模式-默认模式" class="headerlink" title="原始模式(默认模式)"></a>原始模式(默认模式)</h4><p>如果不做任何修改，Dashboard 的推送规则方式是通过 API 将规则推送至客户端并直接更新到内存中：这种做法的好处是简单，无依赖；坏处是应用重启规则就会消失，仅用于简单测试，不能用于生产环境。</p><h4 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a><strong>拉模式</strong></h4><p>pull 模式的数据源（如本地文件、RDBMS 等）一般是可写入的。使用时需要在客户端注册数据源：将对应的读数据源注册至对应的 RuleManager，将写数据源注册至 transport 的WritableDataSourceRegistry 中。</p><h4 id="推模式-常用"><a href="#推模式-常用" class="headerlink" title="推模式(常用)"></a><strong>推模式(常用)</strong></h4><p>生产环境下一般更常用的是 push 模式的数据源。对于 push 模式的数据源,如远程配置中心（ZooKeeper, Nacos, Apollo等等），推送的操作不应由 Sentinel 客户端进行，而应该经控制台统一进行管理，直接进行推送，数据源仅负责获取配置中心推送的配置并更新到本地。因此推送规则正确做法应该是 <strong>配置中心控制台**</strong>/Sentinel** <strong>控制台</strong> <strong>→</strong> <strong>配置中心</strong> <strong>→</strong> <strong>Sentinel</strong> <strong>数据源</strong> <strong>→ Sentinel</strong>，而不是经 Sentinel 数据源推送至配置中心。这样的流程就非常清晰了：</p><h5 id="基于Nacos配置中心控制台实现推送"><a href="#基于Nacos配置中心控制台实现推送" class="headerlink" title="基于Nacos配置中心控制台实现推送"></a>基于Nacos配置中心控制台实现推送</h5><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Nacos配置中心中配置DataId等(下面这些参数可以在官网看是什么意思)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[ </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">"resource"</span>: <span class="string">"order/test"</span>, </span><br><span class="line">        "controlBehavior": 0, #QPS</span><br><span class="line">        "count": 10.0,  #阈值</span><br><span class="line">        "grade": 1, </span><br><span class="line">        "limitApp": "default", </span><br><span class="line">        "strategy": 0 </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">flow-rule:</span> <span class="comment"># 名字可以自定义</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="string">server‐addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">   <span class="string">dataId:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">   <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">   <span class="string">data‐type:</span> <span class="string">json</span></span><br><span class="line">   <span class="string">rule‐type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure></li><li><p>测试。此时，直接可以在Sentinel控制台中可以看到重启服务也有配置了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux部署项目</title>
      <link href="2021/06/29/linux%E9%83%A8%E7%BD%B2jar%E5%8C%85/"/>
      <url>2021/06/29/linux%E9%83%A8%E7%BD%B2jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux中部署jar包并指定日志输出文件"><a href="#Linux中部署jar包并指定日志输出文件" class="headerlink" title="Linux中部署jar包并指定日志输出文件"></a>Linux中部署jar包并指定日志输出文件</h1><p>要运行java的项目需要先将项目打包成war包或者jar包，打包成war包需要将war包部署到tomcat服务器上才能运行。而打包成jar包可以直接在命令行使用java命令执行。</p><p>在linux系统中运行jar包有多种方式，在介绍这些方式之前，我们先了解一下linux的一些基本知识和命令。</p><h2 id="Linux中的标准输入、标准输出、错误输出"><a href="#Linux中的标准输入、标准输出、错误输出" class="headerlink" title="Linux中的标准输入、标准输出、错误输出"></a>Linux中的标准输入、标准输出、错误输出</h2><table><thead><tr><th>名称</th><th>代码</th><th>操作符</th><th>Java中表示</th></tr></thead><tbody><tr><td>stdin（标准输入）</td><td>0</td><td>&lt; 或 &lt;&lt;</td><td>System.in</td></tr><tr><td>stdout（标准输出）</td><td>1</td><td>&gt;, &gt;&gt;, 1&gt; 或 1&gt;&gt;</td><td>System.out</td></tr><tr><td>stderr（标准错误输出）</td><td>2</td><td>2&gt; 或 2&gt;&gt;</td><td>System.err</td></tr></tbody></table><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><blockquote><p>&gt; 表示输出重定向</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>command &gt;   file</td><td>标准输出重定向到文件中，文件不存在时会自动创建再写入，文件存在时会先删除文件中的内容再写入</td></tr><tr><td>command &gt;&gt; file</td><td>标准输出重定向到文件中，文件不存在时会自动创建再写入命令产生的标准输出，<br>文件存在时不改变原文件内容写入再写入命令产生的标准输出</td></tr><tr><td>command &gt; file 2&gt;&amp;1</td><td>标准输出和错误输出重定向到文件中，若文件不存在则会新建文件再写入，<br>若文件存在会先删除文件中的原本内容再写入(2&gt;&amp;1表示标准错误以后台模式重新向到标准输出中)</td></tr><tr><td>command &gt;&gt; file 2&gt;&amp;1</td><td>标准输出和错误输出重定向到文件中，若文件不存在，则会新建文件再写入；<br>若文件存在，则会在不改变文件原本内容的情况下再写入文件</td></tr><tr><td>command  2&gt; file</td><td>标准错误重定向到文件中，若文件不存在则会新建文件再写入，若文件存<br>在会先删除文件中的原本内容再写入</td></tr><tr><td>command 2&gt;&gt; file</td><td>标准错误重定向到文件中，若文件不存在，则会新建文件再写入；若文件<br>存在，则会在不改变文件原本内容的情况下再写入文件</td></tr></tbody></table><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><blockquote><p>&lt; 表示输入重定向</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>command &lt; file1 &gt; file2</td><td>command命令以file1为标准输入，以file2为标准输出</td></tr><tr><td>command &lt; file</td><td>command命令以file为标准输入</td></tr><tr><td>command &lt;&lt; del</td><td>command以键盘为标准输入，直到遇到del结束</td></tr></tbody></table><h2 id="linux下运行jar包方式介绍"><a href="#linux下运行jar包方式介绍" class="headerlink" title="linux下运行jar包方式介绍"></a>linux下运行jar包方式介绍</h2><h3 id="最基本的jar包运行方式-不常用"><a href="#最基本的jar包运行方式-不常用" class="headerlink" title="最基本的jar包运行方式(不常用)"></a><strong>最基本的jar包运行方式(不常用)</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxxx.jar</span><br></pre></td></tr></table></figure><p>【说明】此运行方式有个极其严重的缺点：锁定当前窗口，当然我们可以通过<code>Ctrl+c</code>中断或者直接关闭窗口，不过当中断或窗口关闭的话，程序也会中断执行，所以此方式在实际工作环境，是绝对不允许的。</p><h3 id="保持jar包在后台运行的方式-不常用"><a href="#保持jar包在后台运行的方式-不常用" class="headerlink" title="保持jar包在后台运行的方式(不常用)"></a><strong>保持jar包在后台运行的方式(不常用)</strong></h3><blockquote><p>linux中 &amp; 表示后台运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure><p>【说明】此运行方式的优点是当前窗口不会锁定，使用ctrl+c不会中断程序的运行，但是关闭窗口还是会中断程序的运行。</p><h3 id="不挂断地运行jar包-常用"><a href="#不挂断地运行jar包-常用" class="headerlink" title="不挂断地运行jar包(常用)"></a><strong>不挂断地运行jar包(常用)</strong></h3><blockquote><p>linux中 nohup 表示不挂断地执行命令，当账号退出或终端关闭或ctrl+c，程序依然会运行</p><p>通常我们在执行Linux命令时会使用 &amp; 使应用在后台运行而不影响终端窗口的正常使用，而&amp;存在一个问题：关闭终端窗口会导致使用&amp;的命令中断，这时就需要<code>nohup command &amp;</code>，最直接简单的命令就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 命令执行，正常日志会自定写入到file中，但如果有错误信息，则错误信息会直接打印到屏幕上</span></span><br><span class="line">&gt; nohup <span class="built_in">command</span> &gt; file &amp;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果我们不想把错误信息打印到屏幕上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 命令执行，生成的正常日志和错误信息会记录在file中</span></span><br><span class="line">&gt; nohup <span class="built_in">command</span> &gt; file 2&gt;&amp;1 &amp;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="该命令具体使用主要包括下面三种方式"><a href="#该命令具体使用主要包括下面三种方式" class="headerlink" title="该命令具体使用主要包括下面三种方式"></a>该命令具体使用主要包括下面三种方式</h4><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure><p>【<strong>说明</strong>】当用上述命令运行jar包时，缺省情况下该应用的控制台日志输出被重定向到nohup.out（自动生成到当前目录下）的文件中，除非另外指定了输出文件。我们可以用vim nohup.out查看应用运行的日志信息。</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxx.jar &gt; 文件名.log &amp;</span><br></pre></td></tr></table></figure><p>【<strong>说明</strong>】该方式是把该应用的所有控制台日志输出重定向到你指定的文件中(没有则自动创建)，而不是nohup.out，当时文件的类型还可以为txt等</p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxx.jar &gt; 文件名.<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>【<strong>说明</strong>】<strong>比较常用到此方式在linux中运行jar包</strong></p><p>【解释】</p><p>其实就是两个要点：输出什么 和 输出到哪 。<br>他们以符号“&gt;”进行划分，符号左边是输出什么，符号右边是输出到哪。</p><p><strong>1.输出什么？</strong></p><p>首先输出类型分为标准输出和错误输出，标准输出就是全输出，输出控制台信息；错误输出只是输出错误日志信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;     :符号左边没有<span class="number">1</span>和<span class="number">2</span>，啥数字也不写只有一个右箭头，默认标准输出。</span><br><span class="line"><span class="number">1</span>&gt;    :符号左边是<span class="number">1</span>，即stdout 标准输出。</span><br><span class="line"><span class="number">2</span>&gt;    :符号左边是<span class="number">2</span>，即stderr 错误输出。</span><br></pre></td></tr></table></figure><p>因此上述命令中的<code>xxx.jar &gt;文件名.log 2&gt;&amp;1</code>可以拆分成<code>xxx.jar &gt;文件名.log</code> 和 <code>2&gt;&amp;1</code> 两个输出</p><ol><li><code>xxx.jar &gt;文件名.log</code> 中的 &gt; 因为左右两边没有数字，即默认的标准输出</li><li><code>2&gt;&amp;1</code> 中的 &gt; 左边有个2，即为错误日志输出，而错误日志输出到什么地方呢，下面会继续讲解</li></ol><p><strong>2.输出到哪？</strong></p><p>输出的位置分为输出到指定路径的日志文件 和 重定向位置。</p><ol><li><p>指定路径的日志文件好理解，就是指定一个地址而已，如： &gt; /usr/local/work/log.log文件，这样便是指定输出到路径/usr/local/work/log.log文件</p></li><li><p>至于重定向，就是将文件重定向到一个地址，如：</p><p><code>&gt; &amp;1</code>  重定向到标准输出的地址，也就是输出到已指定的标准输出的地址。</p><p><code>&gt; &amp;2</code>  重定向到错误输出的地址，就是输出到已指定的错误输出的地址。</p></li></ol><p>因此上述中的<code>2&gt;&amp;1</code> ，意思就是将错误日志重定向到标准输出的地址，而因为<code>xxx.jar &gt;文件名.log</code>  指定了标准输出到了文件名.log文件下，所以错误日志输出也指向标准输出的地址，即 文件名.log下。</p><p>总的来说，这命令<code>nohup java -jar xxx.jar &gt; 文件名.log 2&gt;&amp;1 &amp;</code> 就是把所有的日志（标准输出+错误）输出到 文件名.log 中</p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar jar包名 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>/dev/null在Linux中充当黑洞(只进不出)的作用，任何写入到/dev/null中的内容都会被自动永久地删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 将命令产生的错误重定向到/dev/null，即命令执行不会在屏幕上显示任何错误信息</span></span><br><span class="line">&gt; <span class="built_in">command</span> 2 &gt; /dev/null</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>【说明】<strong>通常结合3一起使用。</strong>/dev/null 它等价于一个只写文件，所有写入它的内容都会永远丢失。如果尝试从它那儿读取内容，那么什么也读不到。所以说执行上述命令，不同于前面的那些命令，可以看到各种标准输出，而这里什么也看不到。所以我们可以把一些没用的输出信息丢进去，把一些重要的错误信息单独形成一个日志文件。</p></li></ol><h4 id="举例再解释"><a href="#举例再解释" class="headerlink" title="举例再解释"></a>举例再解释</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准日志输出到/data/log.log文件，错误日志输出到/data/err.log文件。</span></span><br><span class="line">（1）nohup java -jar ***.jar &gt;/data/log.log 2&gt;/data/err.log &amp;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准日志输出到/data/log.log文件，错误日志重定向也同样输出到/data/log.log文件。</span></span><br><span class="line">（2）nohup java -jar ***.jar &gt;/data/log.log 2&gt;&amp;1 &amp;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准日志输出到/dev/null，也就是不输出标准日志，错误日志输出到/data/err.log文件。</span></span><br><span class="line">（3）nohup java -jar ***.jar &gt;/dev/null 2&gt;/data/err.log &amp;  </span><br><span class="line"></span><br><span class="line">一般采用上面（3）只输出错误日志就可以了，有需要的按照（1）或（2）进行输出。</span><br></pre></td></tr></table></figure><h4 id="结合运行jar包命令，设置环境配置"><a href="#结合运行jar包命令，设置环境配置" class="headerlink" title="结合运行jar包命令，设置环境配置"></a>结合运行jar包命令，设置环境配置</h4><p>开发中通常分有开发环境、测试环境、生产环境，而且一般这些环境配置会各不相同，手动改配置麻烦且容易出错，那么在不手动更改程序中环境配置的情况下，如何在运行jar时使用不同的环境配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动jar包时设置spring.profiles.active 即可，然后结合上述介绍的运行jar包方式，其实只需要紧跟着java后面加参数即可</span></span><br><span class="line">nohup java -jar xxx.jar --spring.profiles.active=prod &gt;file.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="脚本启动"><a href="#脚本启动" class="headerlink" title="脚本启动"></a>脚本启动</h3><p>首先得自行学习shell命令。</p><p>编写完下面的脚本后，需要给脚本文件添加执行权限：<code>chmod +x 脚本名.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量,默认值为空</span></span><br><span class="line">pid=</span><br><span class="line"><span class="comment"># 检查程序是否在运行</span></span><br><span class="line"><span class="function"><span class="title">is_exist</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 获取pid, 等号左右不能有空格</span></span><br><span class="line">  pid=`ps -ef|grep <span class="string">"java -jar "</span><span class="variable">$1</span><span class="string">""</span> |grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">  <span class="comment"># 如果程序没运行，返回0，程序运行返回1</span></span><br><span class="line">  <span class="comment"># -z 作用为判空。注意:每个命令和变量之间前后一定要有空格，否则会提示command找不到 </span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="variable">$&#123;pid&#125;</span>  ];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止方法</span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  is_exist <span class="variable">$1</span></span><br><span class="line">  <span class="keyword">if</span> [ $? == 1  ];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">  <span class="keyword">for</span> server <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    stop <span class="variable">$&#123;server&#125;</span></span><br><span class="line">    start <span class="variable">$&#123;server&#125;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">  <span class="comment"># 函数调用：函数名 参数</span></span><br><span class="line">  is_exist <span class="variable">$1</span></span><br><span class="line">  <span class="comment"># $? 显示最后命令的退出状态。也就是is_exist的返回值</span></span><br><span class="line">  <span class="keyword">if</span> [ $? -eq 0 ];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    jarName=<span class="variable">$1</span></span><br><span class="line">    subJarName=<span class="variable">$&#123;jarName%.jar*&#125;</span></span><br><span class="line">    nohup java -jar <span class="variable">$1</span> --spring.profiles.active=prod &gt; logs/log_<span class="variable">$&#123;subJarName&#125;</span>.<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;jarName&#125;</span> 服务成功运行"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> 已经在运行了,无需启动"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"h:s:r::"</span> arg </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$arg</span> <span class="keyword">in</span></span><br><span class="line">    s)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"s's arg:<span class="variable">$OPTARG</span>"</span></span><br><span class="line">        start <span class="variable">$OPTARG</span></span><br><span class="line">        ;;</span><br><span class="line">    r)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"r's arg:<span class="variable">$OPTARG</span>"</span></span><br><span class="line">        <span class="comment"># 移位操作，获取除了选项的其他参数</span></span><br><span class="line">        <span class="built_in">shift</span> 1</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"剩余的参数为: <span class="variable">$@</span>"</span></span><br><span class="line">        restart <span class="variable">$@</span></span><br><span class="line">        ;;</span><br><span class="line">    h)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"h's arg:<span class="variable">$OPTARG</span>"</span></span><br><span class="line">        stop <span class="variable">$OPTARG</span></span><br><span class="line">        ;;</span><br><span class="line">    ?) <span class="comment"># 当有不认识的选项参数时</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: sh 脚本名.sh [-s|-h|-r]"</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">        ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-u4lbn53s employee_parent]<span class="comment"># ll</span></span><br><span class="line">total 253340</span><br><span class="line">-rwxr-xr-x 1 root root     1353 Jul 15 14:12 auto_deploy</span><br><span class="line">-rw-r--r-- 1 root root 46864541 Jun 21 13:03 infrastructure-0.0.1-SNAPSHOT.jar</span><br><span class="line">drwxr-xr-x 2 root root     4096 Jul 15 09:07 logs</span><br><span class="line">-rw-r--r-- 1 root root 60996651 Jun 21 13:03 security-0.0.1-SNAPSHOT.jar</span><br><span class="line">[root@instance-u4lbn53s employee_parent]<span class="comment"># ps -ef|grep SNAPSHOT</span></span><br><span class="line">root     23041  9547  0 14:17 pts/1    00:00:00 grep --color=auto SNAPSHOT</span><br><span class="line">[root@instance-u4lbn53s employee_parent]<span class="comment"># ps -ef|grep SNAPSHOT</span></span><br><span class="line">root     23041  9547  0 14:17 pts/1    00:00:00 grep --color=auto SNAPSHOT</span><br><span class="line">[root@instance-u4lbn53s employee_parent]<span class="comment"># ./auto_deploy -s infrastructure-0.0.1-SNAPSHOT.jar </span></span><br><span class="line">s<span class="string">'s arg:infrastructure-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string">infrastructure-0.0.1-SNAPSHOT.jar 服务成功运行</span></span><br><span class="line"><span class="string">[root@instance-u4lbn53s employee_parent]# ./auto_deploy -s security-0.0.1-SNAPSHOT.jar </span></span><br><span class="line"><span class="string">s'</span>s arg:security-0.0.1-SNAPSHOT.jar</span><br><span class="line">security-0.0.1-SNAPSHOT.jar 服务成功运行</span><br><span class="line">[root@instance-u4lbn53s employee_parent]<span class="comment"># ps -ef|grep SNAPSHOT</span></span><br><span class="line">root     25133     1 40 14:17 pts/1    00:00:14 java -jar infrastructure-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br><span class="line">root     27252     1 85 14:18 pts/1    00:00:02 java -jar security-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br><span class="line">root     27267  9547  0 14:18 pts/1    00:00:00 grep --color=auto SNAPSHOT</span><br><span class="line">[root@instance-u4lbn53s employee_parent]<span class="comment"># ./auto_deploy -r infrastructure-0.0.1-SNAPSHOT.jar security-0.0.1-SNAPSHOT.jar </span></span><br><span class="line">r<span class="string">'s arg:infrastructure-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string">剩余的参数为: infrastructure-0.0.1-SNAPSHOT.jar security-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string">infrastructure-0.0.1-SNAPSHOT.jar 服务成功运行</span></span><br><span class="line"><span class="string">security-0.0.1-SNAPSHOT.jar 服务成功运行</span></span><br><span class="line"><span class="string">[root@instance-u4lbn53s employee_parent]# ./auto_deploy -h infrastructure-0.0.1-SNAPSHOT.jar </span></span><br><span class="line"><span class="string">h'</span>s arg:infrastructure-0.0.1-SNAPSHOT.jar</span><br><span class="line">[root@instance-u4lbn53s employee_parent]<span class="comment"># ps -ef|grep SNAPSHOT</span></span><br><span class="line">root     29437     1 45 14:19 pts/1    00:00:15 java -jar security-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br><span class="line">root     31568  9547  0 14:19 pts/1    00:00:00 grep --color=auto SNAPSHOT</span><br></pre></td></tr></table></figure><p>【注意】：</p><ol><li><p>函数的返回，可以显式加：return 返回，如果不加，将以最后一条命令的运行结果作为返回值 0表示true，1表示false，因此用函数返回值来返回函数执行结果是不合适的</p></li><li><p>return的值只能是数字，不能是字符串，且数字的范围为 0-255。</p><p>解决办法：</p><ol><li><p>用全局变量解决，如上代码</p></li><li><p>通过echo返回</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func4</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> num1=100</span><br><span class="line">    <span class="built_in">local</span> num2=156</span><br><span class="line">    <span class="built_in">let</span> sum=<span class="variable">$num1</span>+<span class="variable">$num2</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line">&#125;</span><br><span class="line">sum=`func4`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"called func4:<span class="variable">$sum</span>"</span></span><br><span class="line"><span class="comment"># ==========另一种写法==========</span></span><br><span class="line"><span class="function"><span class="title">func4</span></span>() &#123;</span><br><span class="line">    num1=100</span><br><span class="line">    num2=156</span><br><span class="line">    sum=`expr <span class="variable">$&#123;num1&#125;</span> + <span class="variable">$&#123;num2&#125;</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line">&#125;</span><br><span class="line">sum=`func4`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"called func4:<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>$? 要紧跟在函数调用处的后面</p></li><li><p>指针默认指向参数的第一个，也就是1</p></li></ol><h4 id="getopt和getopts介绍"><a href="#getopt和getopts介绍" class="headerlink" title="getopt和getopts介绍"></a>getopt和getopts介绍</h4><p>在执行一个脚本时，一般都会在后面加 执行的选项 和 参数，如 <code>mysql -u root -p xxx</code>   ，这种方法，在 bash/shell 中我们一般用：getopts/getopt 这两个的作用基本是相同的，就是通过在执行脚本后面，增加选项以及选项需要参数。</p><p><strong>区别：</strong></p><ol><li>getopts 是 Shell 内建命令，getopt 是一个独立外部工具</li><li>getopts用法简单，getopt用法复杂</li><li>getopts 不支持长参数（长选项，如 –option）， getopt 支持</li><li>getopts 选项和参数不能紧跟着，要用空格隔开，getopt可以紧跟</li></ol><h5 id="getopts用法"><a href="#getopts用法" class="headerlink" title="getopts用法"></a>getopts用法</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getopts</span> -选项  参数名</span><br></pre></td></tr></table></figure><p>先看例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"hs:r::"</span> arg </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$arg</span> <span class="keyword">in</span></span><br><span class="line">    s)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"s's arg:<span class="variable">$OPTARG</span>"</span></span><br><span class="line">        ;;</span><br><span class="line">    r)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"r's arg:<span class="variable">$OPTARG</span>"</span></span><br><span class="line">        ;;</span><br><span class="line">    h)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"h's arg:<span class="variable">$OPTARG</span>"</span></span><br><span class="line">        ;;</span><br><span class="line">    ?) <span class="comment"># 当有不认识的选项参数时</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: sh 脚本名.sh [-s|-h|-r]"</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">        ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>getopts后面的字符串表示可以使用的选项列表，每个字母代表一个选项，后面带 ：的意味着该选项所需参数。</p><p>如上：</p><ul><li>h 后没有冒号，表示不需要接参数</li><li>s 后跟一个冒号，表示有需要一个必要的参数</li><li>r 后跟两个冒号，表示可选的参数（参数跟选项必须以空格隔开）</li></ul><p>使用getopts识别出各个选项之后，就可以配合case来进行相应的操作了。操作中有两个相对固定的“常量”一个是OPTARG，用来取当前选项的值，另外一个是OPTIND，代表当前选项在参数列表中的位移，反映下一个要处理的参数索引，初值是 1，每次执行 getopts 时都会更新。注意case中的最后一个选择“?”，代表这如果出现了不认识的选项，所进行的操作。 </p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="2021/06/21/Maven/"/>
      <url>2021/06/21/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><h3 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h3><p>maven是apache基金会的开源项目，使用java语法开发，它是一个自动化的构建工具， 用来管理项目的依赖。</p><p>类似自动化构建工具还有：Ant, Maven, Gradle</p><h4 id="什么是构建"><a href="#什么是构建" class="headerlink" title="什么是构建"></a>什么是构建</h4><p>构建过程中的各个环节：清理、编译、测试、报告、打包、安装、部署。</p><p>构建(build)，是面向过程的(从开始到结尾的多个步骤)，涉及到多个环节的协同工作。 </p><p>构建过程的几个主要环节：</p><ol><li>清理(clean)：删除之前的编译结果，为重新编译做好准备。 </li><li>编译(complile)：将Java源程序(.java)编译为字节码文件(.class)。 </li><li>测试(test)：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。 </li><li>报告：在每一次测试后以标准的格式记录和展示测试结果。 </li><li>打包(package)：将一个包含诸多文件的工程封装为一个压缩文件（jar或war）放在本项目的target目录下，用于安装或部署。Java 工程对应 jar 包，Web 工程对应war包。 </li><li>安装(install)：在Maven环境下特指将打包的结果，即jar包或war包安装到本地仓库中，供其它项目使用。 </li><li>部署(deploy)：将打包的结果部署到远程仓库或将war包部署到服务器上运行</li></ol><h3 id="Maven能做什么"><a href="#Maven能做什么" class="headerlink" title="Maven能做什么"></a>Maven能做什么</h3><ol><li><p>项目的自动构建，帮助开发人员做项目代码的编译，测试， 打包，安装，部署等工作。</p></li><li><p><strong>管理依赖</strong>（管理项目中使用的各种jar包）</p><ul><li>Maven 可以整合多个项目之间的引用关系，我们可以根据业务和分层需要任意拆分一个项目</li><li>Maven 提供规范的管理各个常用 jar 包及其各个版本，并且可以自动下载和引入项目中</li><li>Maven 可以根据指定版本自动解决 jar 包版本兼容问题</li><li>Maven 可以把 jar 包中所依赖的其它 jar 包（依赖传递）自动下载并引入到项目中</li></ul></li></ol><h3 id="没有使用maven怎么管理jar包"><a href="#没有使用maven怎么管理jar包" class="headerlink" title="没有使用maven怎么管理jar包"></a>没有使用maven怎么管理jar包</h3><p>没有maven，我们人工管理jar ，需要从网络中单独下载某个jar ，并且需要去选择正确的版本。</p><p>而如果jar包之间也有依赖，比如说 a.jar要使用b.jar中的相关类，这时候就需要我们手工处理jar包之间的依赖(即传递依赖)</p><h4 id="传统项目开发存在的问题"><a href="#传统项目开发存在的问题" class="headerlink" title="传统项目开发存在的问题"></a>传统项目开发存在的问题</h4><ol><li>一个项目做成一个工程，造成工程比较庞大，需要使用多模块来划分项目；</li><li>项目中需要的数量众多的 jar 包，需要手动下载并引入，并且多个项目需要的 jar 包存在重复的问题； </li><li>项目中需要的 jar 包有版本兼容的问题，需要手动解决； </li><li>项目中需要的 jar 包又依赖其它的 jar 包，需要手动解决。</li></ol><h3 id="Maven工具的安装"><a href="#Maven工具的安装" class="headerlink" title="Maven工具的安装"></a>Maven工具的安装</h3><p>下载地址： <a href="http://maven.apache.org/" target="_blank" rel="noopener">http://maven.apache.org/</a>  下载  .zip文件。</p><p>安装：</p><ol><li>确保安装了 java 环境，因为maven 本身就是 java 写的，所以要求必须安装 JDK（在cmd命令行输入java-version查看是否有jdk）。确定JAVA_HOME 指定jdk的安装目录， 如果没有JAVA_HOME， 需要在windows的环境变量中创建JAVA_HOME, 它的值是jdk的安装目录</li><li>解压缩 文件，把解压后的文件放到一个目录中。 目录的路径不要有中文， 不要有空格。</li><li>把maven安装目录中下的bin的路径添加到path中（这样控制台才能使用bin目录中的命令）<ul><li>方法一：把maven中的bin文件夹路径，添加到环境变量path中，如<code>H:\apache-maven-3.8.1\bin</code></li><li>方法二：在环境变量中，创建一个叫做M2_HOME (或者MAVEN_HOME) ，它的值是maven的安装目录M2_HOME=H:\apache-maven-3.8.1     然后在path环境变量中，加入 %M2_HOME%\bin </li></ul></li><li>测试maven的安装。 在cmd命令行执行 mvn   -v</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\NING MEI&gt;mvn -v</span><br><span class="line">Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)</span><br><span class="line">Maven home: D:\tools\apache-maven-3.3.9\bin\..</span><br><span class="line">Java version: 1.8.0_101, vendor: Oracle Corporation</span><br><span class="line">Java home: C:\Program Files\Java\jdk1.8.0_101\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">"windows 10"</span>, version: <span class="string">"10.0"</span>, arch: <span class="string">"amd64"</span>, family: <span class="string">"dos"</span></span><br></pre></td></tr></table></figure><h2 id="Maven的核心概念"><a href="#Maven的核心概念" class="headerlink" title="Maven的核心概念"></a>Maven的核心概念</h2><h3 id="约定的目录结构"><a href="#约定的目录结构" class="headerlink" title="约定的目录结构"></a>约定的目录结构</h3><p>maven项目使用的大多人遵循的目录结构。 叫做约定的目录结构。一般情况下，我们习惯上采取的措施是：约定 &gt; 配置 &gt; 编码</p><p>一个maven项目其实就是一个文件夹。 比如项目叫做Hello</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hello                     项目文件夹</span><br><span class="line">|---src  主程序目录（完成项目功能的代码和配置文件）</span><br><span class="line">|---|---main  主程序</span><br><span class="line">|---|---|---java  主程序的 java 源代码（包和相关的类定义）</span><br><span class="line">|---|---|---resources     主程序的配置文件</span><br><span class="line">|---|---test              放置测试程序代码的（开发人员自己写的测试代码）</span><br><span class="line">|---|---|---java          测试代码的（junit）</span><br><span class="line">|---|---|---resources  测试程序需要的配置文件</span><br><span class="line">|---pom.xml  maven的配置文件， 核心文件</span><br></pre></td></tr></table></figure><p>maven 的 pom.xml 记录的是关于构建项目的各个方面的设置，maven 从pom.xml 文件开始，按照助约定的工程目录编译，测试，打包，部署，发布项目。</p><h3 id="Maven的使用方式"><a href="#Maven的使用方式" class="headerlink" title="Maven的使用方式"></a>Maven的使用方式</h3><ol><li>maven可以独立使用： 创建项目，编译代码，测试程序，打包，部署等等</li><li>maven和idea一起使用：通过idea借助maven，实现编码，测试，打包等等</li></ol><h4 id="maven的独立使用示例"><a href="#maven的独立使用示例" class="headerlink" title="maven的独立使用示例"></a>maven的独立使用示例</h4><p>新建一个Hello文件夹，然后依次按照上述约定的目录结构搭建项目</p><p><img src="https://mavenimages.oss-cn-guangzhou.aliyuncs.com/%E6%90%AD%E5%BB%BA%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p><p>此时HelloMaven.java要执行的话，原始的做法是使用javac命令进行编译，而现在我们使用maven编译命令完成编译。</p><p>这时候我们得来到pom.xml所在的这个层级目录，因为我们所作的任何命令都需要在pom文件所在的位置来执行。进行cmd执行        <code>mvn compile</code>即可完成编译。完成后会生成一个target文件，里面的classes就是编译后的文件。要执行编译后的文件(.class)，得从classes这个目录执行java文件，<strong>不要进入包里面</strong>，命令：java com.maven.HelloMaven</p><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><p>POM： Project Object Model 项目对象模型， maven把一个项目的结构和内容当做模型处理。 操作这个模型就是操作项目。所以说maven其实就是跟pom.xml文件打交道，通过pom.xml文件实现对项目的构建和依赖的管理。</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- project是根标签， 后面的是约束文件, .xsd就是约束文件的扩展名，作用就是当前这些标签或者属性可以怎么用，出现的位置可以是怎么样的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- pom模型的版本， 固定就是4.0.0，没有别的值 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 坐标 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>坐标组成是 groupId、artifiactId、version。  坐标概念来自数学（xyz可以确定唯一 一个点）。·</p><p>坐标作用：确定资源，是资源的唯一标识。 在maven中，每个资源都是坐标。 坐标值是唯一的。简称叫gav</p><p>项目使用gav的地方：</p><p>1.每个maven项目，都要有一个自己的gav</p><p>2.管理依赖(jar)，需要使用其他的jar ，也需要使用gav作为标识。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标签说明"><a href="#标签说明" class="headerlink" title="标签说明"></a>标签说明</h3><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td><strong>基本信息</strong></td><td></td></tr><tr><td>groupId</td><td>组织名称或公司，团体、单位的标识，这个值常使用的是公司域名的倒写，<br>  如www .baidu. com，groupId：com.baidu<br>如果项目规模比较大，也可以是 域名倒写 + 大项目名称<br>  如www .baidu.com，无人车：com.baidu.appollo</td></tr><tr><td>artifactId</td><td>项目名称，也是模块名称，如果groupId中有项目，此时当前的值就是子项目名。项目名称是唯一的。<br>  如groupId为 com.baidu.appollo ，则artifactId就为appollo下的子项目名</td></tr><tr><td>version</td><td>项目的版本号，使用的数字，通常是三位组成：主版本号：子版本号：小版本号<br>注意：如果项目还在开发中，是不稳定版本，通常在版本号后有-SNAPSHOT，表示快照</td></tr><tr><td>packaging</td><td>位置放在项目坐标的下方，项目打包的类型， 有jar ，war，rar、ear， pom等等 默认是jar</td></tr><tr><td><strong>配置属性</strong></td><td></td></tr><tr><td>properties</td><td>properties 是用来定义一些配置属性的，例如project.build.sourceEncoding（项目构建源码编码方式），可以设置为 UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级。</td></tr><tr><td><strong>构建</strong></td><td></td></tr><tr><td>build</td><td>build 表示与构建相关的配置，例如设置编译插件的 jdk 版本</td></tr><tr><td><strong>继承</strong></td><td></td></tr><tr><td>parent</td><td>在 Maven 中，如果多个模块都需要声明相同的配置，例如：groupId、version、有相同的依赖、或者相同的组件配置等，maven也有类似 Java 的继承机制，用 parent 声明要继承的父工程的 pom 配置。</td></tr><tr><td><strong>聚合</strong></td><td></td></tr><tr><td>modules</td><td>在 Maven 的多模块开发中，为了统一构建整个项目的所有模块，可以提供一个额外的模块，该模块打包方式为pom，并且在其中使用 modules 聚合的其它模块，这样通过本模块就可以一键自动识别模块间的依赖关系来构建所有模块，叫 Maven 的聚合。</td></tr></tbody></table><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>maven把所有的jar包、插件或者项目构建的输出统一存储在某一个位置，这个位置就叫做仓库，maven的仓库存放的是：</p><ol><li>maven工具自己的jar包（插件其实也是jar）。</li><li>第三方的其他jar包， 比如项目中要使用mysql驱动。</li><li>自己写的程序，可以打包为jar。 存放到仓库，使用install命令。</li></ol><p><strong>仓库的分类：</strong></p><ol><li><p>本地仓库（本机仓库）： 位于你自己的计算机， 它是磁盘中的某个<strong>目录</strong>，即仓库就是一个目录。</p><p>本地仓库：默认路径，是你登录操作系统的账号的目录中 ~/.m2/repository</p><p>​    ~ 是用户的主目录，windows系统中是 c：/用户/登录系统的用户名</p><p>那么一般来说，假如系统重装、又由于说C盘空间有限，因此我们一般把仓库放在其他磁盘中</p><p><strong>修改本地仓库的位置</strong>：修改maven工具的配置文件（maven的安装路径 /conf/setting.xml）</p><ol><li><p>创建一个目录，作为仓库使用。  目录不要有中文和空格。 目录不要太深。例如： D:\openrepository</p><ol start="2"><li><p>修改setting.xml文件，指定 D:\openrepository这个目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--放在带有localRepository注释下的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/openrepository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>（选做）把 ~/.m2/repository中的文件全部拷贝到新的仓库中</p></li></ol><p>【<strong>注意</strong>】：仓库中的文件都必须得通过maven进行下载的，这样你才能使用，不能够人为的手动添加资源(jar包)，且不能进行重命名，因为maven它是有个算法检验的，重命名的话，它是不认的。</p></li><li><p>远程仓库：需要通过互联网访问。多电脑共享使用</p><ol><li>中央仓库：maven默认的远程仓库，是一个FTP服务器，存放了所有的资源，为全世界范围内的开发人员提供服务的中央仓库</li><li>中央仓库的镜像：就是中央仓库的拷贝，架设在不同位置，欧洲，美洲，亚洲等每个洲都有若干的服务器，在各大主要城市都有镜像，为中央仓库分担流量。减轻中央仓库的访问，下载的压力。所在洲的用户首先访问的是本洲的镜像服务器。</li><li>私服：在局域网环境中部署的服务器，为当前局域网范围内的所有 Maven工程服务。公司中常使用这种方式。具体点解释就是：私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用。当Maven需要下载构件（在Maven中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件）的时候，它先从私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为Maven的下载请求提供服务。我们还可以把一些无法从外部仓库下载到的构件上传到私服上。</li></ol><p>maven使用远程仓库流程：</p><p>maven自动使用仓库，当项目启动后，执行了maven命令，maven首先访问的是本地仓库，从仓库中获取所需的jar，如果本地仓库没有，需要访问私服或者中央仓库或者镜像</p><p><img src="https://mavenimages.oss-cn-guangzhou.aliyuncs.com/maven%E4%BB%93%E5%BA%93%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt></p><p>【<strong>注意</strong>】：在IDEA下载依赖的时候，先查看自己pom文件的parent是啥，在该maven的镜像中，parent 如果找不到，maven都不会下载任何包</p></li></ol><h3 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h3><p>对项目的构建是建立在生命周期上的，它明确定义项目生命周期各个阶段，并且对于每一个阶段提供相对应的命令，构建项目时按照生命周期顺序构建，每一个阶段都有特定的插件来完成。不论现在要执行生命周期中的哪个阶段，都是从这个生命周期的最初阶段开始的。</p><p>对于我们程序员而言，无论我们要进行哪个阶段的构建，直接执行相应的命令即可，无需担心它前边阶段是否构建，因为Maven都会自动构建。</p><p>项目构建的各个阶段。 包括 清理， 编译， 测试，报告，打包，安装，部署</p><p>插件：要完成构建项目的各个阶段，要使用maven的命令， 执行命令的功能是通过插件完成的。插件就是jar，一些类。</p><p>命令： 执行maven功能是 由命令发出的。 比如 mvn compile</p><p>三者的关系：通过命令来进行某个阶段的操作，而命令则是通过插件来完成某一功能的实现</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>单元测试（junit）：</p><p>junit是一个单元测试的工具， 在java中经常使用。</p><p>单元：在java中指的是方法。  一个方法就是一个单元， 方法是测试的最小单位。</p><p>作用：使用junit去测试方法是否完成了要求。 开发人员自测。</p><p>使用单元测试：</p><ol><li><p>添加junit依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在src/test/java 目录中创建测试类文件。 写测试代码</p><p>   单元测试使用的建议：</p><p>​    1.测试类的定义， 名称一般是Test+要测试的类名称</p><p>​    2.测试类它的结构和包名和要测试的包名和包结构一样。</p><p>​    3.在类中定义方法，要测试代码。</p><p>​       方法的定义：public方法， </p><p>​                               没有返回值</p><p>​                               方法名称自定义（建议 Test+测试的方法名称）</p><p>​                               方法没有参数</p><p>   4.在测试类中的方法，可以单独执行。 测试类也可以单独执行</p><p>   5.在方法的上面加入@Test</p></li></ol><h4 id="命令和插件"><a href="#命令和插件" class="headerlink" title="命令和插件"></a>命令和插件</h4><ol><li><p>mvn clean：清理命令， 作用删除以前生成的数据， 实际上就是<strong>删除target目录</strong>。</p><p>使用到的插件： </p><ul><li>maven-clean-plugin  </li></ul></li><li><p>mvn compile：编译命令，执行代码的编译， 把src/main/java目录中的java代码编译为class文件。不会编译test目录，同时把class文件拷贝到 target/classes目录。 这个目录classes是存放类文件的根目录（也叫做<strong>类路径</strong>，classpath）</p><p>使用到的插件： </p><ul><li>maven-compiler-plugin ：  编译代码的插件</li><li>maven-resources-plugin ：  拷贝资源插件。 <ul><li>作用是把src/main/resources目录中的文件拷贝target/classes目录中。</li><li>为什么要拷贝到classes目录中？因为执行java程序实际上执行的是classes中的class文件，当class文件需要读取某一资源文件时，那么这个文件得在classes下才能读取到</li></ul></li></ul></li><li><p>mvn test-compile：测试编译命令， 编译src/test/java目录中的源文件， 把生成的class拷贝到target/test-classes目录。同时把src/test/resources目录中的文件拷贝到 test-clasess目录下</p><p>使用到的插件：</p><ul><li>maven-compiler-plugin 版本3.1。  编译代码的插件</li><li>maven-resources-plugin 版本2.6 ：拷贝资源插件，作用同上</li></ul></li><li><p>mvn test：测试命令， 作用执行 test-classes目录的程序(.class)， 测试src/main/java目录中的主程序代码是否符合要求。当执行test命令时，<u>它会把前面得compile和test-compile命令都执行一遍，因为没有class文件，就执行不了test文件</u></p><p>使用到的插件： </p><ul><li>maven-surefire-plugin 版本 2.12.4：会生成一个目录target/surefire-reports，保存测试结果</li></ul></li><li><p>mvn package：打包，打包主程序(会编译、编译测试、测试、并且按照 pom.xml 配置把项目中的资源class文件和配置文件都放在一个文件夹中，打包生成 jar 包或者 war 包)  </p><p>使用到的插件：</p><ul><li><p>maven-jar-plugin 版本 2.4。 执行打包处理。 生成一个jar扩展的文件， 放在target目录下，打包的文件包含的其实就是 src/main目录中的所有的生成的class和配置文件和test无关。</p></li><li><p>比如以下示例：生成的是 ch01-maven-1.0-SNAPSHOT.jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">打包的文件名： artifactId-version.packaging</span><br></pre></td></tr></table></figure></li></ul></li><li><p>mvn install：把生成的打包的文件 ，按照工程的坐标安装到maven仓库。这样别的项目小组成员就可以拿到jar包并使用它</p><p>使用到的插件：</p><ul><li><p>maven-install-plugin 版本 2.4 。 把生成的jar文件安装到本地仓库。 </p></li><li><p>安装到本地仓库中的jar文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">groupId中的值， 如果有 "." 前和后都是独立的文件夹。 com\maven</span><br><span class="line">artifactId, 独立的文件夹</span><br><span class="line">version，独立的文件夹</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>总的来说，无论我们要进行哪个阶段的构建，直接执行相应的命令即可，无需担心它是否已经编译，因为Maven都会先进行重新编译等操作，当然为了稳妥起见，一般在进行打包命名时，最好先执行clean操作。</strong></p><h3 id="自定义配置插件"><a href="#自定义配置插件" class="headerlink" title="自定义配置插件"></a>自定义配置插件</h3><p>在pom.xml文件中， build标签中。设置插件</p><p>默认编译的插件是用jdk1.7的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置构建项目相关的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- 指定编译代码的jdk版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> <span class="comment">&lt;!-- 运行java程序使用的jdk版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven和idea的集成"><a href="#Maven和idea的集成" class="headerlink" title="Maven和idea的集成"></a>Maven和idea的集成</h2><h3 id="idea中集成maven"><a href="#idea中集成maven" class="headerlink" title="idea中集成maven"></a>idea中集成maven</h3><p>idea中有一个自带的maven。  我们要让idea使用自己安装的maven。</p><ol><li><p>选择File- Settings </p><p>Local repository不需要重写，因为idea会读取maven配置文件进行自动设置本地仓库，如果没有，则手动设置</p><p><img src="https://mavenimages.oss-cn-guangzhou.aliyuncs.com/maven%E9%85%8D%E7%BD%AE.jpg" alt></p></li><li><p>配置以下设置，可以加快maven项目的创建</p><p>VM Option： <code>-DarchetypeCatalog=internal</code></p><p><img src="https://mavenimages.oss-cn-guangzhou.aliyuncs.com/maven%E9%85%8D%E7%BD%AE02.jpg" alt></p></li><li><p>(旧版Idea)File - Other Settings - settings for new project 或者 （新版IDEA）File - New Project Setting</p><p>第1、2点设置只针对当前的项目有效的，比如创建模块等是起作用的，那么为了以后我们导入项目或新建时让maven配置也生效，则需要第三点设置，配置参数同第1、2点</p></li></ol><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>依赖范围：使用scope表示依赖的范围。 </p><p>依赖范围表示： 这个依赖（jar和里面类）在项目构建的哪个阶段起作用。</p><p>依赖范围scope </p><ul><li>compile：默认， 参与构建项目的所有阶段</li><li>test：测试，在测试阶段才会使用， 比如执行mvn test会使用junit 。</li><li>provided: 提供者。 项目在部署到服务器时，不需要我们提供这个依赖的jar ， 而是由服务器提供这个依赖的jar包，比如最明显的是servlet 和jsp 依赖，在写java代码、测试代码，在Idea运行tomcat的时候，这两个依赖必须得有，但是在项目最终最终运行的时候，即执行mvn package，部署到服务器的时候，这两个jar包是不会打包进去的，因为这两个jar在tomcat服务器已经是有的了，不需要单独提供</li></ul><table><thead><tr><th></th><th>compile</th><th>test</th><th>provided</th></tr></thead><tbody><tr><td>对主程序是否有效</td><td>√</td><td>×</td><td>√</td></tr><tr><td>对测试程序是否有效</td><td>√</td><td>√</td><td>√</td></tr><tr><td>是否参与打包</td><td>√</td><td>×</td><td>×</td></tr><tr><td>是否参与部署</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><ol><li><p>properties它里面的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span> 源码编译 jdk 版本</span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span> 运行代码的 jdk 版本</span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span> 项目构建使用的编码，避免中文乱码</span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span> 生成报告的编码</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局变量</p><p>在properties定义标签，这个标签就是一个变量， 标签的文本就是变量的值。 </p><p>使用全局变量表示多个依赖使用的版本号。</p><p>使用步骤：</p><ol><li>在properties标签中，定义一个标签，指定版本的值</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--自定义变量--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用全局变量， 语法 ${变量名}</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小技巧：如果引用的版本不存在的话，在本地仓库的中的文件后缀名为lastUpdate，这个表示没用的意思</p></li><li><p>使用资源插件</p><p>处理的配置文件的信息， maven默认处理配置文件的规则：</p></li><li><p>maven会把src/main/resources目录中的文件(包括子包中的文件)， 完全拷贝到target/classes目录下</p></li><li><p>maven只处理src/main/java目录中的 .java文件，把这些java文件编译为class，拷贝到 target/classes目录中。 不会去处理其他文件，比如.xml、properties等。</p></li></ol><p>如果我们也想把src/main/java目录中的其他文件也加入到classes中（比如有时候我们也会把mapper.xml放在java目录下，不会放到resources下），则需要配置下面的资源插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--资源插件，告诉maven把 src/main/java目录中的 指定扩展名的文件 拷贝到 target/classes目录中。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取容器中的Bean对象</title>
      <link href="2021/06/17/%E8%8E%B7%E5%8F%96%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84Bean%E5%AF%B9%E8%B1%A1/"/>
      <url>2021/06/17/%E8%8E%B7%E5%8F%96%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84Bean%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="普通类获取Spring容器中的Bean"><a href="#普通类获取Spring容器中的Bean" class="headerlink" title="普通类获取Spring容器中的Bean"></a>普通类获取Spring容器中的Bean</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们知道如果我们要在一个类使用spring提供的bean对象，我们需要把这个类注入到spring容器中，交给spring容器进行管理，也就是说想要获取交由spring容器管理的bean组件，必须从spring容器中获取，而且本身也必须在容器中，换句话说，spring容器有一个上下文对象，只要能拿到这个上下文对象，就能拿到spring的所有内容。</p><p>那么在实际当中，我们往往会碰到在一个普通的java类中，想直接使用spring提供的其他对象或者说有一些不需要交给spring管理。</p><h2 id="解决思路与方案"><a href="#解决思路与方案" class="headerlink" title="解决思路与方案"></a>解决思路与方案</h2><p>思路：只要拿到这个spring容器中的上下文对象，就可以解决在普通java类中调用容器中的Bean了</p><p>方案：</p><ol><li>首先实现ApplicationContextAware接口（作用相当于对外提供了一个可以拿容器中的Bean的方法）</li><li>增加@Component注解，让spring扫描到该Bean（本身也要在容器中，才能把容器中的Bean提供给调用者）</li><li>在启动类中添加 <code>@Import(SpringBeanUtil.class)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBeanUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取applicationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(SpringBeanUtil.applicationContext == <span class="keyword">null</span>)&#123;</span><br><span class="line">            SpringBeanUtil.applicationContext = applicationContext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取applicationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name获取 Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name,以及Clazz返回指定的Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String beanName,Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(beanName,clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过class获取Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>那么如何查看当前容器中有什么Bean对象呢？</strong></p><p>一般是被标注为@Service、@Controller、@Configuration、@Mapper等类的名称(首字母小写)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Import</span>(SpringBeanUtil<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmployeeApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(EmployeeApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        <span class="comment">// 打印出Spring容器中所有Bean对象</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如说我容器中只有以下Bean对象，那么我该如何调用这个Bean呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">excelServiceImpl</span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExcelServiceImpl excelServiceImpl = (ExcelServiceImpl) SpringBeanUtil.getBean(<span class="string">"excelServiceImpl"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="2021/06/01/SpringSecurity/"/>
      <url>2021/06/01/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringSecurity简介"><a href="#SpringSecurity简介" class="headerlink" title="SpringSecurity简介"></a>SpringSecurity简介</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p> 什么是安全框架？</p></blockquote><p>解决系统安全问题的框架。如果没有安全框架，我们需要手动处理每个资源的访问控制，非常麻烦。使用安全框架，我们可以通过配置的方式实现对资源的访问限制。一般来说，安全框架主要有用户认证，用户授权，加密，会话管理等主要功能。</p><blockquote><p>什么是用户认证？</p></blockquote><p>用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维码登录，手机短信登录，指纹认证等方式。</p><p><strong>简单来说，就是用户登录。</strong></p><blockquote><p>什么是用户授权</p></blockquote><p>授权是用户认证通过后，根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访问，没有权限则拒绝访问。</p><p><strong>简单来说，就是系统判断用户是否有权限去做某些事情。</strong></p><blockquote><p>什么是会话管理</p></blockquote><p>用户认证通过后，为了避免用户的每次操作都进行认证可将用户的信息保证在会话中。会话就是系统为了保持当前用户的登录状态所提供的机制，常见的有：</p><ul><li><p>基于session方式</p><p>它的交互流程是：用户认证成功后，在服务端生成用户相关的数据保存在session对象(当前会话)中，并生成session_id发给客户端，客户端把 session_id 存放到 cookie 中，之后客户端请求时带上 session_id 就可以验证服务器端是否存在 session 数据，以此完成用户的合法校验，当用户退出系统或session过期销毁时,客户端的session_id也就无效了。</p></li><li><p>基于token方式(令牌)</p><p>用户认证成功后，服务端生成一个token字符串发给客户端（token里面可以存放用户的信息），客户端可以把token放到 cookie 或 localStorage 等存储中，每次请求时在请求头带上 token，服务端收到token后，进行解析校验令牌，通过验证后即可确认用户身份。</p></li></ul><p>【对比】</p><p>基于session的认证方式由Servlet规范定制，服务端要存储session信息需要占用内存资源，且客户端需要支持 cookie；基于token的方式则一般不需要服务端存储token，并且不限制客户端的存储方式。如今移动互联网时代更多类型的客户端需要接入系统，系统多是采用前后端分离的架构进行实现，所以基于token的方式更适合。</p><h3 id="常用安全框架"><a href="#常用安全框架" class="headerlink" title="常用安全框架"></a>常用安全框架</h3><ul><li>Spring Security：Spring家族的一员，是一个<strong>高度自定义</strong>（很好地支持自定义权限控制或认证逻辑等方面）的安全框架，能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IOC和AOP功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作，“用户认证”和“用户授权”是两大核心功能。</li><li>Apache Shiro：一个功能强大且轻量级易于使用的Java安全框架，提供了认证，授权，加密和会话管理（但基于自己系统去实现一些自定义的权限或者认证方面的逻辑的时候，会显得特别麻烦 ，有时候甚至无法实现）。</li></ul><h3 id="授权的数据模型"><a href="#授权的数据模型" class="headerlink" title="授权的数据模型"></a>授权的数据模型</h3><p>如何进行授权即如何对用户访问资源进行控制，首先需要学习授权相关的数据模型。 </p><p>授权可简单理解为Who是否可以对What(which)进行How操作，Who、What、How构成了访问权限三元组，包括如下：</p><ul><li>Who，即主体（Subject），主体一般是指用户，也可以是程序，需要去访问系统中的资源。</li><li>What，即资源 （Resource），再继续细分下去又分为：<ul><li>系统功能资源，如系统菜单、页面、按钮、代码方法等。</li><li>实体资源（数据资源），如系统商品信息、系统订单信息</li></ul></li><li>How，权限/许可（Permission），规定了用户对资源的操作许可，权限离开资源没有意义， 如用户查询权限、用户添加权限、某个代码方法的调用权限、编号为001的用户的修改权限等，通过权限可知用户 对哪些资源都有哪些操作许可。</li></ul><p><strong>通常来说，企业开发中将资源和权限表合并为一张权限表</strong>，如下三张实体表：</p><ol><li>主体（用户id、账号、密码、…）</li><li>角色（角色id、角色名称、…）</li><li>权限（权限id、权限标识、权限名称、资源名称、资源访问地址、…）</li></ol><p>关系如下图：</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%8E%88%E6%9D%83%E4%B8%89%E5%AE%9E%E4%BD%93%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.jpg" alt></p><p>由于这三张表之间存在着多对多的关系，那么它们之间的交互，最好另外使用两张表来完成。而这两张表起着映射的作用，分别是“用户角色关系表” 和 “角色权限关系表”。即：</p><ol><li>主体（用户id、账号、密码、…）</li><li>主体和角色关系（用户id、角色id、…）</li><li>角色（角色id、角色名称、…）</li><li>角色和权限关系（角色id、权限id、…）</li><li>权限（权限id、权限标识、权限名称、资源名称、资源访问地址、…）</li></ol><p>因此它们的关系就变为：</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%8E%88%E6%9D%835%E5%BC%A0%E8%A1%A8%E6%A8%A1%E5%9E%8B.jpg" alt></p><p>示例：</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%8E%88%E6%9D%83%E7%A4%BA%E4%BE%8B.jpg" alt></p><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>如何实现授权？业界通常基于RBAC实现授权。</p><h4 id="基于角色的访问控制"><a href="#基于角色的访问控制" class="headerlink" title="基于角色的访问控制"></a>基于角色的访问控制</h4><p>RBAC（Role-Based Access Control）基于角色的访问控制是按角色进行授权，比如：主体的角色为总经理查询员工工资信息等，访问控制流程如下：</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt></p><p>根据上图中的判断逻辑，授权伪代码可表示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(主体.hasRole(<span class="string">"总经理角色id"</span>)) &#123; </span><br><span class="line">    查询工资 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果上图中查询工资所需要的角色变化为总经理和部门经理，此时就需要修改判断逻辑为“判断用户的角色是否是总经理或部门经理”，修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(主体.hasRole(<span class="string">"总经理角色id"</span>) || 主体.hasRole(<span class="string">"部门经理角色id"</span>))&#123; </span><br><span class="line">    查询工资 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上边的例子发现，当需要修改角色的权限时就需要修改授权的相关代码，<strong>系统可扩展性差</strong>。</p><h4 id="基于资源的访问控制（推荐）"><a href="#基于资源的访问控制（推荐）" class="headerlink" title="基于资源的访问控制（推荐）"></a>基于资源的访问控制（推荐）</h4><p>RBAC（Resource-Based Access Control）基于资源的访问控制是按资源（或权限）进行授权，比如：用户必须具有查询工资权限才可以查询员工工资信息等，访问控制流程如下：</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt></p><p>根据上图中的判断，授权伪代码可以表示为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(主体.hasPermission(<span class="string">"查询工资权限标识"</span>))&#123; </span><br><span class="line">    查询工资 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【<strong>优点</strong>】</p><ol><li><strong>系统可扩展性强</strong>，系统设计时定义好查询工资的权限标识，即使查询工资所需要的角色变化为总经理和部门经理也不需要修改授权代码。</li><li><strong>减少代码重构</strong>，将访问控制的关注点放在更细粒度的资源上，因为资源的变化频率比起角色要低得多，开发者在开发某一功能时可以直接检查用户是否具有对资源执行操作的能力，而不是去检查用户的角色。</li><li><strong>代码容易阅读</strong>，权限检查与代码当前执行的逻辑是对应的，而不像角色检查那样检查一个与当前操作间接相关的事物。</li><li><strong>灵活的安全模型</strong>，上面的代码示例并没有对用户、组或角色进行规定， 这意味着可以支持任何安全模型设计，比如，权限可以直接分配给用户，也可以将它们分配给一个角色，再由角色分配给用户， 也许还有组的概念，组与角色有关联，等等。 这些可能性是开放的，可以根据应用进行定制，而不管怎么对权限进行组织，最终代码里检查权限的地方都是相同的，只需要检查具体权限，无需关心上层概念。</li><li><strong>在运行时进行更改</strong>，由于权限检查代码直接与当前代码执行的操作相关，我们可以在应用程序运行时更改那些以权限为基础的上层安全模型中的关联关系，而不需要重构代码就可以使新的安全策略生效。</li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>本次的系统以员工管理系统为例，采用前后端分离的思想进行书写</p><h4 id="数据设计"><a href="#数据设计" class="headerlink" title="数据设计"></a>数据设计</h4><p>【说明】</p><p>这里我是把账户与员工信息独立出来了，因为员工记录，与帐号记录，无必然关系。一个场景举例，维护测试是需要某个帐号登录的。 这个帐号可能是不与员工挂钩的。 员工可能会离职，但是帐号不会离职，会交接。也就是说账户才有权限，而员工本身是没有的。</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%A9%E7%90%86%E6%A8%A1%E5%9E%8B.jpg" alt="数据库物理模型"></p><h4 id="Idea创建SpringBoot项目"><a href="#Idea创建SpringBoot项目" class="headerlink" title="Idea创建SpringBoot项目"></a>Idea创建SpringBoot项目</h4><p>可勾选web、lombok、spring security</p><p>【注意】lombok的使用得需要：注解 + 安装插件</p><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.16&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.28&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jJWT&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="搭建目录结构"><a href="#搭建目录结构" class="headerlink" title="搭建目录结构"></a>搭建目录结构</h4><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.jpg" alt="项目结构"></p><p>自己按照上面建包</p><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><p>利用ORM思想，新建实体类，一共是5个实体类，下面贴主要的三个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"Account对象"</span>,description = <span class="string">"账号"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"账户编号"</span>)</span><br><span class="line">    <span class="meta">@TableId</span>(value = <span class="string">"account_id"</span>,type = IdType.ID_WORKER)</span><br><span class="line">    <span class="keyword">private</span> Long accountId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"员工编号"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long EmployeeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"登录账号"</span>)</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"登录密码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"是否是测试号"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer isTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"账号状态 1表示启用，0表示禁用"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"逻辑删除 1表示已删除， 0表示未删除"</span>)</span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"创建时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"更新时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(value=<span class="string">"Permission对象"</span>, description=<span class="string">"权限"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"权限编号"</span>)</span><br><span class="line">    <span class="meta">@TableId</span>(value = <span class="string">"permission_id"</span>,type = IdType.ID_WORKER)</span><br><span class="line">    <span class="keyword">private</span> Long permissionId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"父节点(所属上级)"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"权限标识符"</span>)</span><br><span class="line">    <span class="keyword">private</span> String permissionCode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"权限名称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String permissionName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"类型(1:菜单, 2:按钮)"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer permissionType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"图标"</span>)</span><br><span class="line">    <span class="keyword">private</span> String permissionIcon;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"请求地址(访问路径)"</span>)</span><br><span class="line">    <span class="keyword">private</span> String permissionUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下两个属性，是数据库没有的，为了方便做递归操作而建的</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"层级"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"下级"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Permission&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"创建时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"更新时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"role对象"</span>,description = <span class="string">"角色"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"角色编号"</span>)</span><br><span class="line">    <span class="meta">@TableId</span>(value = <span class="string">"role_id"</span>,type = IdType.ID_WORKER)</span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"角色类型"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"角色描述"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleDescription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"创建时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"更新时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置MyBatis-Plus的自动填充功能"><a href="#配置MyBatis-Plus的自动填充功能" class="headerlink" title="配置MyBatis Plus的自动填充功能"></a>配置MyBatis Plus的自动填充功能</h4><p>项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的创建时间，更新时间等。上述实体类中被@TableField就是实现自动填充的步骤之一。我们可以使用MyBatis Plus的自动填充功能，完成这些字段的赋值工作，每次插入或更新操作，都会自动帮我们填充值。</p><ol><li><p>在实体类中的<code>gmtCreate</code>和<code>gmtModified</code>上添加注解(上面已经添加了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line"><span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line"><span class="keyword">private</span> Date gmtModified;</span><br></pre></td></tr></table></figure></li><li><p>实现元对象处理器接口，这样自动填充功能才能生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.servicebase.handler;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtCreate"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置yaml"><a href="#配置yaml" class="headerlink" title="配置yaml"></a>配置yaml</h4><p>resources目录下删除application.properties，新建 application.ymal</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost/employee?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">6666</span></span><br><span class="line">  <span class="comment"># 默认情况下json时间格式带有时区，并且是世界标准时间，和我们的时间差了八个小时</span></span><br><span class="line">  <span class="comment"># 定义返回json的全局时间格式</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># mybatis日志，打印sql信息</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 驼峰命名开启</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># mapper接口与其.xml文件绑定，因为他们在不同的路径上，classpath是指编译生成的classes包下的</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:**/mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 实体别名 这样在mapper.xml中resultType就不用写全限定名，可以直接使用实体类的类名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.hbp.spring_security.entity</span></span><br></pre></td></tr></table></figure><h4 id="统一接口返回格式"><a href="#统一接口返回格式" class="headerlink" title="统一接口返回格式"></a>统一接口返回格式</h4><h5 id="新建接口定义返回状态码"><a href="#新建接口定义返回状态码" class="headerlink" title="新建接口定义返回状态码"></a>新建接口定义返回状态码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultCode</span> </span>&#123;</span><br><span class="line"><span class="comment">//成功状态码</span></span><br><span class="line">    Integer SUCCESS = <span class="number">20000</span>;</span><br><span class="line">    <span class="comment">//失败状态码</span></span><br><span class="line">    Integer ERROR = <span class="number">20001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新建统一返回数据类"><a href="#新建统一返回数据类" class="headerlink" title="新建统一返回数据类"></a>新建统一返回数据类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"是否成功"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"状态码"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"返回信息"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"返回数据"</span>)</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; data = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(ResultCode.SUCCESS);</span><br><span class="line">        result.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">        result.setMessage(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(ResultCode.ERROR);</span><br><span class="line">        result.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">        result.setMessage(<span class="string">"失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">success</span><span class="params">(Boolean success)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">code</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">message</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">data</span><span class="params">(Map&lt;String,Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">data</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.put(key,value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试以上搭建是否成功，且能否连接到数据库</p><h5 id="先把spring-security的依赖注释掉"><a href="#先把spring-security的依赖注释掉" class="headerlink" title="先把spring security的依赖注释掉"></a>先把spring security的依赖注释掉</h5><h5 id="插入数据到数据库"><a href="#插入数据到数据库" class="headerlink" title="插入数据到数据库"></a>插入数据到数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">'admin'</span>, <span class="string">'$2a$10$R.LqnppeElBgJk7AeAxmFu619FxQKjCsQhWgPfmQtZcUSlTH1oMom'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'2021-05-25 09:30:20'</span>, <span class="string">'2021-05-25 09:30:23'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="literal">NULL</span>, <span class="string">'1111'</span>, <span class="string">'$2a$10$nmCddNZgsAcGCGXPU0R1dunaLQa5tivxpwj8rg.72EPLhM96Vvh42'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'2021-05-28 14:40:58'</span>, <span class="string">'2021-05-28 14:41:01'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`role`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'超级管理员'</span>, <span class="string">'拥有系统所有权限'</span>, <span class="string">'2021-05-27 14:07:11'</span>, <span class="string">'2021-05-27 14:07:14'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`role`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'普通员工'</span>, <span class="string">'测试而已，啥权限也没有'</span>, <span class="string">'2021-05-28 14:41:36'</span>, <span class="string">'2021-05-28 14:41:39'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account_role`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'2021-05-27 14:11:09'</span>, <span class="string">'2021-05-27 14:11:11'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account_role`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">'2021-05-28 14:42:42'</span>, <span class="string">'2021-05-28 14:42:46'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">0</span>, <span class="string">'系统所有权限'</span>, <span class="number">1</span>, <span class="string">'all'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:16:42'</span>, <span class="string">'2021-05-27 11:16:44'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="string">'员工管理'</span>, <span class="number">1</span>, <span class="string">'employee:list'</span>, <span class="string">'api/employee'</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:19:30'</span>, <span class="string">'2021-05-27 11:19:33'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="string">'员工添加'</span>, <span class="number">2</span>, <span class="string">'employee:add'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:45:40'</span>, <span class="string">'2021-05-27 11:45:42'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">2</span>, <span class="string">'员工编辑'</span>, <span class="number">2</span>, <span class="string">'employee:edit'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:46:30'</span>, <span class="string">'2021-05-27 11:46:33'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">2</span>, <span class="string">'员工删除'</span>, <span class="number">2</span>, <span class="string">'employee:delete'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:46:56'</span>, <span class="string">'2021-05-27 11:46:58'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">1</span>, <span class="string">'角色管理'</span>, <span class="number">1</span>, <span class="string">'role:list'</span>, <span class="string">'api/role'</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:48:54'</span>, <span class="string">'2021-05-27 11:48:56'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">6</span>, <span class="string">'角色新增'</span>, <span class="number">2</span>, <span class="string">'role:add'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:50:07'</span>, <span class="string">'2021-05-27 11:50:09'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">6</span>, <span class="string">'角色编辑'</span>, <span class="number">2</span>, <span class="string">'role:edit'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 11:50:32'</span>, <span class="string">'2021-05-27 11:50:34'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission`</span> <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">6</span>, <span class="string">'角色删除'</span>, <span class="number">2</span>, <span class="string">'role:delete'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">'2021-05-27 13:34:44'</span>, <span class="string">'2021-05-27 13:34:49'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission_role`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'2021-05-27 14:11:56'</span>, <span class="string">'2021-05-27 14:11:59'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission_role`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="string">'2021-05-28 09:21:46'</span>, <span class="string">'2021-05-28 09:21:49'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission_role`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="string">'2021-05-28 09:21:54'</span>, <span class="string">'2021-05-28 09:21:58'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`permission_role`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="string">'2021-05-28 14:43:08'</span>, <span class="string">'2021-05-28 14:43:11'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%9D%83%E9%99%90%E8%A1%A8.jpg" alt="权限表"></p><h5 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.service.impl;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">AccountMapper</span>, <span class="title">Account</span>&gt; <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountContrller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok().message(<span class="string">"测试成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 该注解默认会扫描该类所在的包下所有的配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.hbp"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.hbp.spring_security.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoginAclApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceLoginAclApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><p>访问地址：localhost:8000/api/test 可以看到成功后返回的json数据</p><h2 id="整合Spring-Security"><a href="#整合Spring-Security" class="headerlink" title="整合Spring Security"></a>整合Spring Security</h2><h3 id="添加启动器"><a href="#添加启动器" class="headerlink" title="添加启动器"></a>添加启动器</h3><p>在SpringBoot中想要使用SpringSecurity，只要添加SpringSecurity的启动器即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个依赖在最初给的pom中已经有了，不过给注释了，取消掉就可以，其余什么都不用做。</p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>启动完成后，我们访问<a href="http://localhost:8000或者其中的任何接口，都会重定向到spring" target="_blank" rel="noopener">http://localhost:8000或者其中的任何接口，都会重定向到spring</a> security内置的登录页面。</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E5%86%85%E7%BD%AE%E7%99%BB%E5%BD%95%E9%A1%B5.jpg" alt="内置登录页"></p><p>SpringSecurity默认的用户名是user，密码则在启动项目时会打印在控制台上。登录成功后会跳转到404页面(因为我们没有写页面)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using generated security password: <span class="number">4370239</span>d-<span class="number">1e54</span>-<span class="number">4231</span>-b0ff-cd6e3711fa9d</span><br></pre></td></tr></table></figure><p>每次启动都会分配不一样的密码。SpringSecurity同样支持自定义密码，只要在application.yml中简单配置一下即可。一旦自定义了密码，控制台就不会生成随机密码了（这一块了解即可，测试完后删除掉，以免影响后续代码，导致一些错误）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="讲解说明"><a href="#讲解说明" class="headerlink" title="讲解说明"></a>讲解说明</h3><p>以下方式采用先讲原理，再贴代码，分3个大功能去讲</p><ol><li>认证</li><li>授权</li><li>会话</li></ol><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>Spring Security所解决的问题就是<strong>安全访问控制</strong>，而安全访问控制功能其实就是对所有进入系统的请求进行拦截， 校验每个请求是否能够访问它所期望的资源。根据前边知识的学习，可以通过Filter或AOP等技术来实现，Spring Security对Web资源的保护是靠Filter实现的，所以从这个Filter来入手，逐步深入Spring Security原理。</p><p>当初始化Spring Security时，会创建一个名为 SpringSecurityFilterChain 的Servlet过滤器，类型为 <code>org.springframework.security.web.FilterChainProxy</code>，它实现了javax.servlet.Filter，因此外部的请求会经过此 类，下图是Spring Security过虑器链结构图：</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE.jpg" alt="过滤器链"></p><p>为什么会有这么多Filter呢？因为它不光要检验用户认证，还有权限。FilterChainProxy是一个代理，真正起作用的是FilterChainProxy中SecurityFilterChain所包含的各个Filter，同时这些Filter作为Bean被Spring管理，它们是Spring Security核心，各有各的职责，但他们并不直接处理用户的<strong>认证</strong>，也不直接处理用户的<strong>授权</strong>，而是把它们交给了认证管理器（AuthenticationManager）和决策管理器 （AccessDecisionManager）进行处理。所以Spring security是基于过滤器链的方式来过滤用户的请求，但最终检验用户身份和权限的是认证管理器和决策管理器。</p><blockquote><p> spring Security功能的实现主要是由一系列过滤器链相互配合完成。</p></blockquote><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E8%BF%87%E6%BB%A4%E9%93%BE%E8%AF%A6%E7%BB%86.jpg" alt="过滤链详细"></p><p>下面介绍过滤器链中主要的几个过滤器及其作用：</p><ul><li><strong>SecurityContextPersistenceFilter</strong> 这个Filter是整个拦截过程的入口和出口（也就是第一个和最后一个拦截 器），会在请求开始时从配置好的 SecurityContextRepository 中获取 SecurityContext，然后把它设置给 SecurityContextHolder。在请求完成后将 SecurityContextHolder 持有的 SecurityContext 再保存到配置好的 SecurityContextRepository，同时清除 securityContextHolder 所持有的 SecurityContext</li><li><strong>UsernamePasswordAuthenticationFilter</strong> 用于处理来自表单提交的认证，即登录。它是通过调用AuthenticationManager来进行用户认证的，该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的 AuthenticationSuccessHandler 和 AuthenticationFailureHandler，这些都可以根据需求做相关改变； </li><li><strong>FilterSecurityInterceptor</strong> 是用于保护web资源的，即授权，它是通过调用AccessDecisionManager对当前用户进行授权访问</li><li><strong>ExceptionTranslationFilter</strong> 能够捕获来自 FilterChain 所有的异常，并进行处理。但是它只会处理两类异常： AuthenticationException 和 AccessDeniedException，其它的异常它会继续抛出。 </li></ul><h4 id="用户认证流程"><a href="#用户认证流程" class="headerlink" title="用户认证流程"></a>用户认证流程</h4><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.jpg" alt="认证流程"></p><p>让我们仔细分析认证过程： </p><ol><li><p>用户提交用户名、密码被SecurityFilterChain中的 UsernamePasswordAuthenticationFilter 过滤器获取到， 封装为请求Authentication，通常情况下是UsernamePasswordAuthenticationToken这个实现类。 </p></li><li><p>然后过滤器将Authentication提交至认证管理器（AuthenticationManager）进行认证 </p></li><li><p>认证管理器又委托它的实现类为ProviderManager，ProviderManager维护着一个 List<authenticationprovider> 列表，存放多种认证方式，只要经过其中一个即可，最终实际的认证工作是由 ….AuthenticationProvider完成的。而web表单的对应的实现类为 DaoAuthenticationProvider，它的内部又维护着一个UserDetailsService负责UserDetails的获取。</authenticationprovider></p></li><li><p>如果成功拿到了UserDetails（从数据库查出的用户身份信息）就要进行密码校验，拿用户输入的密码与UserDetails里的密码通过PasswordEncoder密码编码器进行比对，认证通过后， AuthenticationProvider将UserDetails填充至Authentication。可以看出AuthenticationManager接口（认证管理器）是认证相关的核心接口，也是发起认证的出发点</p></li><li><p>认证成功后， AuthenticationManager 身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除） Authentication 实例。 </p></li><li><p>SecurityContextHolder 安全上下文容器将第4步填充了信息的 Authentication ，通过 SecurityContextHolder.getContext().setAuthentication(…)方法，设置到其中。 </p></li></ol><p><strong>认证核心组件的大体关系如下：</strong></p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E8%AE%A4%E8%AF%81%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.jpg" alt="认证核心组件"></p><h5 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a><strong>AuthenticationProvider</strong></h5><p>通过前面的认证流程我们得知，认证管理器（AuthenticationManager）委托 AuthenticationProvider完成认证工作。 AuthenticationProvider是一个接口，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationProvider</span> </span>&#123; </span><br><span class="line">    <span class="function">Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException</span>; </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; var1)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>authenticate()</strong>方法定义了<strong>认证的实现过程</strong>，它的参数是一个Authentication，里面包含了登录用户所提交的用 户、密码等。而返回值也是一个Authentication，这个Authentication则是在认证成功后，将用户的权限及其他信息重新组装后生成。 </p><p>Spring Security中维护着一个 List<authenticationprovider> 列表，存放多种认证方式，不同的认证方式使用不同的AuthenticationProvider。如使用用户名密码登录时，使用AuthenticationProvider1，短信登录时使用 AuthenticationProvider2等等这样的例子很多。 </authenticationprovider></p><p>每个AuthenticationProvider需要实现 <strong>supports()</strong> 方法来表明自己支持的认证方式，如我们使用表单方式认证， 在提交请求时Spring Security会生成UsernamePasswordAuthenticationToken，它是一个Authentication，里面封装着用户提交的用户名、密码信息。而对应的，哪个AuthenticationProvider来处理它。</p><p>我们在<strong>DaoAuthenticationProvider</strong>的基类AbstractUserDetailsAuthenticationProvider发现以下代码：即他是通过账户密码的方式进行认证，当然还有别的，比如短信认证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> UsernamePasswordAuthenticationToken<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">authentication</span>)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们来看一下<strong>Authentication</strong>(认证信息)的结构，它是一个接口，我们之前提到的 UsernamePasswordAuthenticationToken就是它的实现之一：</p><p>Authentication是spring security包中的接口，直接继承自Principal类，而Principal是位于 java.security包中的。它是表示着一个抽象主体身份，任何主体都有一个名称，因此包含一个getName()方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Authentication</span> <span class="keyword">extends</span> <span class="title">Principal</span>, <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 权限信息列表，默认是GrantedAuthority接口的一些实现类，通常是代表权限信息的一系列字符串。</span></span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities(); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// // 凭证信息，用户输入的密码字符串，在认证过后通常会被移除，用于保障安全。</span></span><br><span class="line">    <span class="function">Object <span class="title">getCredentials</span><span class="params">()</span></span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 细节信息，web应用中的实现接口通常为 WebAuthenticationDetails，它记录了访问者的ip地址和sessionId的值</span></span><br><span class="line">    <span class="function">Object <span class="title">getDetails</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 身份信息，大部分情况下返回的是UserDetails接口的实现类，UserDetails代表用户的详细信息，那从Authentication中取出来的UserDetails就是当前登录用户信息，它也是框架中的常用接口之一。 </span></span><br><span class="line">    <span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> var1)</span> <span class="keyword">throws</span> IllegalArgumentException</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserDetailsService（一般需要我们自定义实现）"><a href="#UserDetailsService（一般需要我们自定义实现）" class="headerlink" title="UserDetailsService（一般需要我们自定义实现）"></a>UserDetailsService（一般需要我们自定义实现）</h5><p>因为上面的认证流程中，我们可以看到<code>UsernamePasswordAuthenticationFilter</code>和<code>DaoAuthenticationProvider</code>是非常关键的，而他们内部的逻辑是完整且复杂的，所以我们一般不会对他们俩进行自定义，而它整个流程中，是再调用UserDetailsService里的方法：<code>loadUserByUsername</code>进行查询用户的信息，因此我们可以<strong>通过UserDetailsService来自定义登录逻辑</strong>，实现里面的方法进行我们的查询数据库信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123; </span><br><span class="line">    <span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】这里再明确一下，别把DaoAuthenticationProvider和UserDetailsService的职责搞混淆，其实UserDetailsService只负责从特定的地方（通常是数据库）加载用户信息，仅此而已。而DaoAuthenticationProvider的职责更大，它完成完整的认证流程，同时会把UserDetails填充至Authentication。 </p><p>而UserDetailsService口中返回的<strong>UserDetails</strong>，它是用户的信息，它同样是一个接口，一般真实开发中，<strong>也是要去实现它</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities(); </span><br><span class="line">    </span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它和Authentication接口很类似，比如它们都拥有username，authorities。要注意Authentication的getCredentials()与 UserDetails中的getPassword()需要被区分对待，前者是用户提交的密码凭证，后者是用户实际存储的密码，认证密码其实就是对这两者的比对。Authentication中的getAuthorities()实际是由UserDetails的getAuthorities()传递而形成的。还记得Authentication接口中的getDetails()方法吗？其中的UserDetails用户详细信息便是经过了 AuthenticationProvider认证之后被填充的。</p><p><strong>通过实现UserDetailsService和UserDetails，我们可以完成对用户信息获取方式以及用户信息字段的扩展。</strong> </p><p>Spring Security提供的InMemoryUserDetailsManager(内存认证)，JdbcUserDetailsManager(jdbc认证)就是 UserDetailsService的实现类，主要区别无非就是从内存还是从数据库加载用户。</p><h5 id="PasswordEncoder"><a href="#PasswordEncoder" class="headerlink" title="PasswordEncoder"></a><strong>PasswordEncoder</strong></h5><p>DaoAuthenticationProvider认证处理器通过UserDetailsService获取到UserDetails后，它是如何与请求Authentication中的密码做对比呢？ </p><p>在这里Spring Security为了适应多种多样的加密类型，又做了抽象，DaoAuthenticationProvider通过 PasswordEncoder接口的matches方法进行密码的对比，而具体的密码对比细节取决于实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 把客户端的密码按照特定的编码规则进行加密。这里传入的参数是客户端的密码</span></span><br><span class="line">   <span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    验证从数据库中获取的密码与编码(加密)后的密码是否匹配。如果密码匹配，</span></span><br><span class="line"><span class="comment">    则返回 true；如果不匹配，则返回 false。</span></span><br><span class="line"><span class="comment">    第一个参数表示需要被解析的密码（客户端密码）。第二个参数表示数据库存储的密码。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果能够二次加密则返回 true，否则返回 false。默认返回 false。比较少用到 </span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="内置编码器介绍"><a href="#内置编码器介绍" class="headerlink" title="内置编码器介绍"></a>内置编码器介绍</h6><p>在 Spring Security 中内置了很多关于加密的编码器，即接口PasswordEncoder的实现类，官方推荐的编码器为BCryptPasswordEncoder，我们一般也是选用这个编码器。</p><p>BCryptPasswordEncoder 是对 bcrypt 强散列方法的具体实现。是基于Hash算法实现的单向加密。可以通过strength控制加密强度，默认10</p><p><strong>Spring Security 要求容器中必须有 PasswordEncoder 实例。所以当自定义登录逻辑(UserDetailsService)时要求必须给容器注入 PaswordEncoder 的bean对象</strong></p><p>在安全配置类SecurityConfig中注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中进行测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PasswordEncoder pw = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    String encode01 = pw.encode(<span class="string">"123"</span>);</span><br><span class="line">    System.out.println(encode01);</span><br><span class="line"></span><br><span class="line">    String encode02 = pw.encode(<span class="string">"123"</span>);</span><br><span class="line">    System.out.println(encode02);</span><br><span class="line">    <span class="comment">//判断原字符和加密后内容是否匹配</span></span><br><span class="line">    <span class="keyword">boolean</span> matches01 = pw.matches(<span class="string">"123"</span>, encode01);</span><br><span class="line">    <span class="keyword">boolean</span> matches02 = pw.matches(<span class="string">"123"</span>, encode02);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"密码比较结果"</span>);</span><br><span class="line">    System.out.println(matches01);</span><br><span class="line">    System.out.println(matches02);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">$<span class="number">2</span>a$<span class="number">10</span>$UGxtrKWr6ikqo6TInFnD3uxZ2FsJ/dFoFEYSGsFfv2D1bK60RILPK</span><br><span class="line">$<span class="number">2</span>a$<span class="number">10</span>$nmCddNZgsAcGCGXPU0R1dunaLQa5tivxpwj8rg<span class="number">.72</span>EPLhM96Vvh42</span><br><span class="line">密码比较结果</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>从这里我们可以看出来，每次加密后的值都是不一样的，但是解密出的结果却是一样的</p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>登录验证就是拿到客户端的用户名密码和我们查到的的用户名密码（即<code>UserDetails</code>的实现类）进行比对，拿到<strong>我们查找到的用户名密码是经过<code>UserDetailsService.loadUserByUsername(String userName)</code>实现的</strong>，框架实现的<code>UserDetailsService</code>通常无法知足项目要求，就须要本身手动实现了，同时若是框架自带的<code>UserDetails</code>的实现类无法知足要求咱们也能够本身实现UserDetails。<code>UserDetail</code>是<code>SpringSecurity</code>和应用之间的桥梁，无论你数据库怎么建，只要你最后将用户信息和权限的关系封装为<code>UserDetails</code>，<code>SpringSecurity</code>就能够按它本身的机制进行权限校验。</p><h4 id="用户认证整合"><a href="#用户认证整合" class="headerlink" title="用户认证整合"></a>用户认证整合</h4><p>这处是实操，非原理讲解</p><h5 id="自定义用户信息"><a href="#自定义用户信息" class="headerlink" title="自定义用户信息"></a>自定义用户信息</h5><p>前面我们登录都是用的指定的用户名和密码或者是springsecurity默认的用户名和打印出来的密码。我们要想连接上自定义数据库只需要实现一个自定义的UserDetailsService</p><p>【<strong>说明</strong>】UserDetailsService接口返回的是UserDetails，根据自己的需求来选择是否需要自定义实体类，并实现UserDetails，UserDetails封装的是从数据库中查出来的数据</p><p>我们这里就新建MyAccountDetails</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccountDetails</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己定义的账户实体类，账户的信息</span></span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户权限的集合</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getRoles</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorities.stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库里的密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名 </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account.getAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 凭证是否过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="把该账户对应的权限查询出来"><a href="#把该账户对应的权限查询出来" class="headerlink" title="把该账户对应的权限查询出来"></a>把该账户对应的权限查询出来</h5><ol><li><p>mapper包新建PermissionMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PermissionMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Permission</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Permission&gt; <span class="title">findPermissionsByAccountId</span><span class="params">(Long accountId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>resources/mapper新建xml文件对应mapper接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hbp.spring_security.mapper.PermissionMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--把字段提取出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"columns"</span>&gt;</span>   p.permission_id,p.parent_id,p.permission_name,p.permission_icon,p.permission_url,p.permission_type,p.permission_code</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPermissionsByAccountId"</span> <span class="attr">resultType</span>=<span class="string">"permission"</span> <span class="attr">parameterType</span>=<span class="string">"long"</span>&gt;</span></span><br><span class="line">        select distinct</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"columns"</span>/&gt;</span></span><br><span class="line">        from account_role ar</span><br><span class="line">        inner join permission_role pr on ar.role_id = pr.role_id</span><br><span class="line">        inner join permission p on pr.permission_id = p.permission_id</span><br><span class="line">        where ar.account_id = #&#123;accountId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>service包下新建PermissionService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PermissionService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Permission</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Permission&gt; <span class="title">findPermissionsByAccountId</span><span class="params">(Long accountId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service/impl/PermissionServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">PermissionMapper</span>, <span class="title">Permission</span>&gt; <span class="keyword">implements</span> <span class="title">PermissionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Permission&gt; <span class="title">findPermissionsByAccountId</span><span class="params">(Long accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.findPermissionsByAccountId(accountId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p>自定义一个UserDetailsServiceImpl实现UserDetailsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String account)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据账号获取账户信息</span></span><br><span class="line">        QueryWrapper&lt;Account&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"account"</span>,account);</span><br><span class="line">        Account accountInfo = accountService.getOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span> (accountInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"账户不存在"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"1"</span>.equals(accountInfo.getStatus())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(<span class="string">"账户被禁止，请联系管理员"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取账户权限</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; grantedAuthorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Permission&gt; permissions = permissionService.findPermissionsByAccountId(accountInfo.getAccountId());</span><br><span class="line">        System.out.println(permissions);</span><br><span class="line">        List&lt;String&gt; collect = permissions.stream().map(Permission::getPermissionCode).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span>(String permission : collect) &#123;</span><br><span class="line">            <span class="comment">// mybatis数据里的空值和null，在你从未对这个数据修改时，它就是null。如果修改了又删除掉了，它就会是空值</span></span><br><span class="line">            <span class="keyword">if</span> (!(<span class="string">""</span>).equals(permission) &amp;&amp; permission != <span class="keyword">null</span>) &#123;</span><br><span class="line">                SimpleGrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(permission);</span><br><span class="line">                grantedAuthorities.add(grantedAuthority);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把数据封装到UserDetails中</span></span><br><span class="line">        MyAccountDetails myAccountDetails = <span class="keyword">new</span> MyAccountDetails(accountInfo, grantedAuthorities);</span><br><span class="line">        <span class="comment">// 方便观察结果</span></span><br><span class="line">        System.out.println(myAccountDetails);</span><br><span class="line">        <span class="keyword">return</span> myAccountDetails;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h5><p>Spring Security 还内置了几种常用的 PasswordEncoder 接口，官方推荐使用的是BCryptPasswordEncoder</p><p>新建config包，在其包下新建SecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里如果爆红不用管</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成加密密码"><a href="#生成加密密码" class="headerlink" title="生成加密密码"></a>生成加密密码</h5><p>因为我们前面测试项目时，用的是明文密码存储，引入了Spring Security后，因为配置了加密密码的校验，所以得生成一个加密密码存入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PasswordEncoder pw = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        String encode01 = pw.encode(<span class="string">"123"</span>);</span><br><span class="line">        System.out.println(encode01);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>我们再重启项目，这时候控制台就不再打印密码，现在需要输入数据库中的用户名密码才能登录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8000</span>/login</span><br></pre></td></tr></table></figure><p>这里如果输入正确的账号和密码，就会跳转404白页，如果其中有个错误，都不能跳转。</p><p>【注意】如果只要输入的账号是在数据库中存在的，那么无论密码正确与否，控制台都会有正确的用户信息返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">返回的数据：</span><br><span class="line">MyAccountDetails(account=Account(accountId=<span class="number">1</span>, EmployeeId=<span class="keyword">null</span>, account=admin, password=$<span class="number">2</span>a$<span class="number">10</span>$R.LqnppeElBgJk7AeAxmFu619FxQKjCsQhWgPfmQtZcUSlTH1oMom, isTest=<span class="number">0</span>, status=<span class="number">1</span>, isDeleted=<span class="number">0</span>, gmtCreate=Tue May <span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">20</span> CST <span class="number">2021</span>, gmtModified=Tue May <span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">23</span> CST <span class="number">2021</span>), authorities=[all, employee:list, employee:add])</span><br></pre></td></tr></table></figure><p><strong>到此，用户认证便已完成</strong></p><h5 id="加入授权控制示例，方便后续讲解"><a href="#加入授权控制示例，方便后续讲解" class="headerlink" title="加入授权控制示例，方便后续讲解"></a>加入授权控制示例，方便后续讲解</h5><p>授权管理有2中方式</p><ul><li><p>方式一：使用注解方式，当有’all’权限时，才能访问这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountContrller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="comment">// 可以用逗号形式加入多个</span></span><br><span class="line">    <span class="meta">@PostAuthorize</span>(<span class="string">"hasAnyAuthority('all')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok().message(<span class="string">"测试成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p>访问：localhost:8000/api/test 此时会跳转到登录页，输入管理员账号密码，可以正确返回json格式数据。输入另一个没有’all’权限的账号，报403(无权限)</p></li><li><p>方式二：SecurityConfig类中配置拦截处理</p><p>通配符有三种：</p><ul><li>? ：匹配任何单字符</li><li>*：匹配0或者任意数量的字符</li><li>**：匹配0或者更多的目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/api/test"</span>).hasAnyAuthority(<span class="string">"p1"</span>)</span><br><span class="line">            .anyRequest().authenticated() <span class="comment">// 拦截所有请求</span></span><br><span class="line">            .and()</span><br><span class="line">            .formLogin(); <span class="comment">// 开启表单登录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：与上述一致</p></li></ul><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><p>Spring Security可以通过 http.authorizeRequests() 对web请求进行授权保护。Spring Security使用标准Filter建立了对web请求的拦截，最终实现对资源的授权访问。 </p><h5 id="授权流程："><a href="#授权流程：" class="headerlink" title="授权流程："></a>授权流程：</h5><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%8E%88%E6%9D%83%E6%B5%81%E7%A8%8B.jpg" alt="授权流程"></p><p>分析授权流程： </p><ol><li><p><strong>拦截请求</strong>，已认证用户访问受保护的web资源将被SecurityFilterChain中的 FilterSecurityInterceptor 的子类拦截。 </p></li><li><p><strong>获取资源访问策略</strong>，FilterSecurityInterceptor会从 SecurityMetadataSource 的子类 DefaultFilterInvocationSecurityMetadataSource 获取要访问当前资源所需要的权限 Collection<configattribute> SecurityMetadataSource其实就是读取访问策略的抽象，而读取的内容，其实就是我们配置的访问规则， 读取访问策略如：</configattribute></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests() </span><br><span class="line">    .antMatchers(<span class="string">"/r/r1"</span>).hasAuthority(<span class="string">"p1"</span>) </span><br><span class="line">    .antMatchers(<span class="string">"/r/r2"</span>).hasAuthority(<span class="string">"p2"</span>) ...</span><br></pre></td></tr></table></figure></li><li><p>最后，FilterSecurityInterceptor会调用 AccessDecisionManager 进行授权决策，若决策通过，则允许访问资源，否则将禁止访问。</p></li></ol><p>AccessDecisionManager（访问决策管理器）的核心接口如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessDecisionManager</span> </span>&#123; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过传递的参数来鉴定用户是否有访问对应受保护资源的权限</span></span><br><span class="line"><span class="comment">    * Authentication封装了用户的权限信息</span></span><br><span class="line"><span class="comment">    * configAttributes里面则是访问当前资源所需要的权限，即受保护资源的访问策略，通过SecurityMetadataSource获取。</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication , Object object, Collection&lt;ConfigAttribute&gt; configAttributes )</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException</span>; </span><br><span class="line">    <span class="comment">//略.. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="授权决策"><a href="#授权决策" class="headerlink" title="授权决策"></a>授权决策</h5><p>AccessDecisionManager采用<strong>投票</strong>的方式来确定是否能够访问受保护资源。 </p><p>AccessDecisionManager中的抽象实现包含的一系列AccessDecisionVoter将会被用来对Authentication 是否有权访问受保护对象进行投票，AccessDecisionManager根据投票结果，做出最终决策。 AccessDecisionVoter是一个接口，其中定义有三个方法，具体结构如下所示。 </p><p>AccessDecisionVoter是一个接口，其中定义有三个方法，具体结构如下所示。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessDecisionVoter</span>&lt;<span class="title">S</span>&gt; </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> ACCESS_GRANTED = <span class="number">1</span>; <span class="comment">// 赞同</span></span><br><span class="line">    <span class="keyword">int</span> ACCESS_ABSTAIN = <span class="number">0</span>; <span class="comment">// 弃权</span></span><br><span class="line">    <span class="keyword">int</span> ACCESS_DENIED = ‐<span class="number">1</span>; <span class="comment">// 拒绝</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute var1)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; var1)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">vote</span><span class="params">(Authentication var1, S var2, Collection&lt;ConfigAttribute&gt; var3)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vote()方法的返回结果会是AccessDecisionVoter中定义的三个常量之一。</p><p>ACCESS_GRANTED表示同意， ACCESS_DENIED表示拒绝，ACCESS_ABSTAIN表示弃权。如果一个AccessDecisionVoter不能判定当前Authentication是否拥有访问对应受保护对象的权限，则其vote()方法的返回值应当为弃权ACCESS_ABSTAIN。</p><p>Spring Security内置了三个基于投票的AccessDecisionManager实现类如下，它们分别是 </p><ul><li><strong>AffirmativeBased逻辑是：</strong><ul><li>只要有AccessDecisionVoter的投票为ACCESS_GRANTED则同意用户进行访问；</li><li>如果全部弃权也表示通过；</li><li>如果没有一个人投赞成票，但是有人投反对票，则将抛出AccessDeniedException。 Spring security默认使用的是AffirmativeBased。 </li></ul></li><li><strong>ConsensusBased逻辑是：</strong><ul><li>如果赞成票多于反对票则表示通过。</li><li>反过来，如果反对票多于赞成票则将抛出AccessDeniedException。 </li><li>如果赞成票与反对票相同且不等于0，并且属性allowIfEqualGrantedDeniedDecisions的值为true，则表 示通过，否则将抛出异常AccessDeniedException。参数allowIfEqualGrantedDeniedDecisions的值默认为true。</li><li>如果所有的AccessDecisionVoter都弃权了，则将视参数allowIfAllAbstainDecisions的值而定，如果该值为true则表示通过，否则将抛出异常AccessDeniedException。参数allowIfAllAbstainDecisions的值默认为false。</li></ul></li><li><strong>UnanimousBased逻辑是：</strong><ul><li>跟AffirmativeBased是返过来的</li><li>如果受保护对象配置的某一个ConfifigAttribute被任意的AccessDecisionVoter反对了，则将抛出AccessDeniedException。</li><li>如果没有反对票，但是有赞成票，则表示通过。</li><li>如果全部弃权了，则将视参数allowIfAllAbstainDecisions的值而定，true则通过，false则抛出 AccessDeniedException。 </li></ul></li></ul><p><strong>其实就是比对字符串，不能说是投票吧，方法名容易让人误解</strong></p><h5 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h5><p><strong>其实这授权的过程了解即可，因为我们一般都是直接交给spring security自己处理，不会去自定义里面的方法。其实实质就是判断当前的用户所包含的权限列表中是否包含访问指定url所须要的权限，Collection<configattribute>里面的授权值是跟Authentication里的getAuthorities()里的权限进行比较的，而getAuthorities()的类型是GrantedAuthority，里面有个实现类是SimpleGrantedAuthority，这个玩意在我们自定义的UserDetailsService里有写到过，就是根据数据库的授权值生成的</configattribute></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleGrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(permission);</span><br></pre></td></tr></table></figure><h4 id="用户授权整合"><a href="#用户授权整合" class="headerlink" title="用户授权整合"></a>用户授权整合</h4><p>SpringSecurity会自动帮我们进行权限控制。而我们要做的就是在需要进行权限控制的方法上添加上权限标识即可。</p><p>在相关的全部接口上加上@PreAuthorize(“hasAnyAuthority(‘user:list’)”)即可，当然也可以在配置类的设置，这样我们就实现了授权管理了。但是到这里还会存在一些问题，比如未授权时所访问的页面是如何的等等，后续会讲到。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="常见的认证机制"><a href="#常见的认证机制" class="headerlink" title="常见的认证机制"></a>常见的认证机制</h3><p><strong>HTTP Basic Auth</strong></p><p>HTTP Basic Auth简单点说明就是每次请求API时都提供用户的username和password，简言之，Basic Auth是配合RESTful API 使用的最简单的认证方式，只需提供用户名密码即可，但由于有把用户名密码暴露给第三方客户端的风险，在生产环境下被使用的越来越少。因此，在开发对外开放的RESTful API时，尽量避免采用HTTP Basic Auth。</p><p><strong>Cookie Auth</strong></p><p>Cookie认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端的浏览器端创建了一个Cookie对象；通过客户端带上来Cookie对象来与服务器端的session对象匹配来实现状态管理的。默认的，当我们关闭浏览器的时候，cookie会被删除。但可以通过修改cookie 的expire time使cookie在一定时间内有效。</p><p><strong>OAuth</strong></p><p>OAuth（开放授权,Open Authorization）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一web服务上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。如网站通过微信、微博登录等，主要用于第三方登录。OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的第三方系统（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容。这种基于OAuth的认证机制适用于个人消费者类的互联网产品，如社交类APP等应用，但是不太适合拥有自有认证权限管理的企业应用。</p><p>缺点：过重。</p><p><strong>Token Auth</strong></p><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p><ol><li><p>客户端使用用户名跟密码请求登录</p></li><li><p>服务端收到请求，去验证用户名与密码</p></li><li><p>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</p></li><li><p>客户端收到 Token 以后可以把它存储起来，比如可以放在 Cookie 里</p></li><li><p>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</p></li><li><p>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</p></li></ol><p><strong>这种方法比第一种方式更安全，比第二种方式更节约服务器资源，比第三种方式更加轻量。</strong></p><p>Token Auth的优点（Token机制相对于Cookie机制又有什么好处呢？）：</p><ol><li>支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户</li></ol><p>认证信息通过HTTP头传输.</p><ol start="2"><li>无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包</li></ol><p>含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</p><ol start="3"><li>更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片</li></ol><p>等），而你的服务端只要提供API即可.</p><ol start="4"><li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用</li></ol><p>的时候，你可以进行Token生成调用即可.</p><ol start="5"><li>更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 10等）时，Cookie</li></ol><p>是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。</p><ol start="6"><li><p>CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。</p></li><li><p>性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算的Token</p></li></ol><p>验证和解析要费时得多.</p><ol start="8"><li>不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做</li></ol><p>特殊处理.</p><ol start="9"><li>基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库</li></ol><p>（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.</p><h3 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h3><h4 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h4><p>JSON Web Token（JWT）是一个开放的行业<strong>标准</strong>(即没有具体的实现)，它定义了一种简介的、自包含的协议格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。</p><p>JWT令牌的优点：</p><ol><li><p>JWT基于json，非常方便解析。</p></li><li><p>可以在令牌中自定义丰富的内容，易扩展。</p></li><li><p>通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。</p></li><li><p>资源服务使用JWT可不依赖认证服务即可完成授权。</p></li></ol><p>缺点：</p><ol><li>JWT令牌较长，占存储空间比较大。</li></ol><h4 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a><strong>JWT</strong>组成</h4><p>一个JWT实际上就是一个字符串，它由三部分组成：头部、载荷(负载)与签名</p><p><strong>头部(Header)</strong></p><p>头部用于描述关于该JWT的最基本的信息，例如其类型（即JWT）以及签名所用的算法（如HMACS、HA256或RSA）等。这也可以被表示成一个JSON对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alg ：签名的算法，这里使用的算法是HS256算法</p><p>typ ：是类型。</p><p>我们对头部的json字符串进行BASE64编码（网上有很多在线编码的网站），编码后的字符串如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure><p>Base64 是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。JDK 中提供了非常方便的 BASE64Encoder 和 BASE64Decoder ，用它们可以非常方便的完成基于 BASE64 的编码和解码，<strong>即它是可以解密的</strong>。</p><p><strong>负载、载荷(Payload)</strong></p><p>第二部分是负载，就是存放有效信息的地方。</p><p>这些有效信息包含三个部分：</p><ol><li>标准中注册的声明（建议但不强制使用）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss: JWT签发者</span><br><span class="line">sub: JWT所面向的用户</span><br><span class="line">aud: 接收JWT的一方</span><br><span class="line">exp: JWT的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line">nbf: 定义在什么时间之前，该JWT都是不可用的.</span><br><span class="line">iat: JWT的签发时间</span><br><span class="line">jti: JWT的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</span><br></pre></td></tr></table></figure><ol start="2"><li>公共的声明</li></ol><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><ol start="3"><li>私有的声明</li></ol><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。这个指的就是<strong>自定义的claim</strong>。比如下面那个举例中的name都属于自定的claim。这些private claim跟JWT标准规定的claim区别在于：JWT规定的claim，JWT的接收方在拿到JWT之后，是知道怎么对这些标准的claim进行验证(还不知道是否能够验证)；而private claims不会验证，除非明确告诉接收方要对这些claim进行验证以及规则才行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="string">"iat"</span>: <span class="number">1516239022</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 sub 是标准的声明， name 是自定义的声明（公共的或私有的）然后将其进行base64编码，得到JWT的第二部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkphbWVzIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure><p>【注意】：声明中不要放一些敏感信息。</p><p><strong>签证、签名（signature）</strong></p><p>JWT的第三部分是一个签证信息，此部分用于防止JWT内容被篡改，    这个签证信息由三部分组成：</p><ol><li><p>header (base64后的)</p></li><li><p>payload (base64后的)</p></li><li><p>secret（盐或者说私钥，一定要<strong>保密</strong>）</p></li></ol><p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了JWT的第三部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>HI-Lod0ncfVDnbKIPJJqLH998duF9DSDGkx3gRPNVI</span><br></pre></td></tr></table></figure><p>将这三部分用.连接成一个完整的字符串,构成了最终的JWT:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ<span class="number">.8</span>HI-Lod0ncfVDnbKIPJJqLH998duF9DSDGkx3gRPNVI</span><br></pre></td></tr></table></figure><p>注意： secret 是保存在服务器端的， JWT 的签发生成也是在服务器端的， secret 就只是用来进行 JWT的签发和 JWT 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret , 那就意味着客户端是可以自我签发 JWT 了。</p><h3 id="JJWT简介"><a href="#JJWT简介" class="headerlink" title="JJWT简介"></a>JJWT简介</h3><h4 id="什么是JJWT"><a href="#什么是JJWT" class="headerlink" title="什么是JJWT"></a>什么是JJWT</h4><p>因为JWT只是一个标准，而针对java来说，有它对应的一套实现，叫JJWT，JJWT是一个提供端到端的 JWT 创建和验证的Java库。，JJW很容易使用和理解。它被设计成一个以建筑为中心的流畅界面，隐藏了它的大部分复杂性。</p><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a><strong>快速入门</strong></h4><h5 id="token的创建"><a href="#token的创建" class="headerlink" title="token的创建"></a>token的创建</h5><p>创建SpringBoot工程，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JJWT依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jJWT<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建测试类JWTTest，用于生成token：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTdemoApplicationTests</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建token</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreatToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//创建一个JWTBuilder对象</span></span><br><span class="line">      JWTBuilder JWTBuilder = JWTs.builder()</span><br><span class="line">            <span class="comment">//声明的标识&#123;"jti":"888"&#125;</span></span><br><span class="line">           .setId(<span class="string">"888"</span>)</span><br><span class="line">            <span class="comment">//主体，用户&#123;"sub":"Rose"&#125;</span></span><br><span class="line">           .setSubject(<span class="string">"Rose"</span>)</span><br><span class="line">            <span class="comment">//创建日期&#123;"ita":"xxxxxx"&#125;</span></span><br><span class="line">           .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">            <span class="comment">//签名手段，参数1：算法，参数2：盐</span></span><br><span class="line">           .signWith(SignatureAlgorithm.HS256,<span class="string">"xxxx"</span>);</span><br><span class="line">      <span class="comment">//生成JWT的token</span></span><br><span class="line">      String token = JWTBuilder.compact();</span><br><span class="line">      System.out.println(token);</span><br><span class="line">      <span class="comment">//三部分的base64解密</span></span><br><span class="line">      System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">      String[] split = token.split(<span class="string">"\\."</span>);</span><br><span class="line">      System.out.println(Base64Codec.BASE64.decodeToString(split[<span class="number">0</span>]));</span><br><span class="line">      System.out.println(Base64Codec.BASE64.decodeToString(split[<span class="number">1</span>]));</span><br><span class="line">      <span class="comment">//无法解密，会出现乱码</span></span><br><span class="line">      System.out.println(Base64Codec.BASE64.decodeToString(split[<span class="number">2</span>]));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="token的验证解析"><a href="#token的验证解析" class="headerlink" title="token的验证解析"></a>token的验证解析</h5><p>我们刚才已经创建了token ，在web应用中这个操作是由服务端进行然后发给客户端，客户端在下次向服务端发送请求时需要携带这个token（这就好像是拿着一张门票一样），那服务端接到这个token应该解析出token中的信息（例如用户id）,根据这些信息查询数据库返回相应的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParseToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//token</span></span><br><span class="line">   String token =</span><br><span class="line"> <span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiJSb3NlIiwiaWF0IjoxNTc4ODE0MjUyfQ"</span> +</span><br><span class="line">         <span class="string">".-FYFMHyfTcGzq900f_Drfdsges0ge2UjaWvPW9gCDto"</span>;</span><br><span class="line">   <span class="comment">//解析token获取,获取Claims，JWT负载中的声明对象</span></span><br><span class="line">   Claims claims = JWTs.parser()</span><br><span class="line">         <span class="comment">//私钥，即secret，也可以说是盐</span></span><br><span class="line">         .setSigningKey(<span class="string">"xxxx"</span>)</span><br><span class="line">         .parseClaimsJws(token)</span><br><span class="line">         .getBody();</span><br><span class="line">   <span class="comment">//打印声明的属性</span></span><br><span class="line">   System.out.println(<span class="string">"id:"</span>+claims.getId());</span><br><span class="line">   System.out.println(<span class="string">"subject:"</span>+claims.getSubject());</span><br><span class="line">   System.out.println(<span class="string">"issuedAt:"</span>+claims.getIssuedAt());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着将token或签名秘钥篡改一下，会发现运行时就会报错，所以解析token也就是验证token</p><h5 id="token过期校验"><a href="#token过期校验" class="headerlink" title="token过期校验"></a>token过期校验</h5><p>有很多时候，我们并不希望签发的token是永久生效的（上节的token是永久的），所以我们可以为token添加一个过期时间。原因：从服务器发出的token，服务器自己并不做记录，就存在一个弊端就是，服务端无法主动控制某token的立刻失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreatTokenHasExp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//当前系统时间的长整型</span></span><br><span class="line">   <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">   <span class="comment">//过期时间，这里是1分钟后的时间长整型</span></span><br><span class="line">   <span class="keyword">long</span> exp = now + <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">   <span class="comment">//创建一个JWTBuilder对象</span></span><br><span class="line">   JWTBuilder JWTBuilder = JWTs.builder()</span><br><span class="line">         <span class="comment">//声明的标识&#123;"jti":"888"&#125;</span></span><br><span class="line">         .setId(<span class="string">"888"</span>)</span><br><span class="line">         <span class="comment">//主体，用户&#123;"sub":"Rose"&#125;</span></span><br><span class="line">         .setSubject(<span class="string">"Rose"</span>)</span><br><span class="line">         <span class="comment">//创建日期&#123;"ita":"xxxxxx"&#125;</span></span><br><span class="line">         .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">         <span class="comment">//签名手段，参数1：算法，参数2：盐</span></span><br><span class="line">         .signWith(SignatureAlgorithm.HS256, <span class="string">"xxxx"</span>)</span><br><span class="line">         <span class="comment">//设置过期时间</span></span><br><span class="line">         .setExpiration(<span class="keyword">new</span> Date(exp));</span><br><span class="line">   <span class="comment">//生成JWT的token</span></span><br><span class="line">   String token = JWTBuilder.compact();</span><br><span class="line">   System.out.println(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParseTokenHasExp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//token</span></span><br><span class="line">   String token = <span class="string">"eyJhbGciOiJIUzI1NiJ9"</span> +</span><br><span class="line"><span class="string">".eyJqdGkiOiI4ODgiLCJzdWIiOiJSb3NlIiwiaWF0IjoxNTc4ODE1MDYyLCJleHAiOjE1Nzg4MTUxMj"</span> +</span><br><span class="line"><span class="string">"IsInJvbGVzIjoiYWRtaW4iLCJsb2dvIjoic2hzeHQuanBnIn0.hKog0RsZ9_6II_R8kUCp0HLAouUAYX"</span> +</span><br><span class="line"><span class="string">"AJVbz3xtLTUh4"</span>;</span><br><span class="line">   <span class="comment">//解析token获取负载中的声明对象</span></span><br><span class="line">   Claims claims = JWTs.parser()</span><br><span class="line">         .setSigningKey(<span class="string">"xxxx"</span>)</span><br><span class="line">         .parseClaimsJws(token)</span><br><span class="line">         .getBody();</span><br><span class="line">   <span class="comment">//打印声明的属性</span></span><br><span class="line">   System.out.println(<span class="string">"id:"</span> + claims.getId());</span><br><span class="line">   System.out.println(<span class="string">"subject:"</span> + claims.getSubject());</span><br><span class="line">   System.out.println(<span class="string">"issuedAt:"</span> + claims.getIssuedAt());</span><br><span class="line">   DateFormat sf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   System.out.println(<span class="string">"签发时间:"</span>+sf.format(claims.getIssuedAt()));</span><br><span class="line">   System.out.println(<span class="string">"过期时间:"</span>+sf.format(claims.getExpiration()));</span><br><span class="line">   System.out.println(<span class="string">"当前时间:"</span>+sf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：当未过期时可以正常读取，当过期时会引发io.jsonwebtoken.ExpiredJWTException异常。</p><h5 id="自定义claims"><a href="#自定义claims" class="headerlink" title="自定义claims"></a>自定义claims</h5><p>我们刚才的例子只是存储了id和subject两个信息，如果你想存储更多的信息（例如角色、权限等）可以自定义claims</p><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreatTokenByClaims</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//当前系统时间的长整型</span></span><br><span class="line">   <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">   <span class="comment">//过期时间，这里是1分钟后的时间长整型</span></span><br><span class="line">   <span class="keyword">long</span> exp = now + <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">   <span class="comment">//创建一个JWTBuilder对象</span></span><br><span class="line">   JWTBuilder JWTBuilder = JWTs.builder()</span><br><span class="line">         <span class="comment">//声明的标识&#123;"jti":"888"&#125;</span></span><br><span class="line">         .setId(<span class="string">"888"</span>)</span><br><span class="line">         <span class="comment">//主体，用户&#123;"sub":"Rose"&#125;</span></span><br><span class="line">        .setSubject(<span class="string">"Rose"</span>)</span><br><span class="line">         <span class="comment">//创建日期&#123;"ita":"xxxxxx"&#125;</span></span><br><span class="line">         .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">         <span class="comment">//签名手段，参数1：算法，参数2：盐</span></span><br><span class="line">         .signWith(SignatureAlgorithm.HS256, <span class="string">"xxxx"</span>)</span><br><span class="line">         <span class="comment">//设置过期时间</span></span><br><span class="line">         .setExpiration(<span class="keyword">new</span> Date(exp))</span><br><span class="line">         <span class="comment">//直接传入map</span></span><br><span class="line">         <span class="comment">// .addClaims(map)</span></span><br><span class="line">         .claim(<span class="string">"roles"</span>,<span class="string">"admin"</span>)</span><br><span class="line">         .claim(<span class="string">"logo"</span>,<span class="string">"shsxt.jpg"</span>);</span><br><span class="line">   <span class="comment">//生成JWT的token</span></span><br><span class="line">   String token = JWTBuilder.compact();</span><br><span class="line">   System.out.println(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParseTokenByClaims</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//token</span></span><br><span class="line">   String token = <span class="string">"eyJhbGciOiJIUzI1NiJ9"</span> +</span><br><span class="line"><span class="string">".eyJqdGkiOiI4ODgiLCJzdWIiOiJSb3NlIiwiaWF0IjoxNTc4ODE1MDYyLCJleHAiOjE1Nzg4MTUxMj"</span> +</span><br><span class="line"><span class="string">"IsInJvbGVzIjoiYWRtaW4iLCJsb2dvIjoic2hzeHQuanBnIn0.hKog0RsZ9_6II_R8kUCp0HLAouUAYX"</span> +</span><br><span class="line"><span class="string">"AJVbz3xtLTUh4"</span>;</span><br><span class="line">   <span class="comment">//解析token获取负载中的声明对象</span></span><br><span class="line">   Claims claims = JWTs.parser()</span><br><span class="line">         .setSigningKey(<span class="string">"xxxx"</span>)</span><br><span class="line">         .parseClaimsJws(token)</span><br><span class="line">         .getBody();</span><br><span class="line">   <span class="comment">//打印声明的属性</span></span><br><span class="line">   System.out.println(<span class="string">"id:"</span> + claims.getId());</span><br><span class="line">   System.out.println(<span class="string">"subject:"</span> + claims.getSubject());</span><br><span class="line">   System.out.println(<span class="string">"issuedAt:"</span> + claims.getIssuedAt());</span><br><span class="line">   DateFormat sf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   System.out.println(<span class="string">"签发时间:"</span>+sf.format(claims.getIssuedAt()));</span><br><span class="line">   System.out.println(<span class="string">"过期时间:"</span>+sf.format(claims.getExpiration()));</span><br><span class="line">   System.out.println(<span class="string">"当前时间:"</span>+sf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">   System.out.println(<span class="string">"roles:"</span>+claims.get(<span class="string">"roles"</span>));</span><br><span class="line">   System.out.println(<span class="string">"logo:"</span>+claims.get(<span class="string">"logo"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java中解析JWT中的内容"><a href="#Java中解析JWT中的内容" class="headerlink" title="Java中解析JWT中的内容"></a>Java中解析JWT中的内容</h5><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JWT依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jJWT<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改UserController类，使用jJWT工具类来解析请求头中<code>Authorization</code>中存储的JWT内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/getCurrentUser"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">      String header = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">      String token = header.substring(header.indexOf(<span class="string">"bearer"</span>) + <span class="number">7</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> JWTs.parser()</span><br><span class="line">           .setSigningKey(<span class="string">"test_key"</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">           .parseClaimsJws(token)</span><br><span class="line">           .getBody();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将令牌放入Authorization头中</p><h3 id="整合JWT"><a href="#整合JWT" class="headerlink" title="整合JWT"></a>整合JWT</h3><h4 id="新建JWT工具类"><a href="#新建JWT工具类" class="headerlink" title="新建JWT工具类"></a>新建JWT工具类</h4><p>用于生成和解析JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token过期时间为：1个星期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥 secret</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"6666"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateJWTToken</span><span class="params">(String account, Long accountId, Long employeeId, List&lt;String&gt; permissions)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String JWTToken = JWTs.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">"typ"</span>, <span class="string">"JWT"</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">"alg"</span>, <span class="string">"HS256"</span>)</span><br><span class="line"></span><br><span class="line">                .setSubject(<span class="string">"employee"</span>)</span><br><span class="line"></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + EXPIRE))</span><br><span class="line"></span><br><span class="line">                .claim(<span class="string">"account"</span>, account)</span><br><span class="line">                .claim(<span class="string">"accountId"</span>, accountId)</span><br><span class="line">                .claim(<span class="string">"employeeId"</span>, employeeId)</span><br><span class="line">                .claim(<span class="string">"permissions"</span>,permissions)</span><br><span class="line"></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, SECRET)</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JWTToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> JWTToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(String JWTToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(JWTToken)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JWTs.parser().setSigningKey(SECRET).parseClaimsJws(JWTToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断token是否已过期</span></span><br><span class="line">        <span class="keyword">return</span> JWTs.parser().setSigningKey(SECRET).parseClaimsJws(JWTToken).getBody().getExpiration().before(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String JWTToken = request.getHeader(<span class="string">"authorization"</span>);</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtils.isEmpty(JWTToken)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            JWTs.parser().setSigningKey(SECRET).parseClaimsJws(JWTToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token字符串获取：账户ID、员工ID、权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">getAccountIdByJWTToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = JWTs.parser().setSigningKey(SECRET).parseClaimsJws(token);</span><br><span class="line">        Claims claims = claimsJws.getBody();</span><br><span class="line">        map.put(<span class="string">"account"</span>,claims.get(<span class="string">"account"</span>));</span><br><span class="line">        map.put(<span class="string">"accountId"</span>,claims.get(<span class="string">"accountId"</span>));</span><br><span class="line">        map.put(<span class="string">"employeeId"</span>,claims.get(<span class="string">"employeeId"</span>));</span><br><span class="line">        map.put(<span class="string">"permissions"</span>,claims.get(<span class="string">"permissions"</span>));</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return (String)claims.get("employeeId");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="照着JWT的工作流程来："><a href="#照着JWT的工作流程来：" class="headerlink" title="照着JWT的工作流程来："></a><strong>照着JWT的工作流程来</strong>：</h4><h5 id="自定义登录成功后的处理器"><a href="#自定义登录成功后的处理器" class="headerlink" title="自定义登录成功后的处理器"></a>自定义登录成功后的处理器</h5><p>首先是登录成功后会给客户端会返回一个JWT token，所以我们首先自定义一个MyAuthenticationSuccessHandler实现AuthenticationSuccessHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.handler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 拿到登录用户信息</span></span><br><span class="line">        MyAccountDetails accountDetails = (MyAccountDetails) authentication.getPrincipal();</span><br><span class="line">        <span class="comment">// 获取需要生成token的值</span></span><br><span class="line">        Long accountId = accountDetails.getAccount().getAccountId();</span><br><span class="line">        String account = accountDetails.getAccount().getAccount();</span><br><span class="line">        Long employeeId = accountDetails.getAccount().getEmployeeId();</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = accountDetails.getAuthorities();</span><br><span class="line">        List&lt;String&gt; permissions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 权限的类型转换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; authorities.size(); i++) &#123;</span><br><span class="line">            permissions.add(String.valueOf(authorities.get(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成token</span></span><br><span class="line">        String token = JWTUtil.generateJWTToken(account, accountId, employeeId, permissions);</span><br><span class="line">        Result result = Result.ok().message(<span class="string">"登录成功"</span>).data(<span class="string">"token"</span>,token);</span><br><span class="line">        <span class="comment">// 以json格式，把返回值输出到页面</span></span><br><span class="line">        httpServletResponse.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JWT的拦截器"><a href="#JWT的拦截器" class="headerlink" title="JWT的拦截器"></a>JWT的拦截器</h5><p>让每个请求都需要验证JWT token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.filter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDetailsServiceImpl accountDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 拿到requset中的请求头</span></span><br><span class="line">        String authorizationHeader = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (authorizationHeader != <span class="keyword">null</span> &amp;&amp; authorizationHeader.startsWith(<span class="string">"Bearer "</span>)) &#123;</span><br><span class="line">            <span class="comment">// 截取Authorization中Bearer后面的部分   注意Bearer后面是有一个空格的 别漏了！！！</span></span><br><span class="line">            String token = authorizationHeader.substring(<span class="string">"Bearer "</span>.length());</span><br><span class="line">            <span class="comment">// 解析token获取账号</span></span><br><span class="line">            Map&lt;String, Object&gt; map = JWTUtil.getAccountIdByJWTToken(token);</span><br><span class="line">            String account = (String) map.get(<span class="string">"account"</span>);</span><br><span class="line">            <span class="comment">// 如果token没过期且SpringSecurity中不存在存在用户的信息</span></span><br><span class="line">            <span class="keyword">if</span> (account != <span class="keyword">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 重新认证授权</span></span><br><span class="line">                MyAccountDetails accountDetails = (MyAccountDetails)accountDetailsService.loadUserByUsername(account);</span><br><span class="line">                <span class="comment">// //判断是否存在这个用户</span></span><br><span class="line">                <span class="keyword">if</span> (accountDetails != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    UsernamePasswordAuthenticationToken authentication = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(accountDetails, <span class="keyword">null</span>, accountDetails.getAuthorities());</span><br><span class="line">                    authentication.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource().buildDetails(request));</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="屏蔽重定向的登录页面，自定义未登录或者token失效的统一处理"><a href="#屏蔽重定向的登录页面，自定义未登录或者token失效的统一处理" class="headerlink" title="屏蔽重定向的登录页面，自定义未登录或者token失效的统一处理"></a>屏蔽重定向的登录页面，自定义未登录或者token失效的统一处理</h5><p>自定义实现AuthenticationEntryPoint，用于在未登录是访问接口返回json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.spring_security.handler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="string">"尚未登录，或者登录过期"</span> + e.getMessage())));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义退出登录"><a href="#自定义退出登录" class="headerlink" title="自定义退出登录"></a>自定义退出登录</h5><p>自定义实现LogoutSuccessHandler，用于在退出登录返回json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title">LogoutSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="string">"退出成功"</span>)));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h4><p>用户虽说不能访问没有权限的功能了，但是异常没有处理。如果点击，如果前端也没有做错误的拦截的话，用户会看到一串的报错信息，这很不友好，并且也会对服务器造成压力。我们只需要捕获权限的异常即可。</p><p>这里分2大块的异常处理，一是关于认证的异常处理。二是关于权限的异常处理</p><h5 id="认证的异常处理"><a href="#认证的异常处理" class="headerlink" title="认证的异常处理"></a>认证的异常处理</h5><p>handler包下，新建CustomizeAuthenticationFailureHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Result result = Result.error();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span><br><span class="line">            result.message(<span class="string">"账号不存在"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException ) &#123;</span><br><span class="line">            result.message(<span class="string">"密码错误"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InternalAuthenticationServiceException) &#123;</span><br><span class="line">            result.message(<span class="string">"账号被禁用，请联系管理员"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">            result.message(<span class="string">"密码过期，请联系管理员!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">            result.message(<span class="string">"账户过期，请联系管理员!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.message(<span class="string">"登录失败!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="权限的异常处理"><a href="#权限的异常处理" class="headerlink" title="权限的异常处理"></a>权限的异常处理</h5><p>handler包下，新建CustomizeAccessDeniedHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="string">"没有权限，请联系管理员授权"</span>)));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将上述方法加入到SecurityConfig中的配置方法里"><a href="#将上述方法加入到SecurityConfig中的配置方法里" class="headerlink" title="将上述方法加入到SecurityConfig中的配置方法里"></a>将上述方法加入到SecurityConfig中的配置方法里</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里如果爆红不用管</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomizeAuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JWTAuthenticationTokenFilter JWTAuthenticationTokenFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomizeAuthenticationEntryPoint customizeAuthenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomizeAccessDeniedHandler accessDeniedHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomizeAuthenticationFailureHandler customizeAuthenticationFailureHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomizeLogoutSuccessHandler customizeLogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationProvider <span class="title">daoAuthenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaoAuthenticationProvider daoAuthenticationProvider = <span class="keyword">new</span> DaoAuthenticationProvider();</span><br><span class="line">        daoAuthenticationProvider.setUserDetailsService(userDetailsService);</span><br><span class="line">        <span class="comment">// 密码处理</span></span><br><span class="line">        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">        <span class="comment">// 要想抛出UsernameNotFoundException这个异常，就要设置成false，因为在源码里会把这个异常转为BadCredentialsException</span></span><br><span class="line">        daoAuthenticationProvider.setHideUserNotFoundExceptions(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> daoAuthenticationProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic().authenticationEntryPoint(customizeAuthenticationEntryPoint)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 拦截所有请求,登陆后能够访问</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .failureHandler(customizeAuthenticationFailureHandler)</span><br><span class="line">                .successHandler(authenticationSuccessHandler).permitAll()</span><br><span class="line">            .and()</span><br><span class="line">                .logout().logoutSuccessHandler(customizeLogoutSuccessHandler).permitAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加JWT拦截器</span></span><br><span class="line">        http.addFilterBefore(JWTAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 用户无权限异常处理</span></span><br><span class="line">        http.exceptionHandling().accessDeniedHandler(accessDeniedHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用自定义的认证提供器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.authenticationProvider(daoAuthenticationProvider());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><p>这里使用借助postman来测试</p><ol><li><p>在我们未携带JWT token信息时，访问localhost:8080/api/test接口</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%9C%AA%E7%99%BB%E5%BD%95%E6%BC%94%E7%A4%BA.jpg" alt="未登录演示"></p></li><li><p>进行登录测试，登录管理员账号，并复制其token</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E7%99%BB%E5%BD%95.jpg" alt="登录"></p></li><li><p>用管理员的token访问接口，发现已经可以正常访问了</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E6%88%90%E5%8A%9F.jpg" alt="管理员访问接口成功"></p></li><li><p>我们再次尝试另一个用户登录后获取到token访问该接口</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE.jpg" alt="没有权限访问"></p></li><li><p>当我们输入的账号不存在时</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E8%B4%A6%E5%8F%B7%E4%B8%8D%E5%AD%98%E5%9C%A8.jpg" alt="账号不存在"></p></li><li><p>密码错误</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF.jpg" alt="密码错误"></p></li><li><p>退出登录</p><p><img src="https://springsecurityimages.oss-cn-guangzhou.aliyuncs.com/springSecurityimages/%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95.jpg" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI和easyExcel</title>
      <link href="2021/05/29/POI%E5%92%8CeasyExcel/"/>
      <url>2021/05/29/POI%E5%92%8CeasyExcel/</url>
      
        <content type="html"><![CDATA[<h1 id="POI和easyExcel"><a href="#POI和easyExcel" class="headerlink" title="POI和easyExcel"></a>POI和easyExcel</h1><p>首先来说文件的读写跟excel的读写本质上没有区别，都是跟io相关，所以说用最原生的io也能做到excel的读写，但这样很麻烦，因此我们引用第三方的组件工具来加速我们的开发</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>开发中常用到excel的处理，如导出excel，导入excel到数据库中</p><p>操作excel目前比较流行的时<strong>Apache POI</strong> 和阿里巴巴的<strong>easyExcel</strong></p><h2 id="Excel格式分析格式分析"><a href="#Excel格式分析格式分析" class="headerlink" title="Excel格式分析格式分析"></a>Excel格式分析格式分析</h2><ul><li>xls是Microsoft Excel2007前excel的文件存储格式，实现原理是基于微软的ole db是微软com组件的一种实现，本质上也是一个微型数据库，由于微软的东西很多不开源，另外也已经被淘汰，了解它的细节意义不大，底层的编程都是基于微软的com组件去开发的。</li><li>xlsx是Microsoft Excel2007后excel的文件存储格式，实现是基于openXml和zip技术。这种存储简单，安全传输方便，同时处理数据也变的简单。</li><li>csv 我们可以理解为纯文本文件，可以被excel打开。他的格式非常简单，解析起来和解析文本文件一样。</li></ul><h2 id="组件对比"><a href="#组件对比" class="headerlink" title="组件对比"></a>组件对比</h2><h3 id="POI"><a href="#POI" class="headerlink" title="POI"></a>POI</h3><h4 id="Excel读写时候内存溢出"><a href="#Excel读写时候内存溢出" class="headerlink" title="Excel读写时候内存溢出"></a>Excel读写时候内存溢出</h4><p>大部分使用POI都是使用他的userModel模式。userModel的好处是上手容易使用简单，随便拷贝个代码跑一下，剩下就是写业务转换了，虽然转换也要写上百行代码，相对比较好理解。然而userModel模式最大的问题是在于非常大的内存消耗，一个几兆的文件解析要用掉上百兆的内存。现在很多应用采用这种模式，之所以还正常在跑一定是并发不大，并发上来后一定会OOM或者频繁的full gc。</p><h4 id="使用复杂和学习成本"><a href="#使用复杂和学习成本" class="headerlink" title="使用复杂和学习成本"></a>使用复杂和学习成本</h4><p>对POI有过深入了解的估计才知道原来POI还有SAX模式。但SAX模式相对比较复杂，excel有03和07两种版本，两个版本数据存储方式截然不同，sax解析方式也各不一样。想要了解清楚这两种解析方式，才去写代码测试，估计两天时间是需要的。再加上即使解析完，要转换到自己业务模型还要很多繁琐的代码。总体下来感觉至少需要三天，由于代码复杂，后续维护成本巨大。</p><p>而且由于我们的系统大多数都是大并发的情况下运行的，在大并发情况下，我们会发现poi存在一些bug。</p><p>poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但PO还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。</p><p><strong>总结上述来说：简单写法重度依赖内存，复杂写法学习成本高</strong></p><h4 id="基本类功能"><a href="#基本类功能" class="headerlink" title="基本类功能"></a>基本类功能</h4><ul><li>HSSF – 提供读写Microsoft Excel格式档案的功能</li><li>XSSF – 提供读写Microsoft Excel OOXML格式档案的功能（专门用来处理07版的excel，当然会还有一个SXSSF升级版(XSSF的优化)）</li><li>HWPF – 提供读写Microsoft Word格式档案的功能</li><li>HSLF – 提供读写Microsoft PowerPoint格式档案的功能</li><li>HDGF － 提供读写Microsoft Visio格式档案的功能</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>功能强大</li><li>代码书写繁冗</li><li>内存问题：读写大文件耗费内存较大，POI是先将数据都先加载到内存中，在写入文件，当数据量大时，容易OOM</li></ol><h3 id="easyExcel"><a href="#easyExcel" class="headerlink" title="easyExcel"></a>easyExcel</h3><h4 id="重写了POI对07版Excel的解析"><a href="#重写了POI对07版Excel的解析" class="headerlink" title="重写了POI对07版Excel的解析"></a>重写了POI对07版Excel的解析</h4><p>能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，并且再大的excel不会出现内存溢出，03版仍依赖POl的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p><p><img src="https://easyexcelimages.oss-cn-beijing.aliyuncs.com/excel%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B.png" alt></p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol><li>在数据模型层面进行了封装，<strong>使用简单</strong></li><li>重写了07版的Excel的解析代码，降低内存消耗，避免将全部全部数据一次加载到内存，采用sax模式一行一行解析，能有效避免OOM，两者有点像时间换空间，空间换时间的意思</li><li>只能操作excel</li><li>不能读取图片</li></ol><h2 id="POI-1"><a href="#POI-1" class="headerlink" title="POI"></a>POI</h2><h3 id="excel写"><a href="#excel写" class="headerlink" title="excel写"></a>excel写</h3><ol><li><p>打开idea，创建一个maven项目，然后删除src文件夹，再新建moudle</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xls(03)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xls(07)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期格式化工具 比官方的util.date好用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>03 | 07 版本的写，就只是对象不同，方法一样的</strong></p><p>需要注意：03版本和07版本存在兼容性问题，03版本最多只有65535行</p><p><strong>【分析】</strong></p><p>java万物皆对象，那么excel也是不例外的</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>然后我们只需要创建这些必要的对象，然后进行对应的操作即可</p><ol><li>工作簿(一个excel文件就是一个工作簿)</li><li>工作表</li><li>行列</li></ol><h4 id="03版本："><a href="#03版本：" class="headerlink" title="03版本："></a><strong>03版本：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelWriteTest03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String PATH = <span class="string">"H:\\code\\poiAndExcel\\"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">// 2.创建一个工作表(有簿才有表)</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">"sheet的名字在此更改，可缺省"</span>);</span><br><span class="line">        <span class="comment">// 3.创建一行(有表才有行) 0代表excel的第一行</span></span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 4.创建一个单元格(行列重叠处)，对应excel坐标为(1,1) 以下代码可以理解为一列</span></span><br><span class="line">        Cell cell11 = row1.createCell(<span class="number">0</span>);</span><br><span class="line">        cell11.setCellValue(<span class="string">"这周加班次数"</span>);</span><br><span class="line">        <span class="comment">// (1,2)</span></span><br><span class="line">        Cell cell12 = row1.createCell(<span class="number">1</span>);</span><br><span class="line">        cell12.setCellValue(<span class="number">666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二行 (2,1)</span></span><br><span class="line">        Row row2 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        Cell cell21 = row2.createCell(<span class="number">0</span>);</span><br><span class="line">        cell21.setCellValue(<span class="string">"统计时间"</span>);</span><br><span class="line">        <span class="comment">// (2,2)</span></span><br><span class="line">        Cell cell22 = row2.createCell(<span class="number">1</span>);</span><br><span class="line">        String time = <span class="keyword">new</span> DateTime().toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        cell22.setCellValue(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一张表(本质IO操作，IO操作就需要流处理) 03版本对应的扩展名xls</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(PATH + <span class="string">"excel的命名03.xls"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="07版本："><a href="#07版本：" class="headerlink" title="07版本："></a><strong>07版本：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelWriteTest07</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String PATH = <span class="string">"H:\\code\\poiAndExcel\\"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建工作簿 TODO 07版本只需要修改为XSSF</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">        <span class="comment">// 2.创建一个工作表(有簿才有表)</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">"sheet的名字在此更改，可缺省"</span>);</span><br><span class="line">        <span class="comment">// 3.创建一行(有表才有行) 0代表excel的第一行</span></span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 4.创建一个单元格(行列重叠处)，对应excel坐标为(1,1) 以下代码可以理解为一列</span></span><br><span class="line">        Cell cell11 = row1.createCell(<span class="number">0</span>);</span><br><span class="line">        cell11.setCellValue(<span class="string">"这周加班次数"</span>);</span><br><span class="line">        <span class="comment">// (1,2)</span></span><br><span class="line">        Cell cell12 = row1.createCell(<span class="number">1</span>);</span><br><span class="line">        cell12.setCellValue(<span class="number">666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二行 (2,1)</span></span><br><span class="line">        Row row2 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        Cell cell21 = row2.createCell(<span class="number">0</span>);</span><br><span class="line">        cell21.setCellValue(<span class="string">"统计时间"</span>);</span><br><span class="line">        <span class="comment">// (2,2)</span></span><br><span class="line">        Cell cell22 = row2.createCell(<span class="number">1</span>);</span><br><span class="line">        String time = <span class="keyword">new</span> DateTime().toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        cell22.setCellValue(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一张表(本质IO操作，IO操作就需要流处理) 03版本对应的扩展名xlsx</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(PATH + <span class="string">"excel的命名07.xlsx"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】这两个版本就是对象的区别和文件名后缀的区别</p><p>数据的批量写入</p><blockquote><p>大文件写HSSF</p></blockquote><p>缺点：最多只能处理到第65536行，否则会抛出异常</p><p><code>java.lang.IllegalArgumentException: Invalid row number (65536) outside allowable range (0..65535)</code></p><p>优点：过程写入缓存，不操作磁盘，最后一次性写入磁盘，速度快</p><p>以下的代码其实跟上述的03版本是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite03BigData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 开始时间</span></span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 创建工作簿</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">    <span class="comment">// 创建一个工作表(有簿才有表)</span></span><br><span class="line">    Sheet sheet = workbook.createSheet(<span class="string">"sheet的名字在此更改，可缺省"</span>);</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">65536</span>; rowNum++) &#123;</span><br><span class="line">        Row row = sheet.createRow(rowNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> colNum = <span class="number">0</span>; colNum &lt; <span class="number">10</span>; colNum++) &#123;</span><br><span class="line">            Cell cell = row.createCell(colNum);</span><br><span class="line">            cell.setCellValue(colNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成一张表(本质IO操作，IO操作就需要流处理) 03版本对应的扩展名xls</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(PATH + <span class="string">"excel的命名03BigData.xls"</span>);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    workbook.write(fileOutputStream);</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println((<span class="keyword">double</span>)(end - begin) / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得出的时间为0.662</span></span><br></pre></td></tr></table></figure><blockquote><p>大文件写XSSF</p></blockquote><p>缺点：写数据时速度慢，非常耗内存，也会发生内存溢出，如100w条</p><p>优点：可以写较大的数据量（不局限于65536，因为是操作07版的excel）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07BigData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 开始时间</span></span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 创建工作簿</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">    <span class="comment">// 创建一个工作表(有簿才有表)</span></span><br><span class="line">    Sheet sheet = workbook.createSheet(<span class="string">"sheet的名字在此更改，可缺省"</span>);</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">65537</span>; rowNum++) &#123;</span><br><span class="line">        Row row = sheet.createRow(rowNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> colNum = <span class="number">0</span>; colNum &lt; <span class="number">10</span>; colNum++) &#123;</span><br><span class="line">            Cell cell = row.createCell(colNum);</span><br><span class="line">            cell.setCellValue(colNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成一张表(本质IO操作，IO操作就需要流处理) 03版本对应的扩展名xls</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(PATH + <span class="string">"excel的命名07BigData.xlsx"</span>);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    workbook.write(fileOutputStream);</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println((<span class="keyword">double</span>)(end - begin) / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得出的时间为4.978</span></span><br></pre></td></tr></table></figure><blockquote><p>大文件写SXSSF</p></blockquote><p>优点：它其实就是XSSF的一个优化，可以写大数据量，而且写数据速度快，占用更少的内存</p><p>【注意】</p><p>过程中会产生临时文件，需要清理临时文件</p><p>默认由100条记录被保存在内存中，如果超过这数量，则最前面的数据被写入临时文件</p><p>如果想自定义内存中数据的数量，可以使用new SXSSFWorkbook(数量)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07BigDataS</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 开始时间</span></span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 创建工作簿</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> SXSSFWorkbook();</span><br><span class="line">    <span class="comment">// 创建一个工作表(有簿才有表)</span></span><br><span class="line">    Sheet sheet = workbook.createSheet(<span class="string">"sheet的名字在此更改，可缺省"</span>);</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">65537</span>; rowNum++) &#123;</span><br><span class="line">        Row row = sheet.createRow(rowNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> colNum = <span class="number">0</span>; colNum &lt; <span class="number">10</span>; colNum++) &#123;</span><br><span class="line">            Cell cell = row.createCell(colNum);</span><br><span class="line">            cell.setCellValue(colNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成一张表(本质IO操作，IO操作就需要流处理) 03版本对应的扩展名xls</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(PATH + <span class="string">"excel的命名07BigDataS.xlsx"</span>);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    workbook.write(fileOutputStream);</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">    <span class="comment">// 清空临时文件</span></span><br><span class="line">    ((SXSSFWorkbook)workbook).dispose();</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println((<span class="keyword">double</span>)(end - begin) / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得出的时间为0.962</span></span><br></pre></td></tr></table></figure><p>SXSSFWorkbook-来至官方的解释：实现”BigGridDemo”策略的流式XSSFWorkbook版本。这允许写入非常大的文件而不会耗尽内存，因为任何时候只有可配置的行部分被保存在内存中。<br>请注意，仍然可能会消耗大量内存，这些内存基于您正在使用的功能，例如合并区域，注释.…….仍然只存储在内存中，因此如果广泛使用，可能需要大量内存。</p><h3 id="Excel读"><a href="#Excel读" class="headerlink" title="Excel读"></a>Excel读</h3><h4 id="03版本"><a href="#03版本" class="headerlink" title="03版本"></a>03版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelReadTest03</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String PATH = <span class="string">"H:\\code\\poiAndExcel\\"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文件流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(PATH + <span class="string">"excel的命名03.xls"</span>);</span><br><span class="line">        <span class="comment">// 读取到工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">// 得到第一个表</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 以下两行代码表示得到第一个单元格</span></span><br><span class="line">        Row row = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">        Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// getStringCellValue：获取字符串</span></span><br><span class="line">        <span class="comment">// getNumericCellValue：获取数值</span></span><br><span class="line">        <span class="comment">// 读取值的时候一定要注意类型，不然会报错，这里是个麻烦地方</span></span><br><span class="line">        System.out.println(cell.getStringCellValue());</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】获取值的类型</p><h4 id="07版本"><a href="#07版本" class="headerlink" title="07版本"></a>07版本</h4><p>与03版本的读取没太多区别，注意对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelReadTest07</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String PATH = <span class="string">"H:\\code\\poiAndExcel\\"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead07</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(PATH + <span class="string">"excel的命名07.xlsx"</span>);</span><br><span class="line">        <span class="comment">// 读取到工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">// 得到第一个表</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 以下两行代码表示得到第一个单元格</span></span><br><span class="line">        Row row = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">        Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// getStringCellValue：获取字符串</span></span><br><span class="line">        <span class="comment">// getNumericCellValue：获取数值</span></span><br><span class="line">        <span class="comment">// 读取值的时候一定要注意类型，不然会报错，这里是个麻烦地方</span></span><br><span class="line">        System.out.println(cell.getStringCellValue());</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取不同的数据类型（大头），下次使用可以直接cv"><a href="#读取不同的数据类型（大头），下次使用可以直接cv" class="headerlink" title="读取不同的数据类型（大头），下次使用可以直接cv"></a>读取不同的数据类型（大头），下次使用可以直接cv</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCellType</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String path = <span class="string">"H:\\code\\poiAndExcel\\test03.xls"</span>;</span><br><span class="line">    <span class="comment">// 获取文件流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">    <span class="comment">// 读取到工作簿</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(in);</span><br><span class="line">    <span class="comment">// 得到第一个表格</span></span><br><span class="line">    Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 获取标题内容</span></span><br><span class="line">    Row rowTitle = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (rowTitle != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 一行有多少列有数据</span></span><br><span class="line">        <span class="keyword">int</span> cellCount = rowTitle.getPhysicalNumberOfCells();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>;cellNum &lt; cellCount; cellNum++)&#123;</span><br><span class="line">            Cell cell = rowTitle.getCell(cellNum);</span><br><span class="line">            <span class="keyword">if</span> (cell != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 获取值的类型(老版本是返回int值) 但注意：现在的版本中 CellType封装了这些值</span></span><br><span class="line">                CellType cellType = cell.getCellType();</span><br><span class="line">                String stringCellValue = cell.getStringCellValue();</span><br><span class="line">                System.out.print(stringCellValue + <span class="string">" | "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面的内容只是展示如何获取一行中有值的个数</span></span><br><span class="line">    <span class="comment">// 获取表中的内容</span></span><br><span class="line">    <span class="keyword">int</span> physicalNumberOfRows = sheet.getPhysicalNumberOfRows();</span><br><span class="line">    <span class="comment">// 从第2行开始读</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> rowNum = <span class="number">1</span>;rowNum&lt;physicalNumberOfRows;rowNum++)&#123;</span><br><span class="line">        Row rowData = sheet.getRow(rowNum);</span><br><span class="line">        <span class="keyword">if</span> (rowData != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 读取列</span></span><br><span class="line">            <span class="keyword">int</span> cellCount = rowTitle.getPhysicalNumberOfCells();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cellNum=<span class="number">0</span>; cellNum &lt; cellCount; cellNum++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"["</span> +(rowNum+<span class="number">1</span>) + <span class="string">"-"</span> + (cellNum+<span class="number">1</span>) + <span class="string">"]"</span>);</span><br><span class="line">                Cell cell = rowData.getCell(cellNum);</span><br><span class="line">                <span class="comment">//匹配列的数据类型</span></span><br><span class="line">                <span class="keyword">if</span> (cell != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    CellType cellType = cell.getCellType();</span><br><span class="line">                    Object cellValue = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">switch</span> (cellType)&#123;</span><br><span class="line">                        <span class="keyword">case</span> STRING:</span><br><span class="line">                            System.out.print(<span class="string">"【String】"</span>);</span><br><span class="line">                            cellValue = cell.getStringCellValue();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                            System.out.print(<span class="string">"【Boolean】"</span>);</span><br><span class="line">                            cellValue = cell.getBooleanCellValue();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> BLANK:</span><br><span class="line">                            System.out.print(<span class="string">"【Blank】"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> NUMERIC:</span><br><span class="line">                            <span class="comment">//数字（日期、普通数字）</span></span><br><span class="line">                            System.out.print(<span class="string">"【Numeric】"</span>);</span><br><span class="line">                            <span class="keyword">if</span> (HSSFDateUtil.isCellDateFormatted(cell))&#123;</span><br><span class="line">                                <span class="comment">// 日期</span></span><br><span class="line">                                System.out.print(<span class="string">"【日期】"</span>);</span><br><span class="line">                                Date dateCellValue = cell.getDateCellValue();</span><br><span class="line">                                cellValue = <span class="keyword">new</span> DateTime(dateCellValue).toString(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 不是日期格式，防止数字过长</span></span><br><span class="line">                                System.out.print(<span class="string">"【转换为字符串输出】"</span>);</span><br><span class="line">                                cell.setCellType(CellType.STRING);</span><br><span class="line">                                cellValue = cell.toString();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> ERROR:</span><br><span class="line">                            System.out.print(<span class="string">"【Error，数据类型错误】"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(cellValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要提取为一个工具类，只需要把<code>FileInputStream in</code>作为参数传进来即可</p><h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormula</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"H:\\code\\poiAndExcel\\公式.xls"</span>);</span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(in);</span><br><span class="line">    Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结合以下代码，如果此单元格不是公式的话，是打印不出结果的，也不会报错</span></span><br><span class="line">    Row row = sheet.getRow(<span class="number">4</span>);</span><br><span class="line">    Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拿到计算公式 (面向接口编程)</span></span><br><span class="line">    FormulaEvaluator FormulaEvaluator = <span class="keyword">new</span> HSSFFormulaEvaluator((HSSFWorkbook)workbook);</span><br><span class="line">    <span class="comment">// 输出单元格的内容</span></span><br><span class="line">    CellType cellType = cell.getCellType();</span><br><span class="line">    <span class="keyword">switch</span> (cellType)&#123;</span><br><span class="line">        <span class="keyword">case</span> FORMULA:</span><br><span class="line">            <span class="comment">// 得到公式</span></span><br><span class="line">            String cellFormula = cell.getCellFormula();</span><br><span class="line">            System.out.println(cellFormula);<span class="comment">// 输出 SUM(A2:A4)</span></span><br><span class="line">            <span class="comment">// 计算</span></span><br><span class="line">            CellValue evaluate = FormulaEvaluator.evaluate(cell);</span><br><span class="line">            <span class="comment">// 格式化为字符串</span></span><br><span class="line">            String cellValue = evaluate.formatAsString();</span><br><span class="line">            System.out.println(cellValue);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="easyExcel-1"><a href="#easyExcel-1" class="headerlink" title="easyExcel"></a>easyExcel</h2><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="简单读"><a href="#简单读" class="headerlink" title="简单读"></a>简单读</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">单实体导入</span><br><span class="line">导入Excel学员信息到系统。</span><br><span class="line">包含如下列：姓名、性别、出生日期</span><br><span class="line">模板详见：学生信息.xls</span><br><span class="line"></span><br><span class="line">学生姓名学生性别学生出生日期</span><br><span class="line">   张三  男      <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span></span><br><span class="line">   李四  男        <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span></span><br><span class="line">   王五  男       <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span></span><br><span class="line">   赵六  男       <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span></span><br><span class="line">   孙七  男       <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span> </span><br><span class="line">   周八  男       <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span></span><br><span class="line">   吴九  男       <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span></span><br><span class="line">   郑十  男       <span class="number">2021</span>/<span class="number">5</span>/<span class="number">29</span></span><br></pre></td></tr></table></figure><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要注意这里 定义的顺序要和excel表头要对应</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="读取Excel文件"><a href="#读取Excel文件" class="headerlink" title="读取Excel文件"></a>读取<code>Excel</code>文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">easyExcelReadTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里的思想跟poi是一样的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathName 要读的文件的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 文件中每一行数据要存储到的实体类型的class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> readListener 读监听器，每读一行内容，都会调用一次该对象的invoke，在invoke可以操作使用读取到的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 1.获取一个工作簿对象，读取完之后会自动关闭</span></span><br><span class="line">    String fileName = <span class="string">"H:\\code\\poiAndExcel\\学生信息表.xlsx"</span>;</span><br><span class="line">    ExcelReaderBuilder readWorkbook = EasyExcel.read(fileName, Student<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">StudentListener</span>())</span>;</span><br><span class="line">    <span class="comment">// 2.获取工作表对象 默认读取第一个工作表</span></span><br><span class="line">    ExcelReaderSheetBuilder sheet = readWorkbook.sheet();</span><br><span class="line">    <span class="comment">// 3.读取工作表的内容</span></span><br><span class="line">    sheet.doRead();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以上三行代码，如果用链式编程，一行就可以实现了</span></span><br><span class="line">    <span class="comment">// EasyExcel.read(fileName,Student.class,new StudentListener()).sheet().doRead();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="读取Excel的监听器，用于处理读取产生的数据"><a href="#读取Excel的监听器，用于处理读取产生的数据" class="headerlink" title="读取Excel的监听器，用于处理读取产生的数据"></a>读取Excel的监听器，用于处理读取产生的数据</h5><p>新建listener包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读监听器，每读一行内容，都会调用一次该对象的invoke，在invoke可以操作使用读取到的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student 每次读取到的数据封装的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Student student, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"student = + "</span> + student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取完整个文档后调用的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单的写"><a href="#简单的写" class="headerlink" title="简单的写"></a>简单的写</h4><h5 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单实体导出</span><br><span class="line">导出多个学生对象到Excel表格</span><br><span class="line">包含如下列：姓名、性别、出生日期</span><br></pre></td></tr></table></figure><h5 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要注意这里 定义的顺序要和excel表头要对应，也可以用index指定</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ColumnWidth</span>(<span class="number">20</span>) <span class="comment">// 宽度</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value表示输出的含义，index表示顺序</span></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"姓名"</span>,index = <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//@ColumnWidth(10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"出生日期"</span>,index = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"性别"</span>,index = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"编号"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span> <span class="comment">// 不输出此字段</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="准备数据并写入文件"><a href="#准备数据并写入文件" class="headerlink" title="准备数据并写入文件"></a>准备数据并写入文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">easyExcelWriteTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathName 要写入的文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 封装写入的数据的实体的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 1.工作簿对象</span></span><br><span class="line">    ExcelWriterBuilder writeWorkbook = EasyExcel.write(<span class="string">"写入学生信息.xlsx"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 2.工作表对象</span></span><br><span class="line">    ExcelWriterSheetBuilder sheet = writeWorkbook.sheet();</span><br><span class="line">    <span class="comment">// 3.写</span></span><br><span class="line">    sheet.doWrite(initData());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备的数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        student.setName(<span class="string">"姓名0"</span> + i);</span><br><span class="line">        student.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">        student.setGender(<span class="string">"男"</span>);</span><br><span class="line">        students.add(student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><table><thead><tr><th>姓名</th><th>性别</th><th>出生日期</th></tr></thead><tbody><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr><tr><td>姓名09</td><td>男</td><td>2021-05-29 20:18:53</td></tr></tbody></table><h4 id="对接数据库"><a href="#对接数据库" class="headerlink" title="对接数据库"></a>对接数据库</h4><p><a href="https://www.yuque.com/easyexcel/doc/read#8e72a573" target="_blank" rel="noopener">官方Demo</a></p><h3 id="常用API及注解"><a href="#常用API及注解" class="headerlink" title="常用API及注解"></a>常用API及注解</h3><h4 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h4><ul><li><p><strong>EasyExcel</strong> 入口类，用于构建开始各种操作；</p></li><li><p><strong>ExcelReaderBuilder</strong> <strong>ExcelWriterBuilder</strong> 构建出一个 ReadWorkbook对象  WriteWorkbook对象，可以理解成一个excel对象(即一个工作簿对象)，对应的是一个Excel文件，一个excel只要构建一个</p></li><li><p><strong>ExcelReaderSheetBuilder</strong>  <strong>ExcelWriterSheetBuilder</strong> 构建出一个ReadSheet对象  WriteSheet对象，即一个工作表的对象，对应的Excel中的每个sheet，一个工作簿可以有多个工作表；</p></li><li><p><strong>ReadListener</strong> 在每一行读取完毕后都会调用ReadListener来处理数据，我们可以把调用<strong>service的代码</strong>可以写在其<strong>invoke</strong>方法内部；</p></li><li><p><strong>WriteHandler</strong> 在每一个操作包括创建单元格、创建表格等都会调用WriteHandler来处理数据，对使用者透明不可见；</p></li><li><p><strong>所有配置都是继承的</strong> Workbook的配置会被Sheet继承。所以在用EasyExcel设置参数的时候，在EasyExcel…sheet()方法之前作用域是整个sheet，之后针对单个sheet。</p><p>即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExcelWriterBuilder writeWorkbook = EasyExcel.write(<span class="string">"写入学生信息.xlsx"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//在这里设置，因为sheet是通过writeWorkbook生成的，所以在这里配置的话，所有sheet都会生效</span></span><br><span class="line">ExcelWriterSheetBuilder sheet = writeWorkbook.sheet();</span><br></pre></td></tr></table></figure></li></ul><h4 id="读取时的注解"><a href="#读取时的注解" class="headerlink" title="读取时的注解"></a>读取时的注解</h4><h5 id="ExcelProperty"><a href="#ExcelProperty" class="headerlink" title="@ExcelProperty"></a>@ExcelProperty</h5><p><strong>使用位置</strong>：标准作用在成员变量上，把实体类中的属性和excel表关联起来</p><p><strong>可选属性：</strong></p><table><thead><tr><th>属性名</th><th align="left">含义</th><th>说明</th></tr></thead><tbody><tr><td>index</td><td align="left">对应Excel表中的列数</td><td>默认-1，建议指定时从0开始</td></tr><tr><td>value</td><td align="left">对应Excel表中的列头</td><td></td></tr><tr><td>converter</td><td align="left">成员变量转换器</td><td>自定义转换器需要实Converter接口(类型转换，一般用不着)</td></tr></tbody></table><p><strong>使用效果</strong>：index属性可以指定当前字段对应excel中的哪一列，可以根据列名value去匹配，也可以不写。</p><p>如果不使用@ExcelProperty注解，成员变量从上到下的顺序，对应表格中从左到右的顺序；</p><p><strong>使用建议：</strong>要么全部不写，要么全部用index，要么全部用名字去匹配，<strong>尽量不要三个混着用</strong>。</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 修改成员变量顺序读取Excel表格</span></span><br><span class="line"><span class="comment">// 2. 修改index属性值读取Excel表格</span></span><br><span class="line"><span class="comment">// 3. 修改value属性值读取Excel表格</span></span><br></pre></td></tr></table></figure><h5 id="ExcelIgnore"><a href="#ExcelIgnore" class="headerlink" title="@ExcelIgnore"></a>@ExcelIgnore</h5><p>标注在成员变量上，默认所有字段都会和excel去匹配，加了这个注解会忽略该字段</p><p> <strong>代码演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 忽略id成员变量值读取Excel表格</span></span><br></pre></td></tr></table></figure><h5 id="DateTimeFormat"><a href="#DateTimeFormat" class="headerlink" title="@DateTimeFormat"></a>@DateTimeFormat</h5><p>标注在成员变量上，日期转换，代码中用<code>String类型的成员变量</code>去接收<code>excel中日期格式的数据</code>会调用这个注解。里面的<code>value</code>参照<code>java.text.SimpleDateFormat</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. 按照指定的格式写入Excel内容</span></span><br><span class="line"> <span class="meta">@DateTimeFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure><h5 id="NumberFormat"><a href="#NumberFormat" class="headerlink" title="@NumberFormat"></a>@NumberFormat</h5><p>标注在成员变量上，数字转换，代码中用<code>String类型的成员变量</code>去接收<code>excel数字格式的数据</code>会调用这个注解。里面的<code>value</code>参照<code>java.text.DecimalFormat</code></p><h4 id="读取时通用参数"><a href="#读取时通用参数" class="headerlink" title="读取时通用参数"></a>读取时通用参数</h4><p><code>ReadWorkbook</code>,<code>ReadSheet</code> 都会有的参数，如果为空，默认使用上级。</p><ul><li><code>converter</code> 转换器，默认加载了很多转换器。也可以自定义。</li><li><code>readListener</code> 监听器，在读取数据的过程中会不断的调用监听器。</li><li><code>headRowNumber</code> 指定需要读表格的 列头行数。默认有一行头，也就是认为第二行开始起为数据。</li><li><code>head</code> 与<code>clazz</code>二选一。读取文件头对应的列表，会根据列表匹配数据。建议使用clas，就是文件中每一行数据对应的代码中的实体类型。</li><li><code>clazz</code> 与<code>head</code>二选一。读取文件的头对应的class，也可以使用注解。如果两个都不指定，则会读取全部数据。</li><li><code>autoTrim</code> 字符串、表头等数据自动trim</li><li><code>password</code> 读的时候是否需要使用密码</li></ul><h3 id="ReadWorkbook（工作簿对象）参数"><a href="#ReadWorkbook（工作簿对象）参数" class="headerlink" title="ReadWorkbook（工作簿对象）参数"></a>ReadWorkbook（工作簿对象）参数</h3><ul><li><code>excelType</code> 当前excel的类型，读取时会自动判断，无需设置。</li><li><code>inputStream</code> 与<code>file</code>二选一。建议使用file。</li><li><code>file</code> 与<code>inputStream</code>二选一。读取文件的文件。</li><li><code>autoCloseStream</code> 自动关闭流。</li><li><code>readCache</code> 默认小于5M用 内存，超过5M会使用 <code>EhCache</code>，不建议使用这个参数。</li><li><code>useDefaultListener</code> <code>@since 2.1.4</code> 默认会加入<code>ModelBuildEventListener</code> 来帮忙转换成传入<code>class</code>的对象，设置成<code>false</code>后将不会协助转换对象，自定义的监听器会接收到<code>Map&lt;Integer,CellData&gt;</code>对象，如果还想继续接听到<code>class</code>对象，请调用<code>readListener</code>方法，加入自定义的<code>beforeListener</code>、 <code>ModelBuildEventListener</code>、 自定义的<code>afterListener</code>即可。</li></ul><h3 id="5、ReadSheet（工作表对象）参数"><a href="#5、ReadSheet（工作表对象）参数" class="headerlink" title="5、ReadSheet（工作表对象）参数"></a>5、ReadSheet（工作表对象）参数</h3><ul><li><code>sheetNo</code> 需要读取Sheet的编号，建议使用这个来指定读取哪个Sheet</li><li><code>sheetName</code> 根据名字去匹配Sheet，excel 2003不支持根据名字去匹配</li></ul><h3 id="6、写入时的注解注解"><a href="#6、写入时的注解注解" class="headerlink" title="6、写入时的注解注解"></a>6、写入时的注解注解</h3><h4 id="ExcelProperty-1"><a href="#ExcelProperty-1" class="headerlink" title="@ExcelProperty"></a>@ExcelProperty</h4><p><strong>使用位置</strong>：标准作用在成员变量上</p><p><strong>可选属性：</strong></p><table><thead><tr><th>属性名</th><th align="left">含义</th><th>说明</th></tr></thead><tbody><tr><td>index</td><td align="left">对应Excel表中的列数</td><td>默认-1，指定时建议从0开始</td></tr><tr><td>value</td><td align="left">对应Excel表中的列头</td><td></td></tr><tr><td>converter</td><td align="left">成员变量转换器</td><td>自定义转换器需要实Converter接口</td></tr></tbody></table><p><strong>使用效果</strong>：<code>index</code> 指定写到第几列，如果不指定则根据成员变量位置排序；</p><p>​                     <code>value</code>指定写入的列头，如果不指定则使用成员变量的名字作为列头；</p><p>​                    如果要设置复杂的头，可以为value指定多个值。</p><p><strong>代码演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. 为《杭州黑马学员表.xlsx》文件中学生信息设置一个统一的表头“杭州黑马学员信息表”</span></span><br></pre></td></tr></table></figure><h4 id="其他注解："><a href="#其他注解：" class="headerlink" title="其他注解："></a>其他注解：</h4><p>基本和读取时一致</p><ul><li><p>@ContentRowHeight()    标注在类上或属性上，指定内容行高</p></li><li><p>@HeadRowHeight()  标注在类上或属性上，指定列头行高</p></li><li><p>@ColumnWidth() 标注在类上或属性上，指定列宽</p></li><li><p>ExcelIgnore` 默认所有字段都会写入excel，这个注解会忽略这个字段</p></li><li><p><code>DateTimeFormat</code> 日期转换，将<code>Date</code>写到excel会调用这个注解。里面的<code>value</code>参照<code>java.text.SimpleDateFormat</code></p></li><li><p><code>NumberFormat</code> 数字转换，用<code>Number</code>写excel会调用这个注解。里面的<code>value</code>参照<code>java.text.DecimalFormat</code></p></li><li><p><code>ExcelIgnoreUnannotated</code> 默认不加 <code>ExcelProperty</code> 的注解的都会参与读写，加了不会参与</p></li></ul><h3 id="7、写入时通用参数"><a href="#7、写入时通用参数" class="headerlink" title="7、写入时通用参数"></a>7、写入时通用参数</h3><p><code>WriteWorkbook</code>、<code>WriteSheet</code>都会有的参数，如果为空，默认使用上级。</p><ul><li><p><code>converter</code> 转换器，默认加载了很多转换器。也可以自定义。</p></li><li><p><code>writeHandler</code> 写的处理器。可以实现<code>WorkbookWriteHandler</code>,<code>SheetWriteHandler</code>,<code>RowWriteHandler</code>,<code>CellWriteHandler</code>，在写入excel的不同阶段会调用，对使用者透明不可见。</p></li><li><p><code>relativeHeadRowIndex</code> 距离多少行后开始。也就是开头空几行</p></li><li><p><code>needHead</code> 是否导出头</p></li><li><p><code>head</code> 与<code>clazz</code>二选一。写入文件的头列表，建议使用class。</p></li><li><p><code>clazz</code> 与<code>head</code>二选一。写入文件的头对应的class，也可以使用注解。</p></li><li><p><code>autoTrim</code>  字符串、表头等数据自动trim</p></li></ul><h3 id="8、WriteWorkbook（工作簿对象）参数"><a href="#8、WriteWorkbook（工作簿对象）参数" class="headerlink" title="8、WriteWorkbook（工作簿对象）参数"></a>8、WriteWorkbook（工作簿对象）参数</h3><ul><li><p><code>excelType</code> 当前excel的类型，默认为<code>xlsx</code></p></li><li><p><code>outputStream</code> 与<code>file</code>二选一。写入文件的流</p></li><li><p><code>file</code> 与<code>outputStream</code>二选一。写入的文件</p></li><li><p><code>templateInputStream</code> 模板的文件流</p></li><li><p><code>templateFile</code> 模板文件</p></li><li><p><code>autoCloseStream</code> 自动关闭流。</p></li><li><p><code>password</code>  写的时候是否需要使用密码</p></li><li><p><code>useDefaultStyle</code> 写的时候是否是使用默认头</p></li></ul><h3 id="9、WriteSheet（工作表对象）参数"><a href="#9、WriteSheet（工作表对象）参数" class="headerlink" title="9、WriteSheet（工作表对象）参数"></a>9、WriteSheet（工作表对象）参数</h3><ul><li><p><code>sheetNo</code> 需要写入的编号。默认0</p></li><li><p><code>sheetName</code> 需要些的Sheet名称，默认同sheetNo</p></li></ul><h2 id="easyExcel实战"><a href="#easyExcel实战" class="headerlink" title="easyExcel实战"></a>easyExcel实战</h2><p>通过下载好的模块，把数据导入数据库</p><p>效果图：</p><p><img src="https://easyexcelimages.oss-cn-beijing.aliyuncs.com/excel%E6%A8%A1%E6%9D%BF%E5%9B%BE.png" alt></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板下载"><a href="#模板下载" class="headerlink" title="模板下载"></a>模板下载</h3><ol><li><p>WriteExcel 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteExcel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String bigTitle= <span class="string">"填写须知： \n"</span> +</span><br><span class="line">            <span class="string">"1.第1、2行为固定结构，不可更改\n"</span> +</span><br><span class="line">            <span class="string">"2.请严格按照填写规则输入数据，不合规的数据无法成功导入\n"</span> +</span><br><span class="line">            <span class="string">"3.无特殊说明则为必填项"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"工号"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer employeeNumber;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"职位编号"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String positionId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"员工编号"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String employeeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"姓名"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"姓名"</span>&#125;,index = <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"性别"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"性别"</span>&#125;,index = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeeGender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"手机号码"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"手机号码"</span>&#125;,index = <span class="number">2</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeePhone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"邮箱"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"邮箱"</span>&#125;,index = <span class="number">3</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeeEmail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"出生年月日"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"出生年月日\n(格式:yyyy-MM-dd)"</span>&#125;,index = <span class="number">4</span>)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(value = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeeBirth;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"毕业院校"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"毕业院校"</span>&#125;,index = <span class="number">5</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeeGraduateCollege;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"身份证号码"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"身份证号码"</span>&#125;,index = <span class="number">6</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeeIdCard;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"员工状态"</span>&#125;,index = <span class="number">7</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"员工状态"</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer employeeStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"职位"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"职位"</span>&#125;,index = <span class="number">8</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> String positionName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"角色"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"角色"</span>&#125;,index = <span class="number">9</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer role;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"部门"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"部门"</span>&#125;,index = <span class="number">10</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"部门负责人\n(没有就填无)"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"部门负责人\n(没有就填无)"</span>&#125;,index = <span class="number">11</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> String leaderName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"入职时间"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"入职时间\n(格式:yyyy/MM/dd HH:mm)"</span>&#125;,index = <span class="number">12</span>)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(value = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"详细住址"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = &#123;bigTitle,<span class="string">"详细住址(省、市、区/县、街道/镇)"</span>&#125;,index = <span class="number">13</span>)</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String employeeDetailAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"省份"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String employeeProvinceAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"城市"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String employeeCityAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"区/县"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String employeeDistrictAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"街道/镇"</span>)</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String employeeStreetAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下载模板controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/getDemo"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"下载模板"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDemo</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String fileName = <span class="string">"导入模板"</span>;</span><br><span class="line">        String sheetName = <span class="string">"员工信息表"</span>;</span><br><span class="line">        <span class="comment">// 表头的策略</span></span><br><span class="line">        WriteCellStyle headWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">// 内容的策略</span></span><br><span class="line">        WriteCellStyle contentWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">// 这个策略是 头是头的样式 内容是内容的样式 其他的策略可以自己实现</span></span><br><span class="line">        HorizontalCellStyleStrategy horizontalCellStyleStrategy = <span class="keyword">new</span> HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码</span></span><br><span class="line">        fileName = URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename*=utf-8''"</span> + fileName + <span class="string">".xlsx"</span>);</span><br><span class="line">        </span><br><span class="line">        EasyExcel.write(response.getOutputStream(), ReadExcel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">excelType</span>(<span class="title">ExcelTypeEnum</span>.<span class="title">XLSX</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">registerWriteHandler</span>(<span class="title">horizontalCellStyleStrategy</span>)</span></span><br><span class="line"><span class="class">            // 这里如果直接设置自己定义的，没有上一行代码，没效果，相反，如果跟在整体设置策略后面，这样就有效果了</span></span><br><span class="line"><span class="class">                .<span class="title">registerWriteHandler</span>(<span class="title">new</span> <span class="title">CustomizeCellWriteHandler</span>(75))</span></span><br><span class="line"><span class="class">                .<span class="title">registerWriteHandler</span>(<span class="title">new</span> <span class="title">CustomizeSheetWriteHandler</span>())</span></span><br><span class="line"><span class="class">                .<span class="title">sheet</span>(<span class="title">sheetName</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">doWrite</span>(<span class="title">new</span> <span class="title">ArrayList</span>())</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">"导出异常，e: &#123;&#125;"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义单元格样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeCellWriteHandler</span> <span class="keyword">implements</span> <span class="title">CellWriteHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板的首行行高 ，通过构造器注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizeCellWriteHandler</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer integer, Boolean aBoolean)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 WriteTableHolder writeTableHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 List&lt;CellData&gt; cellDataList,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Cell cell,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Head head,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Integer relativeRowIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Boolean isHead)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Workbook workbook = writeSheetHolder.getSheet().getWorkbook();</span><br><span class="line">        CellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">        cellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());</span><br><span class="line">        cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        cellStyle.setBorderLeft(BorderStyle.THIN);</span><br><span class="line">        cellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        cellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        cellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        Font font = workbook.createFont();</span><br><span class="line">        <span class="comment">// 序号为1的行</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == <span class="number">0</span>) &#123;</span><br><span class="line">            font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">12</span>);</span><br><span class="line">            font.setFontName(<span class="string">"微软雅黑"</span>);</span><br><span class="line">            <span class="comment">// 加粗</span></span><br><span class="line">            font.setBold(<span class="keyword">true</span>);</span><br><span class="line">            cellStyle.setFont(font);</span><br><span class="line">            <span class="comment">// 水平垂直居中</span></span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            cellStyle.setFillBackgroundColor((<span class="keyword">short</span>)<span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 自动换行</span></span><br><span class="line">            cellStyle.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">            Row row = cell.getRow();</span><br><span class="line">            row.setHeightInPoints(height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == <span class="number">1</span>) &#123;</span><br><span class="line">            font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</span><br><span class="line">            font.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">            font.setBold(<span class="keyword">true</span>);</span><br><span class="line">            cellStyle.setFont(font);</span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            cellStyle.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cell.setCellStyle(cellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单元格下拉框设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeSheetWriteHandler</span> <span class="keyword">implements</span> <span class="title">SheetWriteHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建sheet页后的操作，设置下拉框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据index，形成map，可插入多个</span></span><br><span class="line">        Map&lt;Integer,String []&gt; mapDropDown = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 性别选值范围</span></span><br><span class="line">        String[] genders = <span class="keyword">new</span> String[]&#123;<span class="string">"男"</span>,<span class="string">"女"</span>&#125;;</span><br><span class="line">        <span class="comment">// 角色选值范围</span></span><br><span class="line">        String[] roles = <span class="keyword">new</span> String[]&#123;<span class="string">"超级管理员"</span>,<span class="string">"HR"</span>,<span class="string">"组长"</span>,<span class="string">"员工"</span>,<span class="string">"系统维护人员"</span>&#125;;</span><br><span class="line">        <span class="comment">// 得到全部职位</span></span><br><span class="line">        PositionServiceImpl positionServiceImpl = (PositionServiceImpl) SpringBeanUtil.getBean(<span class="string">"positionServiceImpl"</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;Position&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.select(<span class="string">"position_name"</span>).eq(<span class="string">"department_id"</span>,<span class="number">1</span>).eq(<span class="string">"parent_id"</span>,<span class="number">0</span>);</span><br><span class="line">        List&lt;Position&gt; positionList = positionServiceImpl.list(wrapper);</span><br><span class="line">        String[] positions = <span class="keyword">new</span> String[positionList.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; positionList.size(); i++) &#123;</span><br><span class="line">            positions[i] = positionList.get(i).getPositionName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 员工状态</span></span><br><span class="line">        String[] employeeStatus = <span class="keyword">new</span> String[]&#123;<span class="string">"试用"</span>,<span class="string">"正式"</span>,<span class="string">"实习"</span>,<span class="string">"交接"</span>,<span class="string">"离职"</span>,<span class="string">"派遣"</span>,<span class="string">"跨部门"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下拉框选择的位置</span></span><br><span class="line">        mapDropDown.put(<span class="number">1</span>,genders);</span><br><span class="line">        mapDropDown.put(<span class="number">7</span>,employeeStatus);</span><br><span class="line">        mapDropDown.put(<span class="number">8</span>,positions);</span><br><span class="line">        mapDropDown.put(<span class="number">9</span>,roles);</span><br><span class="line">        <span class="comment">// 获取sheet页</span></span><br><span class="line">        Sheet sheet = writeSheetHolder.getSheet();</span><br><span class="line">        <span class="comment">// 设置下拉框</span></span><br><span class="line">        DataValidationHelper helper = sheet.getDataValidationHelper();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String[]&gt; entry : mapDropDown.entrySet()) &#123;</span><br><span class="line">            <span class="comment">// 起始行、终止行、起始列、终止列</span></span><br><span class="line">            CellRangeAddressList addressList = <span class="keyword">new</span> CellRangeAddressList(<span class="number">1</span>, <span class="number">30</span>, entry.getKey(), entry.getKey());</span><br><span class="line">            <span class="comment">// 设置下拉框数据</span></span><br><span class="line">            DataValidationConstraint constraint = helper.createExplicitListConstraint(entry.getValue());</span><br><span class="line">            DataValidation dataValidation = helper.createValidation(constraint, addressList);</span><br><span class="line">            <span class="comment">// 处理Excel兼容性问题</span></span><br><span class="line">            <span class="keyword">if</span> (dataValidation <span class="keyword">instanceof</span> XSSFDataValidation) &#123;</span><br><span class="line">                dataValidation.setSuppressDropDownArrow(<span class="keyword">true</span>);</span><br><span class="line">                dataValidation.setShowErrorBox(<span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataValidation.setSuppressDropDownArrow(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sheet.addValidationData(dataValidation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="读取excel模板"><a href="#读取excel模板" class="headerlink" title="读取excel模板"></a>读取excel模板</h3><ol><li><p>上传excel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"excel导入员工信息"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">easyExcelReadTest</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    EasyExcel.read(file.getInputStream(), ReadExcel<span class="class">.<span class="keyword">class</span>,<span class="title">new</span> <span class="title">EmployeeDataListener</span>(<span class="title">null</span>,<span class="title">WriteExcel</span>.<span class="title">class</span>)).<span class="title">sheet</span>().<span class="title">doRead</span>()</span>;</span><br><span class="line">    <span class="keyword">return</span> Result.ok().message(<span class="string">"上传成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入excel调用的监听器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 黄炳培</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/6/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDataListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">ReadExcel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每隔20条存储数据库，然后清理list ，方便内存回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_COUNT = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对应实体类字段，用来获取实体类中的ExcelProperty注解中的val值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; modelHead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * class对象，用作反射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class classz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;ReadExcel&gt; readExcelList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmployeeDataListener</span><span class="params">(Map&lt;Integer, String&gt; headMap, Class c)</span> </span>&#123;</span><br><span class="line">        modelHead = headMap;</span><br><span class="line">        classz = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == modelHead) &#123;</span><br><span class="line">            modelHead = getIndexNameMap(classz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(modelHead)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context.readRowHolder().getRowIndex() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headMap.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!headMap.get(i).equals(modelHead.get(i))) &#123;</span><br><span class="line">                    log.info(<span class="string">"第&#123;&#125;列表头格式有误!!"</span>,i);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EmployeeException(<span class="number">20001</span>,<span class="string">"第"</span>+i+<span class="string">"列表头格式有误!!"</span>+<span class="string">" 请使用模板文件导入！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ReadExcel data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"解析到一条数据:&#123;&#125;"</span>, JSON.toJSONString(data));</span><br><span class="line">        readExcelList.add(data);</span><br><span class="line">        <span class="keyword">if</span> (readExcelList.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            readExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当所有数据都解析完成了，才会来调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (readExcelList.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            saveData();</span><br><span class="line">            readExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 除了表头之外，没有其他数据时，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (context.getTotalCount() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmployeeException(<span class="number">20001</span>,<span class="string">"模板数据为空!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 导入数据完成后，重置计数器</span></span><br><span class="line">        ExcelServiceImpl excelServiceImpl = (ExcelServiceImpl) SpringBeanUtil.getBean(<span class="string">"excelServiceImpl"</span>);</span><br><span class="line">        excelServiceImpl.resetCount();</span><br><span class="line">        log.info(<span class="string">"所有数据解析完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExcelServiceImpl excelServiceImpl = (ExcelServiceImpl) SpringBeanUtil.getBean(<span class="string">"excelServiceImpl"</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;条数据，开始存储数据库！"</span>, readExcelList.size());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            excelServiceImpl.saveBatchData(readExcelList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">            String property = getFieldExcelProperty(String.valueOf(e.getCause()));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmployeeException(<span class="number">20001</span>,property + <span class="string">"这一列不能为空"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EmployeeException e) &#123;</span><br><span class="line">            log.info(e.getMsg());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmployeeException(e.getCode(),e.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"存储数据库成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射来获取对象的ExcelProperty中的val，用作校验表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getIndexNameMap</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;Integer, String&gt; ExcelHeadField = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fields[i].getName());</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            ExcelProperty excelProperty = field.getAnnotation(ExcelProperty<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (excelProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = excelProperty.index();</span><br><span class="line">                String[] values = excelProperty.value();</span><br><span class="line">                String feildName = values[<span class="number">1</span>];</span><br><span class="line">                ExcelHeadField.put(index, feildName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ExcelHeadField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过属性名获取ApiModelProperty中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exceptionMsg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFieldExcelProperty</span><span class="params">(String exceptionMsg)</span></span>&#123;</span><br><span class="line">        ReadExcel readExcel = <span class="keyword">new</span> ReadExcel();</span><br><span class="line">        <span class="keyword">int</span> start = exceptionMsg.indexOf(<span class="string">"'"</span>);</span><br><span class="line">        <span class="keyword">int</span> end = exceptionMsg.indexOf(<span class="string">"'"</span>, start + <span class="number">1</span>);</span><br><span class="line">        String ColumnName = exceptionMsg.substring(start + <span class="number">1</span>, end);</span><br><span class="line">        ArrayList&lt;Character&gt; fieNamelist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = ColumnName.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ColumnName.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'_'</span> == chars[i]) &#123;</span><br><span class="line">                <span class="comment">// 下划线的下一个字母需要大写</span></span><br><span class="line">                chars[i+<span class="number">1</span>] = Character.toUpperCase(chars[i+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fieNamelist.add(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder fieldName = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;fieNamelist.size(); i++) &#123;</span><br><span class="line">            fieldName.append(fieNamelist.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = readExcel.getClass().getDeclaredField(fieldName.toString());</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            ApiModelProperty apiModelProperty = field.getAnnotation(ApiModelProperty<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> apiModelProperty.value();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色名-整型字符型转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRoleConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">supportJavaTypeKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellDataTypeEnum <span class="title">supportExcelTypeKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里读的时候会调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentProperty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> globalConfiguration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">convertToJavaData</span><span class="params">(CellData cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String role = cellData.getStringValue();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"超级管理员"</span>.equals(role)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"员工"</span>.equals(role)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"组长"</span>.equals(role)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"HR"</span>.equals(role)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 系统维护人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellData <span class="title">convertToExcelData</span><span class="params">(Integer value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger2</title>
      <link href="2021/05/08/Swagger2/"/>
      <url>2021/05/08/Swagger2/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>前后端分离</strong></p><ul><li>前后端通过API接口进行交互</li><li>前后端相对独立且松耦合</li></ul><p><strong>前后端产生的问题痛点</strong></p><ul><li>接口文档来不及更新或者维护</li><li>接口文档与实际情况不一致</li><li>随着时间推移，版本迭代，接口文档往往很容易就跟不上代码了</li></ul><p><strong>痛点解决</strong></p><p>实时跟踪最新的API，降低集成风险</p><p><strong>Swagger</strong></p><ul><li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>通过这套规范，你只需要按照它的规范去定义接口及接口相关的信息。再通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档</li></ul><h2 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h2><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p><ul><li><strong>Springfox-swagger2</strong></li><li>swagger-springmvc</li></ul><p><strong>使用Swagger</strong></p><p>要求：jdk 1.8 + 否则swagger2无法运行</p><p><strong>步骤</strong></p><ol><li><p>新建一个SpringBoot-web项目</p></li><li><p>添加maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写HelloController，保证搭建环境没有问题</p></li><li><p>要使用Swagger，我们需要编写一个配置类 SwaggerConfig来配置Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问测试：localhost:8080/swagger-ui.html，可以看到swagger的界面</p><p>界面描述从上到下依次是：组、Swagger信息、接口文档、实体类信息</p></li></ol><h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><ol><li><p>Swagger实体Bean是Docket，所以通过配置Docket实例来配置Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置docket以配置Swagger具体参数</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以通过apiInfo()属性配置文档信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置文档信息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Contact contact = <span class="keyword">new</span> Contact(<span class="string">"联系人名字"</span>, <span class="string">"http://xxx.xxx.com/联系人访问链接"</span>, <span class="string">"联系人邮箱"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">           <span class="string">"Swagger学习"</span>, <span class="comment">// 标题</span></span><br><span class="line">           <span class="string">"学习演示如何配置Swagger"</span>, <span class="comment">// 描述</span></span><br><span class="line">           <span class="string">"v1.0"</span>, <span class="comment">// 版本</span></span><br><span class="line">           <span class="string">"http://terms.service.url/组织链接"</span>, <span class="comment">// 组织链接</span></span><br><span class="line">           contact, <span class="comment">// 联系人信息</span></span><br><span class="line">           <span class="string">"Apach 2.0 许可"</span>, <span class="comment">// 许可</span></span><br><span class="line">           <span class="string">"许可链接"</span>, <span class="comment">// 许可连接</span></span><br><span class="line">           <span class="keyword">new</span> ArrayList&lt;&gt;()<span class="comment">// 扩展</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Docket 实例关联上 apiInfo()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">       .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启项目，访问测试 ：localhost:8080/swagger-ui.html</p></li></ol><h2 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h2><ol><li><p>构建Docket时通过select()方法配置怎么扫描接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(apiInfo())</span><br><span class="line">        <span class="comment">//通过select()方法，去配置扫描接口。RequestHandlerSelectors使用什么方式描述接口</span></span><br><span class="line">        .select()</span><br><span class="line">        <span class="comment">//通常是使用扫描包的方式</span></span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.hbp.swagger.controller"</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类（看不见error）</p></li><li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">any() <span class="comment">// 扫描所有，项目中的所有接口都会被扫描到</span></span><br><span class="line">none() <span class="comment">// 不扫描接口</span></span><br><span class="line"><span class="comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span></span><br><span class="line">withMethodAnnotation(<span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span><br><span class="line"><span class="comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span></span><br><span class="line">withClassAnnotation(<span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span><br><span class="line">basePackage(<span class="keyword">final</span> String basePackage) <span class="comment">// 根据包路径扫描接口</span></span><br></pre></td></tr></table></figure></li><li><p>除此之外，我们还可以配置接口扫描过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(apiInfo())</span><br><span class="line">        <span class="comment">// 通过select()方法，去配置扫描接口。RequestHandlerSelectors使用什么方式描述接口</span></span><br><span class="line">        .select()</span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.hbp.swagger.controller"</span>))</span><br><span class="line">        <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/hbp开头的接口。通常是使用这种方式过滤</span></span><br><span class="line">        .paths(PathSelectors.ant(<span class="string">"/hbp/**"</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置Swagger开关"><a href="#配置Swagger开关" class="headerlink" title="配置Swagger开关"></a>配置Swagger开关</h2><ol><li><p>通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)      </span><br><span class="line">        .apiInfo(apiInfo())      </span><br><span class="line">        .enable(<span class="keyword">false</span>) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问      </span></span><br><span class="line">        .select()      </span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.hbp.swagger.controller"</span>))  </span><br><span class="line">        .paths(PathSelectors.ant(<span class="string">"/hbp/**"</span>))      </span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>如何动态配置当项目处于生产环境或发布环境时显示swagger？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;   </span><br><span class="line">    <span class="comment">// 设置要显示swagger的环境  </span></span><br><span class="line">    Profiles of = Profiles.of(<span class="string">"dev"</span>, <span class="string">"test"</span>);   </span><br><span class="line">    <span class="comment">// 判断当前是否处于该环境   </span></span><br><span class="line">    <span class="comment">// 通过 enable() 接收此参数判断是否要显示  </span></span><br><span class="line">    <span class="keyword">boolean</span> flag = environment.acceptsProfiles(of);      </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)      </span><br><span class="line">        .apiInfo(apiInfo())      </span><br><span class="line">        .enable(flag) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问      </span></span><br><span class="line">        .select()      </span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.hbp.swagger.controller"</span>))      </span><br><span class="line">        .paths(PathSelectors.ant(<span class="string">"/hbp/**"</span>))      </span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h2><p>通过api分组我们就知道哪些接口是谁写的，在哪里</p><ol><li><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(apiInfo())      </span><br><span class="line">        .groupName(<span class="string">"根据需要写自己的名字"</span>) <span class="comment">// 配置分组       </span></span><br><span class="line">        <span class="comment">// 省略配置....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启项目查看分组</p></li><li><p>如何配置多个分组？配置多个分组只需要配置多个docket即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启项目查看即可</p></li></ol><h2 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h2><ol><li><p>新建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"用户基本信息"</span>)<span class="comment">//文档注释，不至于让前端的人看不懂该实体类的意思</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"用户姓名"</span>)    </span><br><span class="line">    <span class="keyword">private</span> String userName;    </span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"用户密码"</span>)    </span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启查看测试 Models</p><p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><p>@ApiModel为类添加注释</p><p>@ApiModelProperty为类属性添加注释</p></li></ol><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><table><thead><tr><th>Swagger注解</th><th>描述</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"用户详情"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/users/&#123;userName&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findByUserName</span><span class="params">(@ApiParam(<span class="string">"用户名"</span>)</span> @<span class="title">PathVariable</span><span class="params">(<span class="string">"userName"</span>)</span> String userName) </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>+userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读</li><li>接口文档实时更新</li><li>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错</li><li>可以在线测试</li></ol><p>【注意点】在正式发布的时候，关闭Swagger！出于安全考虑，而且节省运行内存</p>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2</title>
      <link href="2021/05/08/SpringBoot2/"/>
      <url>2021/05/08/SpringBoot2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot2"><a href="#SpringBoot2" class="headerlink" title="SpringBoot2"></a>SpringBoot2</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>官方要求：</p><ol><li>java8及以上<ol><li>java -version查看版本</li></ol></li><li>maven3.3+<ol><li>mvn -version查看版本</li></ol></li></ol><h2 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h2><p>就是一个javaweb的开发框架，但他其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><h2 id="SpringBoot优点"><a href="#SpringBoot优点" class="headerlink" title="SpringBoot优点"></a>SpringBoot优点</h2><ol><li>创建独立Spring应用</li><li>内嵌web服务器，比如说tomcat</li><li>自动starter依赖，简化构建配置，即不需要考虑每个依赖版本的兼容性问题及不需要一个一个导入依赖，比如只需要导入web-starter，就可以把这些依赖导入</li><li>自动配置Spring以及第三方功能</li><li>提供生产级别的监控、健康检查及外部化配置</li><li>无冗余代码生成、无需编写XML</li></ol><h2 id="SpringBoot缺点"><a href="#SpringBoot缺点" class="headerlink" title="SpringBoot缺点"></a>SpringBoot缺点</h2><ol><li>人称版本帝，迭代快，需要时刻关注变化</li><li>封装太深，内部原理复杂，不容易精通</li></ol><h2 id="HelloWorld-Demo"><a href="#HelloWorld-Demo" class="headerlink" title="HelloWorld-Demo"></a>HelloWorld-Demo</h2><h3 id="maven设置"><a href="#maven设置" class="headerlink" title="maven设置"></a>maven设置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 让maven使用阿里云的镜像，这样下载依赖就会很快 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 让maven使用jdk1.8来进行项目的编译，这样就会避免一些逻辑开发中的问题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="需求：浏览发送-hello请求，响应-Hello，Spring-Boot-2"><a href="#需求：浏览发送-hello请求，响应-Hello，Spring-Boot-2" class="headerlink" title="需求：浏览发送/hello请求，响应 Hello，Spring Boot 2"></a>需求：浏览发送/hello请求，响应 Hello，Spring Boot 2</h3><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><ul><li><strong>项目创建方式一：</strong>使用Spring Initializr 的 Web页面创建项目<ul><li>打开<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></li><li>填写项目信息（包结构group、artifact项目名等）</li><li>点击”Generate Project“按钮生成项目并下载此项目</li><li>解压后，用IDEA以Maven项目导入</li></ul></li><li><strong>项目创建方式二：</strong>使用 IDEA 直接创建项目<ul><li>创建一个新项目，选择spring initalizr，它实际上就是去官网的快速构建工具那里实现的</li><li>填写项目信息</li><li>选择初始化组件（勾选web和lombok）</li><li>等待项目构建成功即可</li></ul></li></ul><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--固定写法，要使用springboot的功能，就要引入springboot的父项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web场景启动器：开发web就需要引入web场景--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建主程序"><a href="#创建主程序" class="headerlink" title="创建主程序"></a>创建主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 主程序类：相当于所有启动的入口，这是个固定写法</span></span><br><span class="line"><span class="comment">* @SpringBootApplication：这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Main<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写业务"><a href="#编写业务" class="headerlink" title="编写业务"></a>编写业务</h3><p>这一块的话，以前怎么写业务，这里就怎么写</p><p>在主程序的同级目录下，新建一个controller包，<strong>一定要在同级目录下，否则识别不到</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,SpringBoot2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>直接运行main方法即可</p><h3 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h3><p>resources下创建application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br></pre></td></tr></table></figure><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><p>以后不需要在目标服务器安装tomcat等一大推，只需要在工程里面引入一个插件，然后把项目打成jar包（点击 maven的 package）即可，如果打包成功，则会在target目录下生成一个 jar 包，然后直接在目标服务器执行，即可以在任何地方运行啦。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>在cmd中运行jar包时要注意，取消cmd的快速编辑模式</li></ul><h2 id="SpringBoot特点"><a href="#SpringBoot特点" class="headerlink" title="SpringBoot特点"></a>SpringBoot特点</h2><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><ul><li>父项目做依赖管理</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--一般父项目声明非常多的依赖，而子项目只需要继承这个父项目，子项目就可以不用写版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--点进去，发现还有一个父依赖：几乎声明了所有开发中常用的依赖版本号，自动版本仲裁机制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>即我们无需关注版本号，自动版本仲裁</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、引入依赖默认都可以不写版本</span><br><span class="line">2、但引入非版本仲裁的jar，要写</span><br></pre></td></tr></table></figure><ul><li>自定义修改仲裁的版本号(运行maven的特性：就近优先原则)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.先去查看spring-boot-dependencies里面规定当前依赖的版本</span><br><span class="line">2.在当前项目pom.xml里面重写配置 </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.42<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开发导入starter场景启动器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1、官方的spring-boot-starter-*，*就某种场景</span></span><br><span class="line"><span class="comment">    2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span></span><br><span class="line"><span class="comment">    3、springboot所有支持的场景，详见官方文档</span></span><br><span class="line"><span class="comment">    4、自己命名的 *-spring-boot-starter：第三方为我们提供的简化开发的场景启动器</span></span><br><span class="line"><span class="comment">    5、所有的场景启动器最底层的依赖都会这依赖这个：</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><ul><li><p>自动配好tomcat</p><ul><li><p>引入tomcat依赖（web启动器已经引入了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动配好SpringMVC</p><ul><li>引入springmvc开发的全套组件（web启动器已经引入了）</li><li>自动配好了springmvc常用组件(功能)，如视图解析器，文件上传解析器</li><li>可以通过在主程序中获取ioc的容器查看,SpringApplication.run是有返回参数的</li></ul></li><li><p>自动配好Web常见功能，如字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p>默认的包结构</p><ul><li><p>无需配置以前的包扫描配置，如我们之前整合spring-springmvc时，我们需要指定我们的controller在哪个包下，并对这个包进行扫描</p></li><li><p><strong>主程序所在的包及其下面所有子包里面的组件都会被默认扫描进来</strong>（这里主程序所在包是指 MainApplication 所在的层级）</p></li><li><p>想要扩大扫描包的范围：@SpringBootApplication(scanBasePackages = “com.hbp”)</p><p>或@ComponentScan(“扫描指定的路径”)，但是@ComponentScan不与@SpringBootApplication兼容，因为@SpringBootApplication里面已经有了@ComponentScan</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"扫描指定的路径"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>各种配置拥有默认值</p><ul><li>默认配置最终都是映射到xxxProperties</li><li>配置文件的值最终会绑定某个类上，这个类会在容器中创建对象</li></ul></li><li><p>按需加载所有自动配置项</p><ul><li>引入了哪些场景这个场景的自动配置才会开启    </li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul></li><li><p>….</p></li></ul><h2 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h2><h3 id="组件的添加"><a href="#组件的添加" class="headerlink" title="组件的添加"></a>组件的添加</h3><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p><strong>Full模式与Lite模式(默认为full)</strong></p><ul><li>Full(proxyBeanMethods = true)：保证每个@Bean方法被调用多少次返回的组件都是单实例的</li><li>Lite(proxyBeanMethods = false)：每个@Bean方法被调用多少次返回的组件都是新创建的</li><li>通俗的理解：这里的true=单例，去容器中找；而false=多例</li><li>组件依赖(即一个对象中引入了另一对象)必须使用Full模式默认。其他默认使用Lite模式</li><li>这两个模式也涉及到性能的问题，full模式使用的时候都需要检查容器中是否含有此组件，而lite不需要检查，则性能上比full略胜一筹。</li></ul><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**#############################Configuration使用示例############################## </span></span><br><span class="line"><span class="comment">* 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认是单例的 </span></span><br><span class="line"><span class="comment">* 2、配置类本身也是组件 </span></span><br><span class="line"><span class="comment">* 3、proxyBeanMethods:代理bean的方法，默认为true</span></span><br><span class="line"><span class="comment">* Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的】 </span></span><br><span class="line"><span class="comment">* Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的，即多实例】 </span></span><br><span class="line"><span class="comment">* 组件依赖必须使用Full模式默认。其他默认是否Lite模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//告诉SpringBoot这是一个配置类 == 之前写的配置文件xxx.xml </span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">true</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * 之前是用bean标签，现在是用Bean注解    </span></span><br><span class="line"><span class="comment">    * 作用：给容器中添加组件    </span></span><br><span class="line"><span class="comment">    * 以方法名作为组件的id(可以在注解上修改)。返回类型就是组件类型。返回的值就是组件在容器中的实例(单例)    </span></span><br><span class="line"><span class="comment">    * 等同于：    </span></span><br><span class="line"><span class="comment">    * &lt;bean id="user01" class="com.hbp.boot.bean.User"&gt;        </span></span><br><span class="line"><span class="comment">    * &lt;property name="name" value="张三"/&gt;        </span></span><br><span class="line"><span class="comment">    * &lt;property name="age" value="18"/&gt;      </span></span><br><span class="line"><span class="comment">    * &lt;/bean&gt;    </span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line">    <span class="comment">//外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器的单实例对象   </span></span><br><span class="line">    <span class="meta">@Bean</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>,<span class="number">18</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"tom"</span>)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcat</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">"tomcat"</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 主程序类：相当于所有启动的入口</span></span><br><span class="line"><span class="comment">* <span class="doctag">@SpringBootApplication</span>：这是一个SpringBoot应用 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"com.hbp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//1、返回我们IOC容器        </span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(Main<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;        </span><br><span class="line">        <span class="comment">//2、查看容器里面的组件        </span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();        </span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;            </span><br><span class="line">            System.out.println(name);        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="comment">//从容器中获取组件        </span></span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">"tom"</span>, Pet<span class="class">.<span class="keyword">class</span>)</span>;        </span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">"tom"</span>, Pet<span class="class">.<span class="keyword">class</span>)</span>;        </span><br><span class="line">        System.out.println(tom01 == tom02);<span class="comment">//运行结果:true        </span></span><br><span class="line">        <span class="comment">//配置类也是组件        </span></span><br><span class="line">        <span class="comment">//com.hbp.boot.config.MyConfig$$EnhancerBySpringCGLIB$$e41e76f3@30e92cb9        </span></span><br><span class="line">        <span class="comment">//默认也是个代理对象        </span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig<span class="class">.<span class="keyword">class</span>)</span>;        </span><br><span class="line">        System.out.println(bean);<span class="comment">//运行结果：如果是full模式则为true；如果是lite模式则为false        </span></span><br><span class="line">        <span class="comment">// 如果@Configuration(proxyBeanMethods = true)代理对象调用方法，        </span></span><br><span class="line">        <span class="comment">// SpringBoot总会去容器中检查有没有这个方法，        </span></span><br><span class="line">        <span class="comment">// 如果有就拿，没有就新创一个。        </span></span><br><span class="line">        <span class="comment">// 即SpringBoot总会检查这个组件是否在容器中有，保持组件单实例        </span></span><br><span class="line">        User user01 = bean.user01();        </span><br><span class="line">        User user02 = bean.user01();        </span><br><span class="line">        System.out.println(user01 == user02);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bean、-Component、-Controller、-Service、-Repository"><a href="#Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="@Bean、@Component、@Controller、@Service、@Repository"></a>@Bean、@Component、@Controller、@Service、@Repository</h4><p>这些都是标记为组件的意思</p><h4 id="ComponentScan、-Import"><a href="#ComponentScan、-Import" class="headerlink" title="@ComponentScan、@Import"></a>@ComponentScan、@Import</h4><p>@Import：只要是容器中的组件都能用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Import</span>(&#123;User.class&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;User<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span>(<span class="title">proxyBeanMethods</span> </span>= <span class="keyword">false</span>) <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h4><p>条件装配：满足Conditional指定的条件，则进行组件注入</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean</span>(name = <span class="string">"tom"</span>)<span class="comment">//当容器中有tom组件的时候，修饰的东西才生效 </span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">true</span>) </span><br><span class="line">文件<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@ConditionalOnBean(name = "tom") //当容器中有tom组件的时候，修饰的东西才生效   </span></span><br><span class="line">    <span class="meta">@Bean</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="number">18</span>);        </span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件        </span></span><br><span class="line">        zhangsan.setPet(tomcatPet());        </span><br><span class="line">        <span class="keyword">return</span> zhangsan;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"tom22"</span>)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">"tomcat"</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;       </span><br><span class="line">        <span class="comment">//1、返回我们IOC容器        </span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(Main<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;        </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">boolean</span> tom = run.containsBean(<span class="string">"tom"</span>);        </span><br><span class="line">        System.out.println(<span class="string">"容器中Tom組件:"</span>+tom);        </span><br><span class="line">        <span class="keyword">boolean</span> user01 = run.containsBean(<span class="string">"user01"</span>);  </span><br><span class="line">        System.out.println(user01);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原生配置文件的引入"><a href="#原生配置文件的引入" class="headerlink" title="原生配置文件的引入"></a>原生配置文件的引入</h3><p>目前有很多的老项目，仍用着xxx.xml的方式，而importResource的作用就是把xml的东西放入容器里面。不用一个个@Bean</p><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"haha"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.boot.bean.User"</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hehe"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.boot.bean.Pet"</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tomcat"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;&#125;</span><br><span class="line">======================测试=================        </span><br><span class="line">    <span class="keyword">boolean</span> haha = run.containsBean(<span class="string">"haha"</span>);</span><br><span class="line">    <span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">"hehe"</span>);</span><br><span class="line">    System.out.println(<span class="string">"haha："</span>+haha);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="string">"hehe："</span>+hehe);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h3><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前的做法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span> </span>&#123;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;         </span><br><span class="line">        Properties pps = <span class="keyword">new</span> Properties();         </span><br><span class="line">        pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">"a.properties"</span>));         </span><br><span class="line">        Enumeration enum1 = pps.propertyNames();</span><br><span class="line">        <span class="comment">//得到配置文件的名字         </span></span><br><span class="line">        <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;           </span><br><span class="line">            String strKey = (String) enum1.nextElement();    </span><br><span class="line">            String strValue = pps.getProperty(strKey);            </span><br><span class="line">            System.out.println(strKey + <span class="string">"="</span> + strValue);            </span><br><span class="line">            <span class="comment">//...封装到JavaBean。         </span></span><br><span class="line">        &#125;     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在使用注解的方式：</p><h4 id="Component-ConfigurationProperties-prefix-“xxx”"><a href="#Component-ConfigurationProperties-prefix-“xxx”" class="headerlink" title="@Component + @ConfigurationProperties(prefix = “xxx”)"></a>@Component + @ConfigurationProperties(prefix = “xxx”)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment">//如果是有第三方的包里面的，人家没有@Component，那样就得用下面的方法了</span></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mycar"</span>)</span><br><span class="line"><span class="comment">//默认是去application.properites找</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> String brand;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;    </span><br><span class="line">    <span class="comment">//get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myCar.brand=BYD</span><br><span class="line">myCar.price=100</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Car car;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/car"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnableConfigurationProperties-ConfigurationProperties-prefix-“xxx”"><a href="#EnableConfigurationProperties-ConfigurationProperties-prefix-“xxx”" class="headerlink" title="@EnableConfigurationProperties + @ConfigurationProperties(prefix = “xxx”)"></a>@EnableConfigurationProperties + @ConfigurationProperties(prefix = “xxx”)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(Car<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//这个注解得加在配置类中</span></span><br><span class="line"><span class="class">//作用是：</span></span><br><span class="line"><span class="class">//1.开启<span class="title">car</span>配置绑定功能</span></span><br><span class="line"><span class="class">//2.把这个<span class="title">Car</span>组件自动注册到容器中</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li><p>引入场景依赖</p></li><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li></ul></li><li><p>查看自动配置了哪些（选做）</p></li><li><ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug=true开启自动配置报告。Negative（不生效）\Positive（生效）</li></ul></li><li><p>是否需要修改</p></li><li><ul><li>参照文档修改配置项</li></ul></li><li><ul><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些。（查看External Libraries 中的spring-boot-autoconfigurer中去对应查找）</li></ul></li></ul></li><li><ul><li>自定义加入或者替换组件</li></ul></li><li><ul><li><ul><li>@Bean、@Component。。。</li></ul></li></ul></li><li><ul><li>自定义器  XXXXXCustomizer；</li></ul></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><p>同以前的properties用法</p><h4 id="1-2、yaml"><a href="#1-2、yaml" class="headerlink" title="1.2、yaml"></a>1.2、yaml</h4><h5 id="1-2-1、简介"><a href="#1-2-1、简介" class="headerlink" title="1.2.1、简介"></a>1.2.1、简介</h5><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p><p>非常适合用来做以数据为中心的配置文件</p><h5 id="1-2-2、基本语法"><a href="#1-2-2、基本语法" class="headerlink" title="1.2.2、基本语法"></a>1.2.2、基本语法</h5><ul><li><p>key: value；冒号后面要有空格</p></li><li><p>大小写敏感</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进不允许使用tab，只允许空格</p></li><li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p></li><li><p>‘#’表示注释</p></li><li><p>字符串无需加引号，如果要加，单引号与双引号表示字符串内容会被 转义/不转义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userName:</span> <span class="string">"zhangsan \n lisi"</span><span class="comment"># 单引号会将\n作为字符串输出  双引号会将\n作为换行输出        \\n                         \n</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="1-2-3、数据类型"><a href="#1-2-3、数据类型" class="headerlink" title="1.2.3、数据类型"></a>1.2.3、数据类型</h5><ul><li><p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure></li><li><p>对象：键值对的集合。map、hash、object </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> <span class="string">&#123;k1:v1,k2:v2,k3:v3&#125;#或k:</span>   <span class="attr">k1: v1  k2: v2  k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure></li><li><p>数组：一组按次序排列的值。array、list、set、queue</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> <span class="string">[v1,v2,v3]#或者k:</span> <span class="bullet">-</span> <span class="string">v1</span> <span class="bullet">-</span> <span class="string">v2</span> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="1-2-4-示例"><a href="#1-2-4-示例" class="headerlink" title="1.2.4 示例"></a>1.2.4 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)<span class="meta">@NoArgsConstructor</span><span class="meta">@AllArgsConstructor</span><span class="meta">@Datapublic</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="keyword">private</span> String userName;    <span class="keyword">private</span> Boolean boss;    <span class="keyword">private</span> Date birth;    <span class="keyword">private</span> Integer age;    <span class="keyword">private</span> Pet pet;    <span class="keyword">private</span> String[] interests;    <span class="keyword">private</span> List&lt;String&gt; animal;    <span class="keyword">private</span> Map&lt;String, Object&gt; score;    <span class="keyword">private</span> Set&lt;Double&gt; salarys;    <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;&#125;<span class="meta">@Data</span><span class="meta">@NoArgsConstructor</span><span class="meta">@AllArgsConstructorpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;    <span class="keyword">private</span> String name;    <span class="keyword">private</span> Double weight;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:  userName:</span> <span class="string">"zhangsan \n lisi"</span>  <span class="comment"># 单引号会将\n作为字符串输出  双引号会将\n作为换行输出  boss: false  birth: 2021/4/20 11:33:11  age: 18  pet:    name: tomcat    weight: 22  interests: [唱,跳,rap]  animal:  - jerry  - mario  #  score: &#123;English:88,Math:90&#125;  score:    English: 88    Math: 90  salarys:  - 99.99  allPets:    sick:    - &#123;name:阿狗,weight:99&#125;    - name: 阿猫      weight: 88    health:      [&#123;name: mario,weight: 47&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="配置提示"><a href="#配置提示" class="headerlink" title="配置提示"></a>配置提示</h3><p>我们可以发现我们在发yaml的时候，并没有给我们提示，这造成了一定程度上的不便，我们可以加上配置处理器解决这个问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置处理器--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">build</span>&gt;</span>        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>                     <span class="comment">&lt;!--这一块是打包的时候，可以把配置处理器忽略掉，不要打包，减少jar包大小，因为这个是跟业务无关的东西，只是在开发时的提示，只会占空间，不过现在的版本2.4.2+会默认帮我们去掉，所以可以不用加--&gt;</span>                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span>                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span>                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简单功能分析"><a href="#简单功能分析" class="headerlink" title="简单功能分析"></a>简单功能分析</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><h4 id="1、静态资源目录"><a href="#1、静态资源目录" class="headerlink" title="1、静态资源目录"></a>1、静态资源目录</h4><p>只要静态资源放在类路径(resources)下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问方式 ： 当前项目根路径/ + 静态资源名 </p><p>那么有个问题：程序如何知道我想访问的是静态资源还是访问请求呢？</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。</p><p><strong>改变默认存放的静态资源路径</strong></p><p>相当于程序不会在去/static、/public、/resources、/META-INF/resources找静态资源了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置存放的静态资源路径web:  resources:    static-locations: [classpath:/haha/]</span></span><br></pre></td></tr></table></figure><p><strong>改变静态资源访问前缀</strong></p><p>默认无前缀</p><p>访问方式：当前项目/ + static-path-pattern/ + 静态资源名 = 静态资源文件夹下找</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置静态资源的访问前缀spring:  mvc:    static-path-pattern: /res/**</span></span><br></pre></td></tr></table></figure><p><strong>为什么要改变默认的静态资源路径</strong></p><p>因为一个web应用，有请求和静态资源，且有相应的拦截器，而此时如果要拦截/**，则把静态资源都给拦住了，所以为了配置拦截器方便，让静态资源访问都带一个前缀，这样拦截器指定放行就很方便了。</p><h2 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h2><ul><li><p>方式一：静态资源路径下  index.html</p><ul><li><p>可以配置静态资源路径</p></li><li><p>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring:#</span>  <span class="string">mvc:#</span>    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span>   <span class="string">这个会导致welcome</span> <span class="string">page功能失效</span>  <span class="attr">resources:    static-locations:</span> <span class="string">[classpath:/haha/]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>方式二：controller能处理/index</p></li></ul><h3 id="2-3、自定义-Favicon"><a href="#2-3、自定义-Favicon" class="headerlink" title="2.3、自定义 Favicon"></a>2.3、自定义 Favicon</h3><p>favicon.ico 放在静态资源目录下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring:#</span>  <span class="string">mvc:#</span>    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span>   <span class="string">这个会导致</span> <span class="string">Favicon</span> <span class="string">功能失效</span></span><br></pre></td></tr></table></figure><h2 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h2><h3 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PathVariable</span> 路径变量<span class="meta">@RequestHeader</span> 获取请求头参数<span class="meta">@ModelAttribute</span><span class="meta">@RequestParam</span> 获取请求参数<span class="meta">@MatrixVariable</span><span class="meta">@CookieValue</span> 获取cookie的值<span class="meta">@RequestBody</span> 获取请求体[只有post才有请求体]，存储表单中的kv值@获取request域属性，一般用于页面转发的时候来取出当前请求中的数据</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;    <span class="comment">//rest风格    @GetMapping("/car/&#123;id&#125;/owner/&#123;username&#125;")    public Map&lt;String,Object&gt; getCar(@PathVariable("id") Integer id,                                     @PathVariable("username") String name,                                     @PathVariable Map&lt;String,String&gt; pv,//获取所有路径变量的kv                                     @RequestHeader("User-Agent") String userAgent,                                     @RequestHeader Map&lt;String,String&gt; header,                                     @RequestParam("age") Integer age,                                     @RequestParam("inters") List&lt;String&gt; inters,                                     @RequestParam Map&lt;String,String&gt; params,                                     @CookieValue("_ga") String _ga,                                     @CookieValue("_ga") Cookie cookie)&#123;        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        map.put("id",id);        map.put("name",name);        map.put("pv",pv);        map.put("userAgent",userAgent);        map.put("headers",header);        map.put("age",age);        map.put("inters",inters);        map.put("params",params);        map.put("_ga",_ga);        System.out.println(cookie.getName()+"===&gt;"+cookie.getValue());        return map;    &#125;//===========================@RequestBody的使用==========================    @PostMapping("/save")    public Map postMethod(@RequestBody String content)&#123;        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        map.put("content",content);        return map;    &#125;//===========================@RequestAttribute的使用==========================    @GetMapping("/goto")    public String goToPage(HttpServletRequest request)&#123;        request.setAttribute("msg","成功了...");        request.setAttribute("code",200);        return "forward:/success"; //转发到 /success请求    &#125;    @ResponseBody    @GetMapping("/success")    public Map success(@RequestAttribute("msg") String msg,                       @RequestAttribute("code") Integer code,                       HttpServletRequest request)&#123;        Object msg1 = request.getAttribute("msg"); //也可以这样来取        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        map.put("reqMethod_msg1",msg1);        map.put("reqMethod_msg",msg);        return map;    &#125;    //===========================@MatrixVariable矩阵变量的使用==========================    //1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd    //2、SpringBoot默认是禁用了矩阵变量的功能    //      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。    //              removeSemicolonContent（移除分号内容）支持矩阵变量的    //3、矩阵变量必须有url路径变量才能被解析    @GetMapping("/cars/&#123;path&#125;")    public Map carsSell(@MatrixVariable("low") Integer low,                        @MatrixVariable("brand") List&lt;String&gt; brand,                        @PathVariable("path") String path)&#123;        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        map.put("low",low);        map.put("brand",brand);        map.put("path",path);        return map;    &#125;    // /boss/1;age=20/2;age=10    @GetMapping("/boss/&#123;bossId&#125;/&#123;empId&#125;")    public Map boss(@MatrixVariable(value = "age",pathVar = "bossId") Integer bossAge,                    @MatrixVariable(value = "age",pathVar = "empId") Integer empAge)&#123;        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        map.put("bossAge",bossAge);        map.put("empAge",empAge);        return map;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="视图解析与模板引擎"><a href="#视图解析与模板引擎" class="headerlink" title="视图解析与模板引擎"></a>视图解析与模板引擎</h2><p>视图解析：<strong>SpringBoot默认不支持 JSP，因为SpringBoot默认打包方式是一个jar包，jar包相当于压缩包，JSP不支持在压缩包编译的方式，因此想要进行页面的渲染，我们需要引入第三方模板引擎技术实现页面渲染。</strong></p><p>模板引擎：templates下所有页面的解析一定是得经过请求处理(即经过controller)，最终由模板引擎进行解析，不能够直接访问html页面的，我们所能直接访问只能是静态文件夹下的(即static)。</p><h4 id="模板引擎-Thymeleaf"><a href="#模板引擎-Thymeleaf" class="headerlink" title="模板引擎-Thymeleaf"></a>模板引擎-Thymeleaf</h4><p><strong>现代化、服务端Java模板引擎，很像我们的JSP</strong></p><h4 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h4><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><table><thead><tr><th>表达式名字</th><th>语法</th><th>用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td>获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td>获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td>获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td>生成链接</td></tr><tr><td>片段表达式</td><td>~{…}</td><td>jsp:include 作用，引入公共页面片段</td></tr></tbody></table><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></p><p>空值: <strong>null</strong></p><p>变量： one，two，…. 变量不能有空格</p><h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><p>字符串拼接: <strong>+</strong></p><p>变量替换: <strong>|The name is ${name}|</strong> </p><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><p>运算符: + , - , * , / , %</p><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><p>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></p><p>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </p><p>**<br>**</p><h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><p>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;</strong> <strong>,</strong> <strong>&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong>等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> </p><h4 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h4><p>If-then: <strong>(if) ? (then)</strong></p><p>If-then-else: <strong>(if) ? (then) : (else)</strong></p><p>Default: (value) <strong>?: (defaultvalue)</strong> </p><h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><p>无操作： _</p><h4 id="设置属性值-th-attr"><a href="#设置属性值-th-attr" class="headerlink" title="设置属性值-th:attr"></a>设置属性值-th:attr</h4><p>设置单个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:attr</span>=<span class="string">"action=@&#123;/subscribe&#125;"</span>&gt;</span>  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:attr</span>=<span class="string">"value=#&#123;subscribe.submit&#125;"</span>/&gt;</span>  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置多个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../images/gtvglogo.png"</span>  <span class="attr">th:attr</span>=<span class="string">"src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>以上两个的代替写法 th:xxxx</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:value</span>=<span class="string">"#&#123;subscribe.submit&#125;"</span>/&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/subscribe&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有h5兼容的标签写法</p><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes" target="_blank" rel="noopener">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes</a></p><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span>        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span>        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span>        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod,iterStat : $&#123;prods&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;iterStat.odd&#125;? 'odd'"</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="条件运算-1"><a href="#条件运算-1" class="headerlink" title="条件运算"></a>条件运算</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comments.html"</span><span class="attr">th:href</span>=<span class="string">"@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;"</span><span class="attr">th:if</span>=<span class="string">"$&#123;not #lists.isEmpty(prod.comments)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="thymeleaf使用"><a href="#thymeleaf使用" class="headerlink" title="thymeleaf使用"></a>thymeleaf使用</h3><h4 id="引入starter"><a href="#引入starter" class="headerlink" title="引入starter"></a>引入starter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引入stater后，SpringBoot自动配置好了thymeleaf"><a href="#引入stater后，SpringBoot自动配置好了thymeleaf" class="headerlink" title="引入stater后，SpringBoot自动配置好了thymeleaf"></a>引入stater后，SpringBoot自动配置好了thymeleaf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)<span class="meta">@EnableConfigurationProperties</span>(ThymeleafProperties<span class="class">.<span class="keyword">class</span>)@<span class="title">ConditionalOnClass</span>(</span>&#123; TemplateMode<span class="class">.<span class="keyword">class</span>, <span class="title">SpringTemplateEngine</span>.<span class="title">class</span> &#125;)@<span class="title">AutoConfigureAfter</span>(</span>&#123; WebMvcAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">WebFluxAutoConfiguration</span>.<span class="title">class</span> &#125;)<span class="title">public</span> <span class="title">class</span> <span class="title">ThymeleafAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>自动配好的策略</p><ul><li><p>1、所有thymeleaf的配置值都在 ThymeleafProperties</p></li><li><p>2、配置好了 <strong>SpringTemplateEngine</strong> </p></li><li><p><strong>3、配好了</strong> <strong>ThymeleafViewResolver</strong> </p></li><li><p>4、我们只需要直接开发页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="页面开发"><a href="#页面开发" class="headerlink" title="页面开发"></a>页面开发</h3><p>controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controllerpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTestController</span> </span>&#123;    <span class="meta">@GetMapping</span>(<span class="string">"/atguigu"</span>)    <span class="function"><span class="keyword">public</span> String <span class="title">atguigu</span><span class="params">(Model model)</span></span>&#123;        <span class="comment">//model中的数据会被放在请求与中，相当于request.setAttribute()        model.addAttribute("msg","你好");        model.addAttribute("link","www.baidu.com");        return "success";//自动解析成success.html    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>html</p><p>如果使用了thymeleaf模板引擎，则html页面需要引入名称空间<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span>默认值<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.atguigu.com"</span> <span class="attr">th:href</span>=<span class="string">"$&#123;link&#125;"</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.atguigu.com"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;link&#125;"</span>&gt;</span>去百度2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="构建后台管理系统"><a href="#构建后台管理系统" class="headerlink" title="构建后台管理系统"></a>构建后台管理系统</h2><h3 id="1、项目创建"><a href="#1、项目创建" class="headerlink" title="1、项目创建"></a>1、项目创建</h3><p>thymeleaf、web-starter、devtools、lombok</p><h3 id="2、静态资源处理"><a href="#2、静态资源处理" class="headerlink" title="2、静态资源处理"></a>2、静态资源处理</h3><p>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</p><h3 id="3、路径构建"><a href="#3、路径构建" class="headerlink" title="3、路径构建"></a>3、路径构建</h3><p>th:action=”@{/login}”</p><h3 id="4、模板抽取"><a href="#4、模板抽取" class="headerlink" title="4、模板抽取"></a>4、模板抽取</h3><p>th:insert/replace/include</p><h3 id="5、页面跳转"><a href="#5、页面跳转" class="headerlink" title="5、页面跳转"></a>5、页面跳转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)<span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(User user, HttpSession session, Model model)</span></span>&#123;    <span class="keyword">if</span>(StringUtils.hasLength(user.getUserName()) &amp;&amp; <span class="string">"123456"</span>.equals(user.getPassword()))&#123;        <span class="comment">//把登录成功后的用户保存起来        session.setAttribute("loginUser",user);        //登录成功后重定向到main.html，这样可以避免刷新页面，重复提交表单问题。即重定向可以防止表单重复提交        return "redirect:/main.html";    &#125;else &#123;        model.addAttribute("msg","账号密码错误");        return "login";    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数据渲染"><a href="#数据渲染" class="headerlink" title="数据渲染"></a>数据渲染</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/dynamic_table"</span>)    <span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(Model model)</span></span>&#123;        <span class="comment">//表格内容的遍历        List&lt;User&gt; users = Arrays.asList(new User("zhangsan", "123456"),                new User("lisi", "123444"),                new User("haha", "aaaaa"),                new User("hehe ", "aaddd"));        model.addAttribute("users",users);        return "table/dynamic_table";    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="HandlerInterceptor-接口"><a href="#HandlerInterceptor-接口" class="headerlink" title="HandlerInterceptor 接口"></a>HandlerInterceptor 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 登录检查 * 1、配置好拦截器要拦截哪些请求 * 2、把这些配置放在容器中 */</span><span class="meta">@Slf</span>4jpublic <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;    <span class="comment">/**     * 目标方法执行之前     * <span class="doctag">@param</span> request     * <span class="doctag">@param</span> response     * <span class="doctag">@param</span> handler     * <span class="doctag">@return</span>     * <span class="doctag">@throws</span> Exception     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;        String requestURI = request.getRequestURI();        log.info(<span class="string">"preHandle拦截的请求路径是&#123;&#125;"</span>,requestURI);        <span class="comment">//登录检查逻辑        HttpSession session = request.getSession();        Object loginUser = session.getAttribute("loginUser");        if(loginUser != null)&#123;            //放行            return true;        &#125;        //拦截住。未登录。跳转到登录页        request.setAttribute("msg","请先登录");//        response.sendRedirect("/");        request.getRequestDispatcher("/").forward(request,response);        return false;    &#125;    /**     * 目标方法执行完成以后     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;        log.info("postHandle执行&#123;&#125;",modelAndView);    &#125;    /**     * 页面渲染以后     * @param request     * @param response     * @param handler     * @param ex     * @throws Exception     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;        log.info("afterCompletion执行异常&#123;&#125;",ex);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>配置拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 1、编写一个拦截器实现HandlerInterceptor接口 * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors） * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】 */</span><span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())                .addPathPatterns(<span class="string">"/**"</span>)  <span class="comment">//所有请求都被拦截包括静态资源                .excludePathPatterns("/","/login","/css/**","/fonts/**","/images/**","/js/**"); //放行的请求    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="页面表单"><a href="#页面表单" class="headerlink" title="页面表单"></a>页面表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="comment">&lt;!--多文件上传--&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件上传代码"><a href="#文件上传代码" class="headerlink" title="文件上传代码"></a>文件上传代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**     * MultipartFile 自动封装上传过来的文件     * <span class="doctag">@param</span> email     * <span class="doctag">@param</span> username     * <span class="doctag">@param</span> headerImg     * <span class="doctag">@param</span> photos     * <span class="doctag">@return</span>     */</span>    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email,                         @<span class="title">RequestParam</span><span class="params">(<span class="string">"username"</span>)</span> String username,                         @<span class="title">RequestPart</span><span class="params">(<span class="string">"headerImg"</span>)</span> MultipartFile headerImg,                         @<span class="title">RequestPart</span><span class="params">(<span class="string">"photos"</span>)</span> MultipartFile[] photos) <span class="keyword">throws</span> IOException </span>&#123;        log.info(<span class="string">"上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;"</span>,                email,username,headerImg.getSize(),photos.length);        <span class="keyword">if</span>(!headerImg.isEmpty())&#123;            <span class="comment">//一般是保存到文件服务器，OSS服务器，这里保存在本地电脑的磁盘上            String originalFilename = headerImg.getOriginalFilename();            headerImg.transferTo(new File("H:\\cache\\"+originalFilename));        &#125;        if(photos.length &gt; 0)&#123;            for (MultipartFile photo : photos) &#123;                if(!photo.isEmpty())&#123;                    String originalFilename = photo.getOriginalFilename();                    photo.transferTo(new File("H:\\cache\\"+originalFilename));                &#125;            &#125;        &#125;        return "main";    &#125;</span></span><br></pre></td></tr></table></figure><p>默认上传大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每张图片最大为1MBprivate DataSize maxFileSize = DataSize.ofMegabytes(1);//总大小为10MBprivate DataSize maxRequestSize = DataSize.ofMegabytes(10);</span></span><br></pre></td></tr></table></figure><p>修改默认上传大小</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:  servlet:    multipart:      max-file-size: 10MB      max-request-size:</span> <span class="string">100MB</span></span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="1、错误处理"><a href="#1、错误处理" class="headerlink" title="1、错误处理"></a>1、错误处理</h4><h5 id="1、默认规则"><a href="#1、默认规则" class="headerlink" title="1、默认规则"></a>1、默认规则</h5><ul><li>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</li><li>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</li><li>自定义：error/下的4xx，5xx页面会被自动解析；</li></ul><h3 id="11、定制化原理"><a href="#11、定制化原理" class="headerlink" title="11、定制化原理"></a>11、定制化原理</h3><h4 id="1、定制化的常见方式"><a href="#1、定制化的常见方式" class="headerlink" title="1、定制化的常见方式"></a>1、定制化的常见方式</h4><ul><li>修改配置文件；</li><li><strong>xxxxxCustomizer；</strong></li><li><strong>编写自定义的配置类  xxxConfiguration；+</strong> <strong>@Bean替换、增加容器中默认组件；视图解析器</strong> </li><li><strong>Web应用 编写一个配置类实现 WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span></span><br></pre></td></tr></table></figure><h3 id="2、原理分析套路"><a href="#2、原理分析套路" class="headerlink" title="2、原理分析套路"></a>2、原理分析套路</h3><p>加粗的是我们需要操作的</p><p><strong>场景starter</strong> - xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties - <strong>绑定配置文件项</strong> </p><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h3 id="1、数据源的自动配置-HikariDataSource"><a href="#1、数据源的自动配置-HikariDataSource" class="headerlink" title="1、数据源的自动配置-HikariDataSource"></a>1、数据源的自动配置-<strong>HikariDataSource</strong></h3><h3 id="1、导入JDBC场景"><a href="#1、导入JDBC场景" class="headerlink" title="1、导入JDBC场景"></a>1、导入JDBC场景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库驱动？</p><p>为什么导入JDBC场景，官方不导入驱动？官方不知道我们接下要操作什么数据库。</p><p>数据库版本和驱动版本对应</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认版本：<span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--            &lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>想要修改版本1、直接依赖引入具体版本（maven的就近依赖原则）2、重新声明版本（maven的属性的就近优先原则）<span class="tag">&lt;<span class="name">properties</span>&gt;</span>    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:  datasource:    url: jdbc:mysql://localhost:3306/db_account    username: root    password: 6666    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutowiredJdbcTemplate</span> jdbcTemplate;<span class="meta">@Testvoid</span> contextLoads() &#123;    Long aLong = jdbcTemplate.queryForObject(<span class="string">"select count(*) from user"</span>, Long<span class="class">.<span class="keyword">class</span>)</span>;    log.info(<span class="string">"记录总数：&#123;&#125;"</span>,aLong);&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Druid数据源"><a href="#使用Druid数据源" class="headerlink" title="使用Druid数据源"></a>使用Druid数据源</h3><h4 id="1、druid官方github地址"><a href="#1、druid官方github地址" class="headerlink" title="1、druid官方github地址"></a>1、druid官方github地址</h4><p><a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">https://github.com/alibaba/druid</a></p><p>整合第三方技术的两种方式</p><ul><li>自定义</li><li>找starter</li></ul><h3 id="2、自定义方式"><a href="#2、自定义方式" class="headerlink" title="2、自定义方式"></a>2、自定义方式</h3><h4 id="1、创建数据源"><a href="#1、创建数据源" class="headerlink" title="1、创建数据源"></a>1、创建数据源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入数据源--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--以前写法--&gt;</span><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>    <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxOpenPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义配置类"><a href="#自定义配置类" class="headerlink" title="自定义配置类"></a>自定义配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourceConfig</span> </span>&#123;    <span class="comment">// 默认的自动配置是判断容器中没有才会配@ConditionalOnMissingBean(DataSource.class)    @ConfigurationProperties("spring.datasource")    @Bean    public DataSource dataSource()&#123;        DruidDataSource druidDataSource = new DruidDataSource();//        以下配置信息可以在yaml配置文件做//        druidDataSource.setUrl();//        druidDataSource.setUsername();        return druidDataSource;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2、StatViewServlet"><a href="#2、StatViewServlet" class="headerlink" title="2、StatViewServlet"></a>2、StatViewServlet</h4><p>StatViewServlet的用途包括：</p><ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的自动配置是判断容器中没有才会配@ConditionalOnMissingBean(DataSource.class)    @ConfigurationProperties("spring.datasource")    @Bean    public DataSource dataSource() throws SQLException &#123;        DruidDataSource druidDataSource = new DruidDataSource();//        以下配置信息可以在yaml配置文件做//        druidDataSource.setUrl();//        druidDataSource.setUsername();        //添加Druid的监控统计功能、防火墙        druidDataSource.setFilters("stat,wall");        return druidDataSource;    &#125;    @Bean    public ServletRegistrationBean statViewServlet()&#123;        StatViewServlet statViewServlet = new StatViewServlet();        ServletRegistrationBean&lt;Servlet&gt; registrationBean = new ServletRegistrationBean&lt;&gt;(statViewServlet,"/druid/*");        return registrationBean;    &#125;    /**     * WebStatFilter 用于采集web-jdbc关联监控的数据。     */    @Bean    public FilterRegistrationBean webStatFilter()&#123;        WebStatFilter webStatFilter = new WebStatFilter();        FilterRegistrationBean&lt;WebStatFilter&gt; filterFilterRegistrationBean = new FilterRegistrationBean&lt;&gt;(webStatFilter);        filterFilterRegistrationBean.setUrlPatterns(Arrays.asList("/*"));        filterFilterRegistrationBean.addInitParameter("exclusions","*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*");        return filterFilterRegistrationBean;    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用官方starter方式"><a href="#使用官方starter方式" class="headerlink" title="使用官方starter方式"></a>使用官方starter方式</h3><h4 id="引入druid-starter"><a href="#引入druid-starter" class="headerlink" title="引入druid-starter"></a>引入druid-starter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、分析自动配置"><a href="#2、分析自动配置" class="headerlink" title="2、分析自动配置"></a>2、分析自动配置</h4><ul><li>扩展配置项 <strong>spring.datasource.druid</strong></li><li>DruidSpringAopConfiguration.<strong>class</strong>,  监控SpringBean的；配置项：<strong>spring.datasource.druid.aop-patterns</strong></li><li>DruidStatViewServletConfiguration.<strong>class</strong>, 监控页的配置：<strong>spring.datasource.druid.stat-view-servlet；默认开启</strong></li><li>DruidWebStatFilterConfiguration.<strong>class</strong>, web监控配置；<strong>spring.datasource.druid.web-stat-filter；默认开启</strong></li><li>DruidFilterConfiguration.<strong>class</strong>}) 所有Druid自己filter的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_STAT_PREFIX = <span class="string">"spring.datasource.druid.filter.stat"</span>;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_CONFIG_PREFIX = <span class="string">"spring.datasource.druid.filter.config"</span>;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_ENCODING_PREFIX = <span class="string">"spring.datasource.druid.filter.encoding"</span>;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_SLF4J_PREFIX = <span class="string">"spring.datasource.druid.filter.slf4j"</span>;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_LOG4J_PREFIX = <span class="string">"spring.datasource.druid.filter.log4j"</span>;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_LOG4J2_PREFIX = <span class="string">"spring.datasource.druid.filter.log4j2"</span>;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_COMMONS_LOG_PREFIX = <span class="string">"spring.datasource.druid.filter.commons-log"</span>;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_WALL_PREFIX = <span class="string">"spring.datasource.druid.filter.wall"</span>;</span><br></pre></td></tr></table></figure><h4 id="3、配置示例"><a href="#3、配置示例" class="headerlink" title="3、配置示例"></a>3、配置示例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:  datasource:    url: jdbc:mysql://localhost:3306/db_account    username: root    password: 123456    driver-class-name: com.mysql.jdbc.Driver    druid:      aop-patterns:</span> <span class="string">com.atguigu.admin.*</span>  <span class="comment">#监控SpringBean      filters: stat,wall     # 底层开启功能，stat（sql监控），wall（防火墙）      stat-view-servlet:   # 配置监控页功能        enabled: true        login-username: admin        login-password: admin        resetEnable: false      web-stat-filter:  # 监控web        enabled: true        urlPattern: /*        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'      filter:        stat:    # 对上面filters里面的stat的详细配置          slow-sql-millis: 1000          logSlowSql: true # 打开慢sql          enabled: true        wall:          enabled: true          config:            drop-table-allow: false</span></span><br></pre></td></tr></table></figure><h2 id="3、整合MyBatis操作"><a href="#3、整合MyBatis操作" class="headerlink" title="3、整合MyBatis操作"></a>3、整合MyBatis操作</h2><p><a href="https://github.com/mybatis" target="_blank" rel="noopener">https://github.com/mybatis</a></p><p>starter</p><p>SpringBoot官方的Starter：spring-boot-starter-*</p><p>第三方的： *-spring-boot-starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1、配置模式"><a href="#1、配置模式" class="headerlink" title="1、配置模式"></a>1、配置模式</h3><ul><li>全局配置文件</li><li>SqlSessionFactory: 自动配置好了</li><li>SqlSession：自动配置了 <strong>SqlSessionTemplate 组合了SqlSession</strong></li><li>@Import(<strong>AutoConfiguredMapperScannerRegistrar</strong>.<strong>class</strong>）；</li><li>Mapper： 只要我们写的操作MyBatis的接口标准了 <strong>@Mapper 就会被自动扫描进来</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(MybatisProperties<span class="class">.<span class="keyword">class</span>) ： <span class="title">MyBatis</span>配置项绑定类。@<span class="title">AutoConfigureAfter</span>(</span>&#123; DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">MybatisLanguageDriverAutoConfiguration</span>.<span class="title">class</span> &#125;)<span class="title">public</span> <span class="title">class</span> <span class="title">MybatisAutoConfiguration</span></span>&#123;&#125;<span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mybatis"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisProperties</span></span></span><br></pre></td></tr></table></figure><p>可以修改配置文件中 mybatis 开始的所有；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 配置mybatis规则mybatis:  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置  mapper-locations: classpath:mybatis/mapper/*.xml  #sql映射文件位置  Mapper接口---&gt;绑定Xml<span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.atguigu.admin.mapper.AccountMapper"</span>&gt;</span><span class="comment">&lt;!--    public Account getAcct(Long id); --&gt;</span>    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAcct"</span> <span class="attr">resultType</span>=<span class="string">"com.atguigu.admin.bean.Account"</span>&gt;</span>        select * from  account_tbl where  id=#&#123;id&#125;    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 <strong>private</strong> Configuration <strong>configuration</strong>; mybatis.<strong>configuration下面的所有，就是相当于改mybatis全局配置文件中的值</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置mybatis规则mybatis:#  config-location: classpath:mybatis/mybatis-config.xml  mapper-locations: classpath:mybatis/mapper/*.xml  configuration:    map-underscore-to-camel-case: true     可以不写全局；配置文件，所有全局配置文件的配置都放在configuration配置项中即可</span></span><br></pre></td></tr></table></figure><p>步骤：</p><ul><li>导入mybatis官方starter</li><li>编写mapper接口。标准@Mapper注解</li><li>编写sql映射文件并绑定mapper接口</li><li>在application.yaml中指定Mapper配置文件的位置，以及指定全局配置文件的信息 （建议；<strong>配置在mybatis.configuration</strong>）</li><li>其他开发则跟以前一样</li></ul><h3 id="混合模式-注解-配置模式"><a href="#混合模式-注解-配置模式" class="headerlink" title="混合模式(注解+配置模式)"></a>混合模式(注解+配置模式)</h3><p><strong>最佳实战：</strong></p><ul><li>引入mybatis-starter</li><li><strong>配置application.yaml中，指定mapper-location位置即可</strong></li><li>编写Mapper接口并标注@Mapper注解</li><li>简单方法直接注解方式</li><li>复杂方法编写mapper.xml进行绑定映射</li><li><em>@MapperScan(“com.atguigu.admin.mapper”) 简化，其他的接口就可以不用标注@Mapper注解</em></li></ul><h2 id="4、整合-MyBatis-Plus-完成CRUD"><a href="#4、整合-MyBatis-Plus-完成CRUD" class="headerlink" title="4、整合 MyBatis-Plus 完成CRUD"></a>4、整合 MyBatis-Plus 完成CRUD</h2><h3 id="1、什么是MyBatis-Plus"><a href="#1、什么是MyBatis-Plus" class="headerlink" title="1、什么是MyBatis-Plus"></a>1、什么是MyBatis-Plus</h3><p><a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><a href="https://baomidou.com/" target="_blank" rel="noopener">mybatis plus 官网</a></p><p>建议安装 <strong>MybatisX</strong> 插件 </p><h3 id="2、整合MyBatis-Plus"><a href="#2、整合MyBatis-Plus" class="headerlink" title="2、整合MyBatis-Plus"></a>2、整合MyBatis-Plus</h3><p>有了下面这个starter，就不用jdbc和mybatis的starter了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动配置</p><ul><li>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。<strong>mybatis-plus：xxx 就是对**</strong>mybatis-plus的定制**</li><li><strong>SqlSessionFactory 自动配置好。底层是容器中默认的数据源</strong></li><li><strong>mapperLocations 自动配置好的。有默认值。**</strong>classpath*:/mapper/*<em>/\</em>.xml；任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。  建议以后sql映射文件，放在 mapper下**</li><li><strong>容器中也自动配置好了</strong> <strong>SqlSessionTemplate</strong></li><li><strong>@Mapper 标注的接口也会被自动扫描；建议直接</strong> @MapperScan(<strong>“com.atguigu.admin.mapper”</strong>) 批量扫描就行</li></ul><p><strong>优点：</strong></p><ul><li>只需要我们的Mapper继承 <strong>BaseMapper</strong> 就可以拥有crud能力</li></ul><h3 id="CRUD功能"><a href="#CRUD功能" class="headerlink" title="CRUD功能"></a>CRUD功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/delete/&#123;id&#125;"</span>)    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id,                             @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"pn"</span>,defaultValue = <span class="string">"1"</span>)</span>Integer pn,                             RedirectAttributes ra)</span>&#123;        userService.removeById(id);        ra.addAttribute(<span class="string">"pn"</span>,pn);        <span class="keyword">return</span> <span class="string">"redirect:/dynamic_table"</span>;    &#125;    <span class="meta">@GetMapping</span>(<span class="string">"/dynamic_table"</span>)    <span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(@RequestParam(value=<span class="string">"pn"</span>,defaultValue = <span class="string">"1"</span>)</span> Integer pn,Model model)</span>&#123;        <span class="comment">//表格内容的遍历//        response.sendError//     List&lt;User&gt; users = Arrays.asList(new User("zhangsan", "123456"),//                new User("lisi", "123444"),//                new User("haha", "aaaaa"),//                new User("hehe ", "aaddd"));//        model.addAttribute("users",users);////        if(users.size()&gt;3)&#123;//            throw new UserTooManyException();//        &#125;        //从数据库中查出user表中的用户进行展示        //构造分页参数        Page&lt;User&gt; page = new Page&lt;&gt;(pn, 2);        //调用page进行分页        Page&lt;User&gt; userPage = userService.page(page, null);//        userPage.getRecords()//        userPage.getCurrent()//        userPage.getPages()        model.addAttribute("users",userPage);        return "table/dynamic_table";    &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Servicepublic</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>,<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;&#125;<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="2、NoSQL"><a href="#2、NoSQL" class="headerlink" title="2、NoSQL"></a>2、NoSQL</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、<strong>缓存</strong>和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes" target="_blank" rel="noopener">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="noopener">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets" target="_blank" rel="noopener">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets" target="_blank" rel="noopener">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps" target="_blank" rel="noopener">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs" target="_blank" rel="noopener">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html" target="_blank" rel="noopener">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html" target="_blank" rel="noopener">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html" target="_blank" rel="noopener">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html" target="_blank" rel="noopener">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">分区（Cluster）</a>提供高可用性（high availability）。</p><h2 id="1、Redis自动配置"><a href="#1、Redis自动配置" class="headerlink" title="1、Redis自动配置"></a>1、Redis自动配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>自动配置：</p><ul><li>RedisAutoConfiguration 自动配置类。RedisProperties 属性类 –&gt; <strong>spring.redis.xxx是对redis的配置</strong></li><li>连接工厂是准备好的。<strong>Lettuce</strong>ConnectionConfiguration、<strong>Jedis</strong>ConnectionConfiguration</li><li><strong>自动注入了RedisTemplate</strong>&lt;<strong>Object</strong>, <strong>Object</strong>&gt; ： xxxTemplate；</li><li><strong>自动注入了StringRedisTemplate；k：v都是String</strong></li><li><strong>key：value</strong></li><li><strong>底层只要我们使用</strong> <strong>StringRedisTemplate、**</strong>RedisTemplate就可以操作redis**</li><li></li></ul><p><strong>redis环境搭建</strong></p><p><strong>1、阿里云按量付费redis。经典网络</strong></p><p><strong>2、申请redis的公网连接地址</strong></p><p><strong>3、修改白名单  允许0.0.0.0/0 访问</strong></p><h2 id="2、RedisTemplate与Lettuce"><a href="#2、RedisTemplate与Lettuce" class="headerlink" title="2、RedisTemplate与Lettuce"></a>2、RedisTemplate与Lettuce</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="function"><span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;        ValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();        operations.set(<span class="string">"hello"</span>,<span class="string">"world"</span>);        String hello = operations.get(<span class="string">"hello"</span>);        System.out.println(hello);    &#125;</span><br></pre></td></tr></table></figure><h2 id="3、切换至jedis"><a href="#3、切换至jedis" class="headerlink" title="3、切换至jedis"></a>3、切换至jedis</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span>            <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span>            <span class="string">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span>        <span class="string">&lt;/dependency&gt;&lt;!--</span>        <span class="string">导入jedis--&gt;</span>        <span class="string">&lt;dependency&gt;</span>            <span class="string">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span>            <span class="string">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span>        <span class="string">&lt;/dependency&gt;spring:</span>  <span class="attr">redis:      host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com      port: 6379      password: lfy:Lfy123456      client-type: jedis      jedis:        pool:          max-active:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="1、JUnit5-的变化"><a href="#1、JUnit5-的变化" class="headerlink" title="1、JUnit5 的变化"></a>1、JUnit5 的变化</h3><p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p><p>作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成。</p><blockquote><p><strong>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p></blockquote><p><strong>JUnit Platform</strong>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</p><p><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p><p><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</p><p>注意：</p><p><strong>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</strong></p><p><strong>JUnit 5’s Vintage Engine Removed from</strong> <strong><code>spring-boot-starter-test,如果需要继续兼容junit4需要自行引入vintage</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果不加@SpringBootTest注解，则该测试类不能使用springboot容器功能，也就是说不具有spring中的自动注入等功能，即该类没有使用springboot的驱动进行测试@SpringBootTestclass Boot05WebAdminApplicationTests &#123;    @Test    void contextLoads() &#123;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>以前：</p><p>@SpringBootTest + @RunWith(SpringTest.class)</p><p>SpringBoot整合Junit以后。</p><ul><li>编写测试方法：@Test标注（注意需要使用junit5版本的注解）</li><li>Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</li></ul><h2 id="JUnit5常用注解"><a href="#JUnit5常用注解" class="headerlink" title="JUnit5常用注解"></a>JUnit5常用注解</h2><p>JUnit5的注解与JUnit4的注解有所变化</p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations" target="_blank" rel="noopener">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p><ul><li><strong>@Test :</strong>表示方法是单元测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li><strong>@ParameterizedTest :</strong>表示方法是参数化测试，下方会有详细介绍</li><li><strong>@RepeatedTest :</strong>表示方法可重复执行，即自动重复运行多少次</li><li><strong>@DisplayName :</strong>为测试类或者测试方法设置展示名称</li><li><strong>@BeforeEach :</strong>表示在每个单元测试之前执行</li><li><strong>@AfterEach :</strong>表示在每个单元测试之后执行</li><li><strong>@BeforeAll :</strong>表示在所有单元测试之前执行，方法要用static修饰</li><li><strong>@AfterAll :</strong>表示在所有单元测试之后执行，方法要用static修饰</li><li><strong>@Tag :</strong>表示单元测试类别，类似于JUnit4中的@Categories</li><li><strong>@Disabled :</strong>表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li><strong>@Timeout :</strong>表示测试方法运行如果超过了指定时间将会返回错误</li><li><strong>@ExtendWith :</strong>为测试类或测试方法提供扩展类引用</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"junit5功能测试类"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Junit5Test</span> </span>&#123;    <span class="meta">@Test</span>    <span class="meta">@DisplayName</span>(<span class="string">"测试displayname注解"</span>)    <span class="function"><span class="keyword">void</span> <span class="title">testDisplayName</span><span class="params">()</span></span>&#123;        System.out.println(<span class="number">1</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://springboot2images.oss-cn-guangzhou.aliyuncs.com/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test; <span class="comment">//注意这里使用的是jupiter的Test注解！！@DisplayName("junit5功能测试类")public class Junit5Test &#123;    //规定方法超时间，超出时间测试出异常    @Timeout(value = 500,unit = TimeUnit.MILLISECONDS)    @Test    @DisplayName("测试displayname注解")    void testDisplayName() throws InterruptedException &#123;//        Thread.sleep(600);        System.out.println(1);    &#125;    @Test    @DisplayName("测试方法2")    @RepeatedTest(2)    void test2()&#123;        System.out.println(2);    &#125;    @BeforeEach    void testBeforeEach()&#123;        System.out.println("测试就要开始了...");    &#125;    @AfterEach    void testAfterEach()&#123;        System.out.println("测试结束了...");    &#125;    @BeforeAll    static void testBeforeAll()&#123;        System.out.println("所有的测试就要开始了...");    &#125;    @AfterAll    static void testAfterAll()&#123;        System.out.println("所有测试已经结束了...");    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果所有的测试就要开始了...测试就要开始了...2测试结束了...测试就要开始了...2测试结束了...测试就要开始了...1测试结束了...所有测试已经结束了...</span></span><br></pre></td></tr></table></figure><h2 id="断言（assertions）"><a href="#断言（assertions）" class="headerlink" title="断言（assertions）"></a>断言（assertions）</h2><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。<strong>这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法</strong>。JUnit 5 内置的断言可以分成如下几个类别：</p><p><strong>检查业务逻辑返回的数据是否合理。</strong></p><p><strong>所有的测试运行结束以后，会有一个详细的测试报告；</strong></p><p><strong>注意：</strong></p><p>如果前面代码前面断言失败，后面的代码都不会执行</p><h3 id="1、简单断言"><a href="#1、简单断言" class="headerlink" title="1、简单断言"></a>1、简单断言</h3><p>用来对单个值进行简单的验证。如：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="meta">@DisplayName</span>(<span class="string">"简单断言"</span>)<span class="function"><span class="keyword">void</span> <span class="title">testSimpleAssertions</span><span class="params">()</span></span>&#123;    <span class="keyword">int</span> cal = cal(<span class="number">2</span>, <span class="number">3</span>);    <span class="comment">//普通值的比较    assertEquals(6,cal,"业务逻辑计算失败");    Object obj01 = new Object();    Object obj02 = new Object();    //对象引用是否指向同一对象    assertSame(obj01,obj02,"两个对象不一样");&#125;int cal(int i, int j)&#123;    return i + j;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-数据断言"><a href="#2-数据断言" class="headerlink" title="2 数据断言"></a>2 数据断言</h3><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组里面的<strong>值</strong>是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="meta">@DisplayName</span>(<span class="string">"array assertion"</span>)<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">array</span><span class="params">()</span> </span>&#123; assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;);&#125;</span><br></pre></td></tr></table></figure><h3 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h3><p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="meta">@DisplayName</span>(<span class="string">"组合断言"</span>)<span class="function"><span class="keyword">void</span> <span class="title">all</span><span class="params">()</span> </span>&#123;    <span class="comment">/*    * 所有断言全部需要成功    * */</span>    assertAll(<span class="string">"test"</span>,            ()-&gt; assertTrue(<span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>,<span class="string">"结果不为true"</span>),            ()-&gt; assertEquals(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"结果错误"</span>));&#125;</span><br></pre></td></tr></table></figure><h2 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h2><p>在JUnit4时期，想要测试方法的异常情况时，需要用<strong>@Rule</strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式<strong>Assertions.assertThrows()</strong> ,配合函数式编程就可以进行使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="meta">@DisplayName</span>(<span class="string">"异常测试"</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionTest</span><span class="params">()</span> </span>&#123;        <span class="comment">//断定业务逻辑一定出现异常        assertThrows(ArithmeticException.class, () -&gt; &#123;            int i = 10/0;        &#125;,"业务逻辑居然正常运行?");    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h2><p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="meta">@DisplayName</span>(<span class="string">"超时测试"</span>)<span class="function"><span class="keyword">void</span> <span class="title">timeoutTest</span><span class="params">()</span> </span>&#123;    <span class="comment">//如果测试方法时间超过1s将会异常    Assertions.assertTimeout(Duration.ofMillis(1000), () -&gt; Thread.sleep(500));&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6、快速失败"><a href="#6、快速失败" class="headerlink" title="6、快速失败"></a>6、快速失败</h2><p>通过 fail 方法直接使得测试失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="meta">@DisplayName</span>(<span class="string">"快速失败"</span>)<span class="function"><span class="keyword">void</span> <span class="title">shouldFail</span><span class="params">()</span> </span>&#123;    <span class="keyword">if</span>(<span class="number">1</span> == <span class="number">1</span>)&#123;        fail(<span class="string">"快速失败"</span>);    &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="前置条件（assumptions）"><a href="#前置条件（assumptions）" class="headerlink" title="前置条件（assumptions）"></a>前置条件（assumptions）</h3><p>JUnit 5 中的前置条件（<strong>assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><h3 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h3><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><h1 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h1><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用<strong>@ValueSource</strong>等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p><p><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</p><p><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</p><p><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</p><p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p><blockquote><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span><span class="meta">@ValueSource</span>(strings = &#123;<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>&#125;)<span class="meta">@DisplayName</span>(<span class="string">"参数化测试1"</span>)<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parameterizedTest1</span><span class="params">(String string)</span> </span>&#123;    System.out.println(string);    Assertions.assertTrue(StringUtils.isNotBlank(string));&#125;<span class="meta">@ParameterizedTest</span><span class="meta">@MethodSource</span>(<span class="string">"method"</span>)    <span class="comment">//指定方法名@DisplayName("方法来源参数")public void testWithExplicitLocalMethodSource(String name) &#123;    System.out.println(name);    Assertions.assertNotNull(name);&#125;static Stream&lt;String&gt; method() &#123;    return Stream.of("apple", "banana");&#125;</span></span><br></pre></td></tr></table></figure><h3 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h3><h4 id="1、SpringBoot-Actuator"><a href="#1、SpringBoot-Actuator" class="headerlink" title="1、SpringBoot Actuator"></a>1、SpringBoot Actuator</h4><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ul><li>引入场景</li><li>访问 <a href="http://localhost:8080/actuator/" target="_blank" rel="noopener">http://localhost:8080/actuator/</a>**</li><li>暴露所有监控信息为HTTP</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:  endpoints:    enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息    web:      exposure:        include: '*'  #以web方式暴露</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p><a href="http://localhost:8080/actuator/beans" target="_blank" rel="noopener">http://localhost:8080/actuator/beans</a></p><p><a href="http://localhost:8080/actuator/configprops" target="_blank" rel="noopener">http://localhost:8080/actuator/configprops</a></p><p><a href="http://localhost:8080/actuator/metrics" target="_blank" rel="noopener">http://localhost:8080/actuator/metrics</a></p><p><a href="http://localhost:8080/actuator/metrics/jvm.gc.pause" target="_blank" rel="noopener">http://localhost:8080/actuator/metrics/jvm.gc.pause</a></p><p><a href="http://localhost:8080/actuator/metrics" target="_blank" rel="noopener">http://localhost:8080/actuator/</a>endpointName/detailPath</p><h1 id="Actuator-Endpoint"><a href="#Actuator-Endpoint" class="headerlink" title="Actuator Endpoint"></a>Actuator Endpoint</h1><h2 id="1、最常使用的端点"><a href="#1、最常使用的端点" class="headerlink" title="1、最常使用的端点"></a>1、最常使用的端点</h2><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回<code>hprof</code>堆转储文件。</td></tr><tr><td><code>jolokia</code></td><td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td></tr><tr><td><code>prometheus</code></td><td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td></tr></tbody></table><p>最常用的Endpoint</p><ul><li><strong>Health：监控状况</strong></li><li><strong>Metrics：运行时指标</strong></li><li><strong>Loggers：日志记录</strong></li></ul><h2 id="2、Health-Endpoint"><a href="#2、Health-Endpoint" class="headerlink" title="2、Health Endpoint"></a>2、Health Endpoint</h2><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p><p>重要的几点：</p><ul><li>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告，所有的组件健康才返回健康(up)</li><li>很多的健康检查默认已经自动配置好了，比如：数据库、redis等</li><li>可以很容易的添加自定义的健康检查机制</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:  endpoints:    enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息    web:      exposure:        include: '*'  #以web方式暴露  endpoint:    health:      show-details: always # 这样才能开启详细信息</span></span><br></pre></td></tr></table></figure><h3 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h3><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到；</p><ul><li>通过Metrics对接多种监控系统</li><li>简化核心Metrics开发</li><li>添加自定义Metrics或者扩展已有Metrics</li></ul><h2 id="管理Endpoints"><a href="#管理Endpoints" class="headerlink" title="管理Endpoints"></a>管理Endpoints</h2><h3 id="1、开启与禁用Endpoints"><a href="#1、开启与禁用Endpoints" class="headerlink" title="1、开启与禁用Endpoints"></a>1、开启与禁用Endpoints</h3><ul><li>默认所有的Endpoint除过shutdown都是开启的。</li><li>需要开启或者禁用某个Endpoint。配置模式为  <strong>management.endpoint.**</strong><endpointname><strong>**.enabled = true</strong></endpointname></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:  endpoint:    beans:      enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>或者禁用所有的Endpoint然后手动开启指定的Endpoint</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:  endpoints:    enabled-by-default: false  endpoint:    beans:      enabled: true    health:      enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="暴露Endpoints"><a href="#暴露Endpoints" class="headerlink" title="暴露Endpoints"></a>暴露Endpoints</h3><p>支持的暴露方式</p><ul><li>HTTP：默认只暴露<strong>health</strong>和<strong>info</strong> Endpoint</li><li><strong>JMX</strong>：默认暴露所有Endpoint</li><li>除过health和info，剩下的Endpoint都应该进行保护访问。如果引入SpringSecurity，则会默认配置安全访问规则</li></ul><table><thead><tr><th>ID</th><th>JMX</th><th>Web</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>Yes</td><td>No</td></tr><tr><td><code>beans</code></td><td>Yes</td><td>No</td></tr><tr><td><code>caches</code></td><td>Yes</td><td>No</td></tr><tr><td><code>conditions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>configprops</code></td><td>Yes</td><td>No</td></tr><tr><td><code>env</code></td><td>Yes</td><td>No</td></tr><tr><td><code>flyway</code></td><td>Yes</td><td>No</td></tr><tr><td><code>health</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>heapdump</code></td><td>N/A</td><td>No</td></tr><tr><td><code>httptrace</code></td><td>Yes</td><td>No</td></tr><tr><td><code>info</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>integrationgraph</code></td><td>Yes</td><td>No</td></tr><tr><td><code>jolokia</code></td><td>N/A</td><td>No</td></tr><tr><td><code>logfile</code></td><td>N/A</td><td>No</td></tr><tr><td><code>loggers</code></td><td>Yes</td><td>No</td></tr><tr><td><code>liquibase</code></td><td>Yes</td><td>No</td></tr><tr><td><code>metrics</code></td><td>Yes</td><td>No</td></tr><tr><td><code>mappings</code></td><td>Yes</td><td>No</td></tr><tr><td><code>prometheus</code></td><td>N/A</td><td>No</td></tr><tr><td><code>scheduledtasks</code></td><td>Yes</td><td>No</td></tr><tr><td><code>sessions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>shutdown</code></td><td>Yes</td><td>No</td></tr><tr><td><code>startup</code></td><td>Yes</td><td>No</td></tr><tr><td><code>threaddump</code></td><td>Yes</td><td>No</td></tr></tbody></table><h1 id="定制-Endpoint"><a href="#定制-Endpoint" class="headerlink" title="定制 Endpoint"></a>定制 Endpoint</h1><h2 id="1、定制-Health-信息"><a href="#1、定制-Health-信息" class="headerlink" title="1、定制 Health 信息"></a>1、定制 Health 信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.Health;<span class="keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;<span class="keyword">import</span> org.springframework.stereotype.Component;<span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;        <span class="keyword">int</span> errorCode = check(); <span class="comment">// perform some specific health check        if (errorCode != 0) &#123;            return Health.down().withDetail("Error Code", errorCode).build();        &#125;        return Health.up().build();    &#125;&#125;//构建HealthHealth build = Health.down()                .withDetail("msg", "error service")                .withDetail("code", "500")                .withException(new RuntimeException())                .build();</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:    health:      enabled: true      show-details:</span> <span class="string">always</span> <span class="comment">#总是显示详细信息。可显示每个模块的状态信息</span></span><br></pre></td></tr></table></figure><p>法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComHealthIndicator</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>&#123;    <span class="comment">/**     * 真实的检查方法     * <span class="doctag">@param</span> builder     * <span class="doctag">@throws</span> Exception     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;        <span class="comment">//mongodb。  获取连接进行测试        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        // 检查完成        if(1 == 2)&#123;//            builder.up(); //健康            builder.status(Status.UP);            map.put("count",1);            map.put("ms",100);        &#125;else &#123;//            builder.down();            builder.status(Status.OUT_OF_SERVICE);            map.put("err","连接超时");            map.put("ms",3000);        &#125;        builder.withDetail("code",100)                .withDetails(map);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="定制info信息"><a href="#定制info信息" class="headerlink" title="定制info信息"></a>定制info信息</h2><p>常用两种方式</p><h4 id="1、编写配置文件"><a href="#1、编写配置文件" class="headerlink" title="1、编写配置文件"></a>1、编写配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:  appName: boot-admin  version: 2.0.1  mavenProjectName:</span> <span class="string">@project.artifactId@</span>  <span class="comment">#使用@@可以获取maven的pom文件值  mavenProjectVersion: @project.version@</span></span><br></pre></td></tr></table></figure><h4 id="2、编写InfoContributor"><a href="#2、编写InfoContributor" class="headerlink" title="2、编写InfoContributor"></a>2、编写InfoContributor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;<span class="keyword">import</span> org.springframework.boot.actuate.info.Info;<span class="keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;<span class="keyword">import</span> org.springframework.stereotype.Component;<span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleInfoContributor</span> <span class="keyword">implements</span> <span class="title">InfoContributor</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contribute</span><span class="params">(Info.Builder builder)</span> </span>&#123;        builder.withDetail(<span class="string">"example"</span>,                Collections.singletonMap(<span class="string">"key"</span>, <span class="string">"value"</span>));    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="定制Metrics信息"><a href="#定制Metrics信息" class="headerlink" title="定制Metrics信息"></a>定制Metrics信息</h2><h4 id="1、SpringBoot支持自动适配的Metrics"><a href="#1、SpringBoot支持自动适配的Metrics" class="headerlink" title="1、SpringBoot支持自动适配的Metrics"></a>1、SpringBoot支持自动适配的Metrics</h4><ul><li><p>JVM metrics, report utilization of:</p></li><li><ul><li>Various memory and buffer pools</li><li>Statistics related to garbage collection</li><li>Threads utilization</li><li>Number of classes loaded/unloaded</li></ul></li><li><p>CPU metrics</p></li><li><p>File descriptor metrics</p></li><li><p>Kafka consumer and producer metrics</p></li><li><p>Log4j2 metrics: record the number of events logged to Log4j2 at each level</p></li><li><p>Logback metrics: record the number of events logged to Logback at each level</p></li><li><p>Uptime metrics: report a gauge for uptime and a fixed gauge representing the application’s absolute start time</p></li><li><p>Tomcat metrics (<code>server.tomcat.mbeanregistry.enabled</code> must be set to <code>true</code> for all Tomcat metrics to be registered)</p></li><li><p><a href="https://docs.spring.io/spring-integration/docs/5.4.1/reference/html/system-management.html#micrometer-integration" target="_blank" rel="noopener">Spring Integration</a> metrics</p></li></ul><h4 id="2、增加定制Metrics"><a href="#2、增加定制Metrics" class="headerlink" title="2、增加定制Metrics"></a>2、增加定制Metrics</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyService</span></span>&#123;    Counter counter;    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(MeterRegistry meterRegistry)</span></span>&#123;         counter = meterRegistry.counter(<span class="string">"myservice.method.running.counter"</span>);    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;        counter.increment();    &#125;&#125;<span class="comment">//也可以使用下面的方式@BeanMeterBinder queueSize(Queue queue) &#123;    return (registry) -&gt; Gauge.builder("queueSize", queue::size).register(registry);&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4、定制Endpoint"><a href="#4、定制Endpoint" class="headerlink" title="4、定制Endpoint"></a>4、定制Endpoint</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="meta">@Endpoint</span>(id = <span class="string">"container"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerEndpoint</span> </span>&#123;    <span class="meta">@ReadOperation</span>    <span class="function"><span class="keyword">public</span> Map <span class="title">getDockerInfo</span><span class="params">()</span></span>&#123;        <span class="keyword">return</span> Collections.singletonMap(<span class="string">"info"</span>,<span class="string">"docker started..."</span>);    &#125;    <span class="meta">@WriteOperation</span>    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restartDocker</span><span class="params">()</span></span>&#123;        System.out.println(<span class="string">"docker restarted...."</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><p>场景：开发<strong>ReadinessEndpoint</strong>来管理程序是否就绪，或者<strong>Liveness**</strong>Endpoint**来管理程序是否存活；</p><p>当然，这个也可以直接使用 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用开发软件的个人偏好设置</title>
      <link href="2021/05/07/%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/05/07/%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="常用开发软件的个人喜好配置"><a href="#常用开发软件的个人喜好配置" class="headerlink" title="常用开发软件的个人喜好配置"></a>常用开发软件的个人喜好配置</h1><p>下面是我个人常用，看得舒服的配置，有idea、maven</p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="导入Eclipse快捷键"><a href="#导入Eclipse快捷键" class="headerlink" title="导入Eclipse快捷键"></a>导入Eclipse快捷键</h3><p>因为个人使用IDE的情况不同，对于从Eclipse到IDEA的老玩家来说，IDEA自带可以导入其他IDE的快捷键可谓相当友好</p><ol><li>依次点击菜单栏中的“File”-&gt;“Import Settings”</li><li>选择需要的快捷键jar包(需要的可以邮箱留言)<ul><li>那么为什么不在settings –&gt; Keymap –&gt; 选择Eclipse呢</li><li>因为那里的Eclipse的快捷键不全，所以我们需要导入一个全的jar包</li></ul></li><li>一直点ok，然后重启即可</li><li>检验是否导入成功：依次点击菜单栏中的 File –&gt; Settings –&gt; Keymap 中我们就可以看到导入的jar包了</li></ol><blockquote><p>以下操作均在 File –&gt; settings中进行</p></blockquote><h3 id="设置鼠标悬浮提示"><a href="#设置鼠标悬浮提示" class="headerlink" title="设置鼠标悬浮提示"></a>设置鼠标悬浮提示</h3><p><code>Editor --&gt; General --&gt; 勾选show quick documentation on mouse move</code></p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ol><li>设置鼠标滚轮滚动修改字体大小：</li></ol><p><code>Editor --&gt; General --&gt; 勾选change font size(Zoom) with Ctrl+Mouse Wheel</code></p><ol start="2"><li>敲代码时自动导入开发包：</li></ol><p><code>Editor --&gt; General --&gt; 勾选Add unambiguous imports on the fly 和 Optimize imports on the fly</code></p><ul><li>Add unambiguous imports on the fly：自动导入不明确的结构</li><li>Optimize imports on the fly：自动帮我们优化导入的包</li></ul><ol start="3"><li>编辑区字体大小</li></ol><p><code>Editor --&gt; General --&gt; Font</code> </p><p>我喜欢的字体：consolas  大小：18   行距：1.2</p><ol start="4"><li>控制台输出的字体</li></ol><p><code>Editor --&gt; Color Scheme--&gt; Console Font --&gt; 勾选Use console font instread of the default --&gt; 再选择自己喜欢的字体等</code> </p><h3 id="设置多行显示标签页（Tabs）的操作"><a href="#设置多行显示标签页（Tabs）的操作" class="headerlink" title="设置多行显示标签页（Tabs）的操作"></a>设置多行显示标签页（Tabs）的操作</h3><p><code>Editor --&gt; General --&gt; Editor Tabs --&gt; 勾选show tabs in one row</code></p><h3 id="修改类头的文档注释信息"><a href="#修改类头的文档注释信息" class="headerlink" title="修改类头的文档注释信息"></a>修改类头的文档注释信息</h3><p><img src="https://settingsimages.oss-cn-guangzhou.aliyuncs.com/%E7%B1%BB%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF.jpg" alt></p><h3 id="设置项目文件编码"><a href="#设置项目文件编码" class="headerlink" title="设置项目文件编码"></a>设置项目文件编码</h3><p><code>Editor --&gt; File Encodings--&gt; 都用utf8且勾选Transparent native-to-ascii conversion</code></p><ul><li>Transparent native-to-ascii conversion：主要用于转换 ascii，一般都要勾选， 不然 Properties 文件中的注释显示的都不会是中文。</li></ul><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="设置仓库的位置"><a href="#设置仓库的位置" class="headerlink" title="设置仓库的位置"></a>设置仓库的位置</h3><p>以后下载的依赖都会存放在这个位置</p><ol><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在上述指定的文件路径中新建一个maven文件，并且把conf中的settings复制一份到新的maven文件中，idea选择这个文件中的settings.xml和repo</p></li></ol><h3 id="配置阿里云的镜像"><a href="#配置阿里云的镜像" class="headerlink" title="配置阿里云的镜像"></a>配置阿里云的镜像</h3><p>让maven使用阿里云的镜像，这样下载依赖就会很快<br>添加阿里云的镜像到maven的setting.xml配置中，这样就不需要在每个pom中都添加镜像仓库的配置，在mirrors节点下面添加子节点：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="让maven使用jdk1-8来进行项目的编译"><a href="#让maven使用jdk1-8来进行项目的编译" class="headerlink" title="让maven使用jdk1.8来进行项目的编译"></a>让maven使用jdk1.8来进行项目的编译</h3><p>这样就会避免一些逻辑开发中的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><ol><li>typora –&gt; 偏好设置  –&gt; 打开调式模式 –&gt; 定位所需要修改的网页元素</li><li>typora –&gt; 偏好设置 –&gt; 外观 –&gt;  打开主题文件夹  –&gt; 进到对应的主题css，修改即可</li></ol><p>区块颜色更改为绿色，默认是灰色的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="number">#62ca38</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="2021/05/05/linux/"/>
      <url>2021/05/05/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>说明：</strong></p><ul><li>这里是基于java全栈开发的linux，而不是运维级别的开发</li><li>系统是基于centos 7 （6、7、8版本区别大）</li></ul><p><strong>准备工作：</strong></p><ul><li>购买阿里云服务器（或虚拟机）</li><li>下载好putty或者xshell（用来远程控制服务器）和winscp或xftp工具（用来上传文件）</li><li>购买完之后，获取服务器的公网ip地址、重置服务器登录密码，就可以远程登录了</li></ul><p><strong>关于安全组的说明（很重要）：</strong></p><ul><li>如果要打开端口，需要同时开启linux防火墙和阿里云的安全组面板中开启对应的出入规则，否则就算你在linux的防火墙中开启了端口，而没有在阿里云中开发对应的端口，也会被阿里拦截。</li></ul><p><strong>简介：</strong></p><ul><li>linux一切皆文件</li><li>程序在windows叫做服务(service)，而在Linux中就叫做“守护进程”(daemon)</li></ul><h2 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h2><blockquote><p><strong>开机登录</strong></p></blockquote><p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>ssh登录（putty中使用的协议）</li><li>图形界面登录（宝塔）</li></ul><p>最高权限账户为root，可以操作一切</p><blockquote><p><strong>关机</strong></p></blockquote><p>服务器很少遇到关机的操作，除非在特殊情况下，不得已才会关机。</p><p>关机指令：shutdown</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sync <span class="comment">#将数据由内存同步到硬盘中。一般在重启系统还是开启系统前都要执行的操作</span></span><br><span class="line"></span><br><span class="line">shutdown <span class="comment"># 关机指令，你可以man shutdown来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class="line"></span><br><span class="line">shutdown-h now <span class="comment"># 立马关机</span></span><br><span class="line"></span><br><span class="line">shutdown-h +10 <span class="comment"># 这个命令告诉大家，计算机将在10分钟后关机</span></span><br><span class="line"></span><br><span class="line">shutdown-h 20：25<span class="comment"># 系统会在今天20：25关机shutdown-h+10#十分钟后关机</span></span><br><span class="line"></span><br><span class="line">shutdown-r now <span class="comment"># 系统立马重启</span></span><br><span class="line"></span><br><span class="line">shutdown-r +10 <span class="comment"># 系统十分钟后重启</span></span><br><span class="line"></span><br><span class="line">reboot <span class="comment"># 就是重启，等同于shutdown-r now </span></span><br><span class="line"></span><br><span class="line">halt <span class="comment"># 关闭系统，等同于shutdown -h now和poweroff</span></span><br></pre></td></tr></table></figure><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote><p><strong>系统目录结构</strong></p></blockquote><ol><li>根目录 / ，所有的文件都挂载在这个节点下</li></ol><p><img src="https://linuximagess.oss-cn-shenzhen.aliyuncs.com/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p><p><strong>以下是对这些目录的解释：</strong></p><ul><li>/bin是Binary的缩写，这个目录存放着最经常使用的命令。</li><li>/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。（不要动）</li><li>/dev：dev是Device（设备）的缩写，存放的是Linux的外部设备，比如u盘。在Linux中访问设备的方式和访问文件的方式是相同的。</li><li><strong>/etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。</strong></li><li><strong>/home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</strong></li><li>/lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。</li><li>/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>/media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到</li><li>这个目录下。·/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li><li><strong>/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</strong></li><li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li><strong>/root：该目录为系统管理员，也称作超级权限者的用户主目录。</strong></li><li>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>/srv：该目录存放一些服务启动之后需要提取的数据。</li><li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li><li><strong>/tmp：这个目录是用来存放一些临时文件的。用完即丢的文件可以放在这个目录下，比如安装包</strong></li><li><strong>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</strong></li><li>/usr/bin：系统用户使用的应用程序。</li><li>·/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。</li><li>/usr/src：内核源代码默认的放置目录。</li><li>/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li></ul><h4 id="cds"><a href="#cds" class="headerlink" title="cds"></a>cds</h4><blockquote><p><strong>cd（切换目录）</strong></p></blockquote><p>cd（change dir）</p><p>/：根目录</p><p>./ ：当前目录</p><p>cd ..：返回上一级目录</p><p>~ ：用户目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp ~]<span class="comment"># cd /</span></span><br><span class="line">[root@hbp /]<span class="comment"># cd /home</span></span><br><span class="line">[root@hbp home]<span class="comment"># cd ..</span></span><br></pre></td></tr></table></figure><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><blockquote><p><strong>ls（列出目录）</strong></p></blockquote><p>列出当前文件夹的所有文件。</p><p>可接参数：</p><ul><li>-a：all，查看全部的文件，包括隐藏文件</li><li>-l：列出所有的文件，包括文件的属性和权限，但不包括隐藏文件 </li><li>所有的linux命令可以组合使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp /]<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class="line">boot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class="line">[root@hbp /]<span class="comment"># ls -a</span></span><br><span class="line">.   .autorelabel  boot  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">..  bin           dev   home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@hbp /]<span class="comment"># ls -l</span></span><br><span class="line">total 60</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Apr 26  2020 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Apr 26  2020 boot</span><br><span class="line">drwxr-xr-x  19 root root  2960 Feb 23 09:27 dev</span><br><span class="line">drwxr-xr-x. 76 root root  4096 Feb 22 21:05 etc</span><br><span class="line">drwxr-xr-x.  2 root root  4096 Apr 11  2018 home</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">[root@hbp /]<span class="comment"># ls -al</span></span><br><span class="line">total 68</span><br><span class="line">dr-xr-xr-x. 18 root root  4096 Feb 22 21:05 .</span><br><span class="line">dr-xr-xr-x. 18 root root  4096 Feb 22 21:05 ..</span><br><span class="line">-rw-r--r--   1 root root     0 Apr 26  2020 .autorelabel</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Apr 26  2020 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Apr 26  2020 boot</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><blockquote><p><strong>pwd显示当前所在的目录</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp /]<span class="comment"># cd /usr/local</span></span><br><span class="line">[root@hbp <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><blockquote><p><strong>mkdir 创建目录</strong></p></blockquote><p>可接参数：</p><ul><li>-r：递归创建多个目录</li></ul><p>创建单个目录：mkdir 文件夹名</p><p>创建层级目录：mkdir -p 文件夹1/文件夹2/…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">[root@hbp home]<span class="comment"># mkdir test2</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">test2</span><br><span class="line">[root@hbp home]<span class="comment"># mkdir -p test2/test3/test4</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">test2</span><br><span class="line">[root@hbp home]<span class="comment"># cd test2</span></span><br><span class="line">[root@hbp test2]<span class="comment"># ls</span></span><br><span class="line">test3</span><br></pre></td></tr></table></figure><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><blockquote><p><strong>rmdir 删除目录</strong></p></blockquote><p>可接参数：</p><ul><li>-p：递归创建多个目录</li></ul><p>rmdir仅能删除空的目录，如果下面存在文件，需要先删除文件；递归删除多个目录加个-p参数即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">test1  test2</span><br><span class="line">[root@hbp home]<span class="comment"># rmdir test1</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">test2</span><br><span class="line">[root@hbp home]<span class="comment"># rmdir test2</span></span><br><span class="line">rmdir: failed to remove ‘test2’: Directory not empty</span><br><span class="line">[root@hbp home]<span class="comment"># rmdir -p test2/test3/test4</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">[root@hbp home]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><blockquote><p><strong>cp（复制文件或目录）</strong></p></blockquote><p>可接参数：</p><ul><li>-r：复制目录的话 ，需要加这个参数</li></ul><p>cp 原来的地方 新的地方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">hbp  test1</span><br><span class="line">[root@hbp home]<span class="comment"># cd test1</span></span><br><span class="line">[root@hbp test1]<span class="comment"># ls</span></span><br><span class="line">[root@hbp test1]<span class="comment"># cd ..</span></span><br><span class="line">[root@hbp home]<span class="comment"># cp -r hbp test1</span></span><br><span class="line">[root@hbp home]<span class="comment"># cd test1</span></span><br><span class="line">[root@hbp test1]<span class="comment"># ls</span></span><br><span class="line">hbp</span><br><span class="line">[root@hbp test1]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><blockquote><p><strong>rm（移除文件或者目录）</strong></p></blockquote><p>可接参数：</p><ul><li>-f：忽略不存在的文件，不会出现警告，强制删除</li><li>-r：递归删除目录</li><li>-i：互动，删除询问是否删除</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="comment"># 后面可加多个参数，非常危险，删库跑路的做法</span></span><br></pre></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><blockquote><p><strong>mv 移动文件或者目录或者重命名文件</strong></p></blockquote><p>可接参数：</p><ul><li>-f：强制</li><li>-u：只替换已经更新过的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">hbp  test1</span><br><span class="line">[root@hbp home]<span class="comment"># mv hbp test1</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">test1</span><br><span class="line">[root@hbp home]<span class="comment"># cd test1</span></span><br><span class="line">[root@hbp test1]<span class="comment"># ls</span></span><br><span class="line">hbp</span><br><span class="line">[root@hbp test1]<span class="comment"># cd ..</span></span><br><span class="line">[root@hbp home]<span class="comment"># mv test1 test2 </span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">test2</span><br></pre></td></tr></table></figure><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><p>Linux系统是一种典型的多用户系统，不同的用户拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用 <code>ls -ll</code>或者<code>ls –l</code>或<code>ll</code>命令来显示一个文件的属性以及文件所属的用户和组，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp /]<span class="comment"># ls -l</span></span><br><span class="line">total 60</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Apr 26  2020 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Apr 26  2020 boot</span><br><span class="line">drwxr-xr-x  19 root root  2960 Feb 23 09:27 dev</span><br><span class="line">drwxr-xr-x. 76 root root  4096 Feb 22 21:05 etc</span><br><span class="line">drwxr-xr-x.  3 root root  4096 Feb 23 11:22 home</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>每个文件的属性由左边第一部分的10个字符来确定</p><table><thead><tr><th align="center">文件类型</th><th align="center">属主属性(root)</th><th align="center">属组属性</th><th align="center">其他用户权限</th></tr></thead><tbody><tr><td align="center">l</td><td align="center">1      2     3</td><td align="center">1      2     3</td><td align="center">1      2     3</td></tr><tr><td align="center">d</td><td align="center">r      w     x</td><td align="center">r      -     x</td><td align="center">r      -     x</td></tr><tr><td align="center">目录文件</td><td align="center">读   写   执行</td><td align="center">读   写   执行</td><td align="center">读   写   执行</td></tr></tbody></table><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )，相当于windows当中的快捷方式</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>除了第一个字符外，接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已</p><p>Linux文件属性有两种设置方法，一种是数字（常用），一种是符号。</p><p>Linux文件的基本权限就有9个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:4     w:2         x:1</span><br></pre></td></tr></table></figure><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><blockquote><p><strong>chgrp：更改文件属组</strong></p></blockquote><p>可接参数：</p><ul><li>-R： 递归更改文件属组</li></ul><p>chgrp -R 属性名 文件名</p><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><blockquote><p><strong>chown：更改文件属主，可以同时更改文件属组</strong></p></blockquote><p>可接参数：</p><ul><li>-r： 递归更改文件属组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><blockquote><p><strong>chmod：更改文件9个属性</strong></p></blockquote><p>在操作中，你可能会遇到这种情况：”你没有权限操作此文件”</p><p>可接参数：</p><ul><li>-R： 递归更改文件属组</li><li>+：表示增加权限、- 表示取消权限、= 表示唯一设定权限<ul><li>r 表示可读取，w 表示可写入，x 表示可执行</li></ul></li></ul><p>chmod [-R] xyz 文件或目录</p><p>chmod +x 文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># ls -l</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 23 14:01 test1</span><br><span class="line">drwxr-xr-x 3 root root 4096 Feb 23 11:22 test2</span><br><span class="line">[root@hbp home]<span class="comment"># chmod 777 test2</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls -l</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 23 14:01 test1</span><br><span class="line">drwxrwxrwx 3 root root 4096 Feb 23 11:22 test2</span><br></pre></td></tr></table></figure><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><p>Linux系统中使用以下命令来查看文件的内容</p><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><blockquote><p>cat 由第一行开始显示文件内容，用来读文章，或者读配置文件，都是用cat</p></blockquote><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><blockquote><p>tac从最后一行开始显示，可以看出tac是cat的倒写</p></blockquote><h4 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h4><blockquote><p> nl显示的时候，顺便显示行号；看代码时，想顺便显示行号\</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp network-scripts]<span class="comment"># nl ifcfg-eth0</span></span><br><span class="line">1  <span class="comment"># Created by cloud-init on instance boot automatically, do not edit.</span></span><br><span class="line">2  <span class="comment"># If you don't want cloud-init genrated automatically,you can disable it in /etc/cloud/cloud.cfg</span></span><br><span class="line">3  <span class="comment"># For more information, please refer to: https://help.aliyun.com/document_detail/57803.html</span></span><br><span class="line">4  <span class="comment">#</span></span><br><span class="line">5  BOOTPROTO=dhcp</span><br><span class="line">6  DEVICE=eth0</span><br><span class="line">7  ONBOOT=yes</span><br><span class="line">8  STARTMODE=auto</span><br><span class="line">9  TYPE=Ethernet</span><br><span class="line">10  USERCTL=no</span><br></pre></td></tr></table></figure><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><blockquote><p>more 一页一页地显示文件内容（空格表示翻页；enter表示向下看一行； :f表示显示当前行号）</p></blockquote><ul><li><strong>less与more类似，但是比more更好的是，它可以往前翻页（空格下翻页，上下键代表翻动页面，退出q命令，查找字符串/要查询的字符向下查询，向上查询使用？要查询的字符串，n继续搜寻下一个，N上寻找）</strong></li></ul><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><blockquote><p>head只看头几行</p></blockquote><p>可接参数：</p><ul><li>-n 页数：表示显示多少行</li></ul><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><blockquote><p>tail只看尾巴几行</p></blockquote><p>可接参数：</p><ul><li>-n 页数：表示显示多少行</li></ul><p><strong>Linux链接概念</strong></p><p>Linux的链接分为两种：硬链接、软链接</p><p>硬链接：B—&gt;A  假设B是A的硬链接，那么他们两个指向了同一个文件，那么假如A删掉了，只要B没删，那么A里面的内容，B也是能访问到的。用户可以通过这种机制建立硬链接到一些重要的文件上，防止误删！</p><p>软链接：相当于window里的快捷方式</p><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><blockquote><p>ln 创建链接</p></blockquote><ul><li>-s：为创建软链接</li></ul><p>ln [-s] 被指向的文件  链接文件</p><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><blockquote><p>touch创建文件</p></blockquote><blockquote><p>echo输入字符串</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># touch f1</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">f1</span><br><span class="line">[root@hbp home]<span class="comment"># ln f1 f2      # 创建硬链接，f2--&gt;f1</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">f1  f2</span><br><span class="line">[root@hbp home]<span class="comment"># ln -s f1 f3       # 创建软链接，f3--&gt;f1</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">f1  f2  f3</span><br><span class="line">[root@hbp home]<span class="comment"># ls -l</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 2 root root 0 Feb 24 09:23 f1</span><br><span class="line">-rw-r--r-- 2 root root 0 Feb 24 09:23 f2</span><br><span class="line">lrwxrwxrwx 1 root root 2 Feb 24 09:24 f3 -&gt; f1</span><br><span class="line">[root@hbp home]<span class="comment"># echo "i am a student"&gt;&gt;f1   # 向f1中输入字符串</span></span><br><span class="line">[root@hbp home]<span class="comment"># ll</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 2 root root 15 Feb 24 09:25 f1</span><br><span class="line">-rw-r--r-- 2 root root 15 Feb 24 09:25 f2</span><br><span class="line">lrwxrwxrwx 1 root root  2 Feb 24 09:24 f3 -&gt; f1</span><br><span class="line">[root@hbp home]<span class="comment"># cat f1</span></span><br><span class="line">i am a student</span><br><span class="line">[root@hbp home]<span class="comment"># cat f2</span></span><br><span class="line">i am a student</span><br><span class="line">[root@hbp home]<span class="comment"># cat f3</span></span><br><span class="line">i am a student</span><br><span class="line">[root@hbp home]<span class="comment"># rm -rf f1</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">f2  f3</span><br><span class="line">[root@hbp home]<span class="comment"># cat f2</span></span><br><span class="line">i am a student</span><br><span class="line">[root@hbp home]<span class="comment"># cat f3</span></span><br><span class="line">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure><h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>vi/vim 共分为三种模式，分别是<strong>命令模式</strong>，<strong>输入模式</strong>和<strong>底线命令模式</strong>。这三种模式的作用分别是：</p><p><strong>命令模式：</strong></p><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符， i 被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。如果是编辑模式，需要先退出编辑模式ESC</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下 i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><p><strong>输入模式：</strong></p><p>在命令模式下按下 i 就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页 </li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><p><strong>底线命令模式</strong></p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li><li>wq 保存并退出（常用）</li></ul><p>按ESC键可随时退出底线命令模式。</p><p><strong>简单的Vin使用：vim命令新建或者编辑文件，按 i 进行编辑模式，编写内容，编写完成后退出编辑模式esc， :wq 退出之后进行底线命令模式</strong></p><h4 id="set-number"><a href="#set-number" class="headerlink" title="set number"></a>set number</h4><blockquote><p>set number ：显示行号</p></blockquote><h4 id="shift-3"><a href="#shift-3" class="headerlink" title="shift + 3"></a>shift + 3</h4><blockquote><p>shift + 3 ：在输入法中文模式下，高亮相关命令，通过N或n进行下一个匹配</p></blockquote><h4 id="set-nohls"><a href="#set-nohls" class="headerlink" title="set nohls"></a>set nohls</h4><blockquote><p>set nohls ：取消高亮(着色标记)</p></blockquote><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><p>用户账号的管理：</p><p>用户账号的管理工作主要涉及到用户账号的增删改</p><p>增：在系统中创建一个新账号 ，然后为新账号分配用户号，用户组，主目录</p><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><blockquote><p><strong>useradd 添加用户</strong></p></blockquote><p>可接参数：</p><ul><li>-m：自动创建这个用户的主目录/home/hbp</li><li>-G：给用户分配组</li></ul><p>理解本质：Linux中一切皆文件，这里的添加用户说白了就是往某一个文件中写入用户的信息了 <code>/etc/passwd</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># useradd -m hbp</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">f2  f3  hbp  hbp.txt</span><br><span class="line">[root@hbp home]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><blockquote><p><strong>userdel 删除用户</strong></p></blockquote><ul><li>-r：删除用户的时候将他的目录也一并删掉</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># userdel -r hbp</span></span><br><span class="line">[root@hbp home]<span class="comment"># ls</span></span><br><span class="line">f2  f3  hbp.txt</span><br><span class="line">[root@hbp home]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><blockquote><p><strong>usermod 修改用户</strong></p></blockquote><p>usermod 对应修改的内容 修改那个用户</p><ul><li>-d 目录 指定用户主目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp etc]<span class="comment"># usermod -d /home/233 hbp</span></span><br></pre></td></tr></table></figure><p>修改完毕之后查看配置文件即可</p><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><blockquote><p><strong>切换用户</strong></p></blockquote><ol><li><p>切换用户的命令为：su username【username是你的用户名】</p></li><li><p>从普通用户切换到root用户，还可以使用命令：sudo su</p></li><li><p>在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p></li><li><p>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su-root】<br>$表示普通用户</p><p>#表示超级用户，也就是root用户</p></li></ol><blockquote><p><strong>用户的密码设置</strong></p></blockquote><p>passwd username </p><p>我们一般通过root创建用户的时候，要配置密码</p><p>在Linux中输入密码是不会显示出来的，正常输入就行了</p><blockquote><p>锁定账户</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -l hbp <span class="comment"># 锁定之后就不能登录了</span></span><br></pre></td></tr></table></figure><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4><blockquote><p>groupadd 创建一个用户组</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># groupadd yellowbp</span></span><br><span class="line">[root@hbp home]<span class="comment"># cat /etc/group</span></span><br></pre></td></tr></table></figure><p>创建完用户之后可以得到一个组的id，当然这个id是可以指定的，如果不指定就是自增1</p><ul><li>-g参数：-g 数组</li></ul><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><blockquote><p>groupdel 删除用户组</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># groupdel yellowbp</span></span><br><span class="line">[root@hbp home]<span class="comment"># cat /etc/group</span></span><br></pre></td></tr></table></figure><h4 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h4><blockquote><p>groupmod 修改用户组的权限和名字</p></blockquote><ul><li>-g 修改id</li><li>-n 修改名字</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># groupmod -g 666 -n newhbp hbp</span></span><br></pre></td></tr></table></figure><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote><p>df (列出文件系统整体的磁盘使用量)     du（检查磁盘空间使用量）</p></blockquote><p>df：</p><ul><li>-h：按照G或M查看</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs         1929764       0   1929764   0% /dev</span><br><span class="line">tmpfs            1940124       0   1940124   0% /dev/shm</span><br><span class="line">tmpfs            1940124     488   1939636   1% /run</span><br><span class="line">tmpfs            1940124       0   1940124   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       41152812 2052444  37196660   6% /</span><br><span class="line">tmpfs             388028       0    388028   0% /run/user/0</span><br><span class="line">[root@hbp ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs           1.9G  488K  1.9G   1% /run</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        40G  2.0G   36G   6% /</span><br><span class="line">tmpfs           379M     0  379M   0% /run/user/0</span><br></pre></td></tr></table></figure><p>du：</p><ul><li>-a参数：就是查看隐藏文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp home]<span class="comment"># du</span></span><br><span class="line">20      ./hbp</span><br><span class="line">32      .</span><br><span class="line">[root@hbp home]<span class="comment"># du -h</span></span><br><span class="line">20K     ./hbp</span><br><span class="line">32K     .</span><br><span class="line">[root@hbp home]<span class="comment"># du -ha</span></span><br><span class="line">4.0K    ./hbp.txt</span><br><span class="line">4.0K    ./hbp/.bash_logout</span><br><span class="line">4.0K    ./hbp/.bash_profile</span><br><span class="line">4.0K    ./hbp/.bash_history</span><br><span class="line">4.0K    ./hbp/.bashrc</span><br><span class="line">20K     ./hbp</span><br><span class="line">0       ./f3</span><br><span class="line">4.0K    ./f2</span><br><span class="line">32K     .</span><br></pre></td></tr></table></figure><blockquote><p>du -sm /* 查看根目录下每个目录所占用的用量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@hbp /]<span class="comment"># du -sm /*</span></span><br><span class="line">0       /bin</span><br><span class="line">146     /boot</span><br><span class="line">0       /dev</span><br><span class="line">34      /etc</span><br><span class="line">1       /home</span><br><span class="line">0       /lib</span><br><span class="line">0       /lib64</span><br><span class="line">1       /lost+found</span><br><span class="line">1       /media</span><br><span class="line">1       /mnt</span><br><span class="line">1       /opt</span><br><span class="line">du: cannot access ‘/proc/11475/task/11475/fd/4’: No such file or directory</span><br><span class="line">du: cannot access ‘/proc/11475/task/11475/fdinfo/4’: No such file or directory</span><br><span class="line">du: cannot access ‘/proc/11475/fd/4’: No such file or directory</span><br><span class="line">du: cannot access ‘/proc/11475/fdinfo/4’: No such file or directory</span><br><span class="line">0       /proc</span><br><span class="line">1       /root</span><br><span class="line">1       /run</span><br><span class="line">0       /sbin</span><br><span class="line">1       /srv</span><br><span class="line">0       /sys</span><br><span class="line">76      /tmp</span><br><span class="line">1570    /usr</span><br><span class="line">132     /var</span><br></pre></td></tr></table></figure><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>概述：</p><ol><li>在Linux中，每一个程序都是有自己一个进程，每一个进程都有一个id号（pid）</li><li>每一个进程，都会有一个父进程（ppid）</li><li>进程可以有两种存放方式：前台和后台</li><li>通常服务都是后台运行的，基本的程序</li></ol><blockquote><p>ps 查看当前系统中正在执行的各种进程的信息 </p></blockquote><p>ps命令是Process Status的缩写</p><p>可接参数：</p><ul><li>-a：显示当前终端运行的所有的进程信息</li><li>-e：同-a表示全部</li><li>-f：全格式，简单来说就是指显示用户id，进程id，父进程id，最近CPU使用情况，进程开始时间等等</li><li>-u：以用户的信息显示进程</li><li>-x：显示后台运行进程的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># | 在Linux中叫做管道符  A|B 即：将A命令的结果作为输出来操作B命令</span></span><br><span class="line"><span class="comment"># grep 查找文件中符合条件的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps -aux 查看所有的进程</span></span><br><span class="line">ps -aux|grep mysql</span><br><span class="line">ps -aux|grep java <span class="comment">#查看tomcat进程是否在正常运行</span></span><br></pre></td></tr></table></figure><p>我们只需要记住一个命令即可： <strong>ps  -xx|grep</strong> 进程名字   过滤进程信息</p><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><blockquote><p>netstat 查看当前tcp端口占用情况</p></blockquote><p>可接参数：</p><ul><li>-n：直接使用IP地址，而不通过域名服务器</li><li>-l：显示监控中的服务器的Socket</li><li>-t：显示TCP传输协议的连线状况。</li><li>-p：显示正在使用Socket的程序识别码(PID)和程序名称</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-u4lbn53s ~]<span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      8725/redis-server 0 </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2298/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1194/master         </span><br><span class="line">tcp6       0      0 :::7999                 :::*                    LISTEN      17289/java          </span><br><span class="line">tcp6       0      0 :::8000                 :::*                    LISTEN      18363/java          </span><br><span class="line">tcp6       0      0 :::8001                 :::*                    LISTEN      19422/java          </span><br><span class="line">tcp6       0      0 :::8002                 :::*                    LISTEN      20470/java          </span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      2238/mysqld         </span><br><span class="line">tcp6       0      0 :::781                  :::*                    LISTEN      2361/./bcm-agent    </span><br><span class="line">tcp6       0      0 :::8848                 :::*                    LISTEN      10838/java          </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      2298/sshd           </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1194/master</span><br></pre></td></tr></table></figure><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><blockquote><p>kill  结束进程</p></blockquote><p>kill -9 进程的id 表示强制结束该进程</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashMap</title>
      <link href="2021/04/06/hashMap/"/>
      <url>2021/04/06/hashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="hashMap集合详解"><a href="#hashMap集合详解" class="headerlink" title="hashMap集合详解"></a>hashMap集合详解</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HashMap 基于哈希表的 Map 接口实现，是以 key-value 存储形式存在，即主要用来存放键值对。HashMap 的实现不是同步的，这意味着它不是线程安全的。它的 key、value 都可以为 null，此外，HashMap 中的映射是无序的。</p><p>jdk1.8 之前 HashMap 由 数组 + 链表 组成，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突（两个对象调用的 hashCode 方法计算的哈希值经哈希函数(因为还要考虑数组大小)算出来的数组索引被其他元素占用）而存在的（“拉链法”解决冲突）。jdk1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（或者红黑树的边界值，默认为 8 ）并且当前数组的长度大于 64 时，此时此索引位置上的所有数据改为使用红黑树存储。</p><p>补充：将链表转换成红黑树前会判断，即便阈值大于 8，但是数组长度小于 64，此时并不会将链表变为红黑树，而是选择逬行数组扩容（2倍）。</p><p>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑树需要逬行左旋，右旋，变色这些操作来保持平衡。同时数组长度小于64时，搜索时间相对要快些。所以结上所述为了提高性能和减少搜索时间，底层阈值大于8并且数组长度大于64时，链表才转换为红黑树。</p><p>小结：</p><p>HashMap 特点：</p><ol><li>存储无序的。</li><li>键和值位置都可以是 null，但是键位置只能存在一个 null。</li><li>键位置是唯一的，是底层的数据结构控制的。</li><li>jdk1.8 前数据结构是<strong>链表+数组</strong>，jdk1.8 之后是链表+数组+红黑树。</li><li>阈值（边界值）&gt; 8 并且数组长度大于 64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。</li></ol><h2 id="存储数据过程"><a href="#存储数据过程" class="headerlink" title="存储数据过程"></a>存储数据过程</h2><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"柳岩"</span>,<span class="number">18</span>);</span><br><span class="line">map.put(<span class="string">"杨幂"</span>,<span class="number">28</span>);</span><br><span class="line">map.put(<span class="string">"刘德华"</span>,<span class="number">40</span>);</span><br><span class="line">map.put(<span class="string">"柳岩"</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ol><li><p>当创建 HashMap 集合对象的时候，HashMap 的构造方法并没有创建数组，而是在第一次调用 put 方法时创建一个长度是16 的数组 Node[] table （jdk1.8 之前是 Entry[] table）用来存储键值对数据。</p></li><li><p>假设向哈希表中存储 &lt;柳岩,18&gt; 数据，根据柳岩调用 String 类中重写之后的 hashCode() 方法计算出值，然后结合数组长度采用某种算法计算出在Node 数组中存储数据的空间的索引值。如果计算出的索引空间没有数据，则直接将&lt;柳岩,18&gt;存储到数组中。（举例：计算出的索引是 3 ）</p><p><img src="https://hashmapimages.oss-cn-guangzhou.aliyuncs.com/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B01.png" alt></p></li><li><p>向哈希表中存储数据 &lt;刘德华,40&gt;，假设刘德华算出的 hashCode() 方法结合数祖长度计算出的索引值也是3，那么此时数组空间不是 null，此时底层会比较柳岩和刘德华的hash值(根据key来计算出来的)是否一致，如果不一致，则在空间上划出一个结点来存储键值对数据对 &lt;刘德华,40&gt;，这种方式称为拉链法。</p></li><li><p>假设向哈希表中存储数据 &lt;柳岩,20&gt;，那么首先根据柳岩调用 hashCode() 方法结合数组长度计算出索引肯定是 3，此时比较后存储的数据柳岩和已经存在的数据的 hash 值是否相等，如果 hash 值相等，此时发生哈希碰撞。那么底层会调用柳岩所属类 String 中的 equals() 方法比较两个key是否相等               相等：将后添加的数据的 value 覆盖之前的 value                                                                                        不相等：继续向下和其他的数据的 key 进行比较，如果都不相等，则划出一个结点存储数据，如果结点长度即链表长度大于阈值 8 并且数组长度大于 64 则将链表变为红黑树。</p></li><li><p>在不断的添加数据的过程中，会涉及到扩容问题，当超出阈值（且要存放的位置非空）时，扩容。默认的扩容方式：扩容为原来容量的 2 倍，并将原有的数据复制过来。</p></li><li><p>简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的。如下图所示：</p><p><img src="https://hashmapimages.oss-cn-guangzhou.aliyuncs.com/%E5%A4%A7%E8%87%B4%E5%9B%BE%E8%A7%A3.jpg" alt></p></li></ol><p><strong>总结：</strong></p><p><img src="https://hashmapimages.oss-cn-guangzhou.aliyuncs.com/hashmap%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li>HashMap 中 hash 函数是怎么实现的？还有哪些hash函数的实现方式？<br>对于 key 的 hashCode 做 hash 操作，无符号右移 16 位然后做异或运算。还有平方取中法，伪随机数法和取余数法。这三种效率都比较低。而无符号右移 16 位异或运算效率是最高的。</li><li>当两个对象的 hashCode 相等时会怎么样？<br>会产生哈希碰撞。若 key 值内容相同则替换旧的 value，不然连接到链表后面，链表长度超过阈值 8 就转换为红黑树存储。</li><li>什么是哈希碰撞，如何解决哈希碰撞？<br>只要两个元素的 key 计算的哈希码值相同就会发生哈希碰撞。jdk8 之前使用链表解决哈希碰撞。jdk8之后使用链表 + 红黑树解决哈希碰撞。</li><li>如果两个键的 hashCode 相同，如何存储键值对？<br>通过 equals 比较内容是否相同。相同：则新的 value 覆盖之前的 value。不相同：则将新的键值对添加到哈希表中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java创建对象方式</title>
      <link href="2021/04/04/Java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E5%BC%8F/"/>
      <url>2021/04/04/Java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java创建对象的4种方式"><a href="#Java创建对象的4种方式" class="headerlink" title="Java创建对象的4种方式"></a>Java创建对象的4种方式</h1><p>创建User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式一：使用new创建对象"><a href="#方式一：使用new创建对象" class="headerlink" title="方式一：使用new创建对象"></a>方式一：使用new创建对象</h2><p>使用new关键字创建对象应该是最常见的一种方式，但我们应该知道，使用new创建对象会增加耦合度。无论使用什么框架，都要减少new的使用以降低耦合度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用new创建对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.sayWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：使用反射的机制创建对象"><a href="#方式二：使用反射的机制创建对象" class="headerlink" title="方式二：使用反射的机制创建对象"></a>方式二：使用反射的机制创建对象</h2><h3 id="使用Class类的newInstance方法"><a href="#使用Class类的newInstance方法" class="headerlink" title="使用Class类的newInstance方法"></a>使用Class类的newInstance方法</h3><p>Class类本质上调用了反射包构造器类中无参数的newInstance方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回字节码对象  "包名+类名" </span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">"pojo.User"</span>);</span><br><span class="line">        User user = (User) aClass.newInstance();</span><br><span class="line">        user.sayWorld();</span><br><span class="line">        <span class="comment">/*或者</span></span><br><span class="line"><span class="comment">            Class&lt;User&gt; aClass = User.class;</span></span><br><span class="line"><span class="comment">            User user = aClass.newInstance();</span></span><br><span class="line"><span class="comment">            user.sayWorld();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Constructor类的newInstance方法"><a href="#使用Constructor类的newInstance方法" class="headerlink" title="使用Constructor类的newInstance方法"></a>使用Constructor类的newInstance方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;User&gt; aClass = User<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//得到该类的构造函数</span></span><br><span class="line">        Constructor&lt;User&gt; constructor = aClass.getConstructor();</span><br><span class="line">        User user = constructor.newInstance();</span><br><span class="line">        user.sayWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种newInstance()区别</p><ol><li>Class类位于java的lang包中，而构造器类是java反射机制的一部分。</li><li>Class类的newInstance只能触发无参数的构造方法创建对象，而构造器类的newInstance能触发有参数或者任意参数的构造方法来创建对象。</li></ol><h2 id="方式三：使用Clone方法"><a href="#方式三：使用Clone方法" class="headerlink" title="方式三：使用Clone方法"></a>方式三：使用Clone方法</h2><p>clone时，需要已经有一个分配了内存的源对象，创建新对象时，首先应该分配一个和源对象一样大的内存空间，然后将源对象的内容全部拷贝进去。用clone方法创建对象并不会调用任何构造函数。要使用clone方法，我们必须先实现Cloneable接口，由于clone方法是protected的，所以修改User类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        User clone = (User) user.clone();</span><br><span class="line">        clone.sayWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式四：采用序列化机制"><a href="#方式四：采用序列化机制" class="headerlink" title="方式四：采用序列化机制"></a>方式四：采用序列化机制</h2><p>如何将对象中的信息永久保存<br>     1.将对象信息存入数据库<br>     2.java 中提供的序列化方式来永久保存数据</p><p>使用序列化时，要实现实现Serializable接口，将一个对象通过流的方式序列化(存储)到磁盘上，而采用反序列化(还原)可以将磁盘上的对象信息转化到内存中。反序列化时，JVM创建对象并不会调用任何构造函数。</p><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//序列化：把对象通过流的方式存储到文件中(将对象存入磁盘)</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"user.obj"</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        <span class="comment">//ObjectInputStream用来读取字节内容，还原（反序列化）为java对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"user.obj"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        User user = (User)ois.readObject();</span><br><span class="line">        user.sayWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="2021/03/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/03/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式最重要的思想：构造器私有</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><h3 id="饿汉式静态常量"><a href="#饿汉式静态常量" class="headerlink" title="饿汉式静态常量"></a>饿汉式静态常量</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>构造器私有化（这样该类就不会被实例化，也就是说不能通过new来实现对象的创建）</li><li>类的内部创建（因为不能够被new了，所以对象的创建得在内部创建）</li><li>内外暴露一个静态的公共方法（getInstance，通过这个方法返回该类的实例）</li></ol><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        Singleton instance01 = Singleton.getInstance();</span><br><span class="line">        Singleton instance02 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance01 == instance02);<span class="comment">//true</span></span><br><span class="line">        System.out.println(instance01.hashCode());</span><br><span class="line">        System.out.println(instance02.hashCode());<span class="comment">//能打印出一样的hashCode</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉式(静态变量)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.构造器私有化，方法体不需要写代码，因为只是防止外部new而已</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.本类内部创建一个对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.对外提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><ol><li>这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</li></ol><p><strong>缺点：</strong></p><ol><li>在类装载的时候就完成实例化，没有达到Lazy Loading(懒加载，即用到才创建，用不到就不创建，这样就不会造成浪费)的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</li><li>这种方式基于类加载机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getlnstance方法（调用这个方法就是通过类加载，这种方法是ok的，因为类加载机制就是你需要某个类，才会对这个进行加载），但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果</li></ol><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>这种单例模式可用，<strong>可能</strong>造成内存浪费</p><h3 id="饿汉式-静态代码块"><a href="#饿汉式-静态代码块" class="headerlink" title="饿汉式(静态代码块)"></a>饿汉式(静态代码块)</h3><p>步骤和优缺点同上</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance01 = Singleton.getInstance();</span><br><span class="line">        Singleton instance02 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance01 == instance02);</span><br><span class="line">        System.out.println(instance01.hashCode());</span><br><span class="line">        System.out.println(instance02.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在内部创建一个对象实例</span></span><br><span class="line">    <span class="comment">// 为什么这里不用final</span></span><br><span class="line">    <span class="comment">// 因为被声明为final的变量必须在声明时给定初值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.在静态代码块中，实例化对象</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.对外提供一个公有的静态方法，获取唯一可用的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><h3 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h3><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lazy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试多线程下的懒汉</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                Singleton.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" ok"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个静态的公有方法，当使用到改方法时，才会创建instance,即懒汉式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><ol><li>起到了Lazy Loading的效果</li></ol><p><strong>缺点：</strong></p><ol><li>但是只能在单线程下使用。</li><li>如果在多线程下，一个线程进入了if（singleton==null）判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</li></ol><p><strong>结论：</strong></p><p>在实际开发中，不要使用这种方式</p><h3 id="懒汉式-线程安全，同步方法"><a href="#懒汉式-线程安全，同步方法" class="headerlink" title="懒汉式(线程安全，同步方法)"></a>懒汉式(线程安全，同步方法)</h3><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singletton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singletton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singletton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有这块地方有区别，加入了同步处理的代码，解决了一个线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singletton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singletton02();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><ol><li>解决了线程不安全问题</li></ol><p><strong>缺点：</strong></p><ol><li>效率太低了，每个线程在想获得类的实例时候，执行getlnstance（）方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低</li></ol><p><strong>结论：</strong></p><p>在实际开发中，不推荐使用这种方式</p><h2 id="双重检查-DCL"><a href="#双重检查-DCL" class="headerlink" title="双重检查(DCL)"></a>双重检查(DCL)</h2><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//必须要加volatile</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入双重检查代码，解决了线程安全问题，同时解决懒加载问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 对象的初始化要经历3个步骤</span></span><br><span class="line"><span class="comment">                     * 1.分配内存空间</span></span><br><span class="line"><span class="comment">                     * 2.执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                     * 3.把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 但是这里有可能会发生指令重排的现象</span></span><br><span class="line"><span class="comment">                     * 比如说：</span></span><br><span class="line"><span class="comment">                     * 我们期望它执行123，但它执行了132</span></span><br><span class="line"><span class="comment">                     * 线程A执行的顺序是132，也就是说它先占用了这个空间，然后才初始化对象</span></span><br><span class="line"><span class="comment">                     * 而此时线程B由于已经把对象指向这个空间了，所以会认为这个instance ！=null</span></span><br><span class="line"><span class="comment">                     * 所以会直接ruturn ，但此时instance还没完成构造</span></span><br><span class="line"><span class="comment">                     * 所以要加volatile</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><p><strong>优点：</strong></p><ol><li>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次if（singleton==null）检查，这样就可以保证线程安全了。</li><li>这样，实例化代码只用执行一次，后面再次访问时，判断if（singleton==null），直接return实例化对象，也避免的反复进行方法同步.</li><li>线程安全；延迟加载；效率较高</li></ol><p><strong>结论：</strong></p><p>在实际开发中，推荐使用这种单例设计模式</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>首先讲讲静态内部类的优点：</p><ol><li>外部类的加载，不会导致静态内部类的加载，从而保证了懒加载</li><li>当我们调用的方法用到了静态内部类的时候，才会去加载这个静态内部类的，而且只会加载一次，而在装载这个类的时候，线程是安全的</li></ol><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><ol><li>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</li><li>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getlnstance方法，才会装载Singletonlnstance类，从而完成Singleton的实例化。</li><li>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</li><li>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li></ol><p><strong>结论：</strong></p><p>推荐使用</p><blockquote><p>但其实以上的方法都是不安全的，因为在反射面前，一切私有都是虚的</p></blockquote><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance01 = Singleton.INSTANCE;</span><br><span class="line">        Singleton instance02 = Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance01 == instance02);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h4><p>优点：</p><ol><li>这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</li></ol><p>结论：</p><p>推荐使用</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式与集群</title>
      <link href="2021/03/27/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%9B%86%E7%BE%A4/"/>
      <url>2021/03/27/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式与集群"><a href="#分布式与集群" class="headerlink" title="分布式与集群"></a>分布式与集群</h1><h2 id="单机结构"><a href="#单机结构" class="headerlink" title="单机结构"></a><strong>单机结构</strong></h2><p>一个系统业务量很小的时候所有的代码都放在一个项目中就好了，然后这个项目部署在一台服务器上就好了。整个项目所有的服务都由这台服务器提供。这就是单机结构。</p><p> 那么，单机结构有啥缺点呢？我想缺点是显而易见的，单机的处理能力毕竟是有限的，当你的业务增长到一定程度的时候，单机的硬件资源将无法满足你的业务需求。此时便出现了集群模式。</p><h2 id="集群结构"><a href="#集群结构" class="headerlink" title="集群结构"></a><strong>集群结构</strong></h2><p>单机处理到达瓶颈的时候，你就把单机复制几份，这样就构成了一个“集群”。集群中每台服务器就叫做这个集群的一个“节点”，所有节点构成了一个集群。每个节点都提供相同的服务，那么这样系统的处理能力就相当于提升了好几倍（有几个节点就相当于提升了这么多倍）。                                                                         </p><p>但问题是用户的请求究竟由哪个节点来处理呢？最好能够让此时此刻负载较小的节点来处理，这样使得每个节点的压力都比较平均。要实现这个功能，就需要在所有节点之前增加一个“调度者”的角色，用户的所有请求都先交给它，然后它根据当前所有节点的负载情况，决定将这个请求交给哪个节点处理。这个“调度者”有个牛逼了名字——负载均衡服务器。                                                                                                                   </p><p>集群结构的好处就是系统扩展非常容易。如果随着你们系统业务的发展，当前的系统又支撑不住了，那么给这个集群再增加节点就行了。但是，当你的业务发展到一定程度的时候，你会发现一个问题——无论怎么增加节点，貌似整个集群性能的提升效果并不明显了。这时候，你就需要使用微服务结构了。</p><h2 id="分布式结构"><a href="#分布式结构" class="headerlink" title="分布式结构"></a><strong>分布式结构</strong></h2><p>先来对前面的知识点做个总结。</p><p>从单机结构到集群结构，你的代码基本无需要作任何修改，你要做的仅仅是多部署几台服务器，每台服务器上运行相同的代码就行了。但是，当你要从集群结构演进到微服务结构的时候，之前的那套代码就需要发生较大的改动了。所以对于新系统我们建议，系统设计之初就采用微服务架构，这样后期运维的成本更低。但如果一套老系统需要升级成微服务结构的话，那就得对代码动干戈了。所以，对于老系统而言，究竟是继续保持集群模式，还是升级成微服务架构，这需要你们的架构师深思熟虑、权衡投入产出比。</p><p>OK，下面开始介绍所谓的分布式结构。</p><p>分布式结构就是将一个完整的系统，按照业务功能，拆分成一个个独立的子系统，在分布式结构中，每个子系统就被称为“服务”。这些子系统能够独立运行在web容器中，它们之间通过RPC(Remote Procedure Call远程过程调用，简单的理解是一个节点请求另一个节点提供的服务)方式通信。</p><p>举个例子，假设需要开发一个在线商城。按照微服务的思想，我们需要按照功能模块拆分成多个独立的服务，如：用户服务、产品服务、订单服务、后台管理服务、数据分析服务等等。这一个个服务都是一个个独立的项目，可以独立运行。如果服务之间有依赖关系，那么通过RPC方式调用。</p><p>这样的好处有很多：</p><ol><li>系统之间的耦合度大大降低，可以独立开发、独立部署、独立测试，系统与系统之间的边界非常明确，排错也变得相当容易，开发效率大大提升。</li><li>系统之间的耦合度降低，从而系统更易于扩展。我们可以针对性地扩展某些服务。假设这个商城要搞一次大促，下单量可能会大大提升，因此我们可以针对性地提升订单系统、产品系统的节点数量，而对于后台管理系统、数据分析系统而言，节点数量维持原有水平即可。</li><li>服务的复用性更高。比如，当我们将用户系统作为单独的服务后，该公司所有的产品都可以使用该系统作为用户系统，无需重复开发。</li></ol><p><strong>总结：</strong></p><p>分布式：一个业务分拆多个子业务，部署在不同的服务器上</p><p>集群：同一个业务，部署在多个服务器上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="2021/03/14/nginx/"/>
      <url>2021/03/14/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="什么是Nginx？"><a href="#什么是Nginx？" class="headerlink" title="什么是Nginx？"></a>什么是Nginx？</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><p>Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。</p><p>Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p><h2 id="为什么出现Nginx？"><a href="#为什么出现Nginx？" class="headerlink" title="为什么出现Nginx？"></a>为什么出现Nginx？</h2><blockquote><p>项目产品发展历程</p></blockquote><ol><li><p>项目刚上线的时候，并发量小，用户量少，所以在低并发的情况下，单个服务器暂时够用</p><p><img src="https://nginximages.oss-cn-guangzhou.aliyuncs.com/tomcat.png" alt></p></li><li><p>但是随着使用我们平台的用户越来越多了，并发量慢慢增大了，这时候一台服务器满足不了我们的需求了。于是乎于得进行横向扩展，增加了服务器数量。但是这个时候就有问题了：一个用户访问项目的时候，我们得请求哪一台服务器，总不能得一个一个访问吧，因为session是不共享的(你在这里登陆了，再请求的时候，到了另外一台服务器就没登陆了)。这个时候就需要增加一个代理服务器了，通过代理服务器来帮我们转发和处理请求，我们用户只需要访问这个代理服务器就好了。</p><p><img src="https://nginximages.oss-cn-guangzhou.aliyuncs.com/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt></p><p>我们希望这个代理服务器可以帮助我们接收用户的请求，然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的，用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验！所以我们使用了Nginx。</p></li></ol><h2 id="Nginx作用？"><a href="#Nginx作用？" class="headerlink" title="Nginx作用？"></a>Nginx作用？</h2><blockquote><p>http代理：正向代理，反向代理</p></blockquote><p><strong>正向代理</strong>：</p><p>正向代理类似一个跳板机，代理访问外部资源</p><p>比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服务器，代</p><p>理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了。</p><p><img src="https://nginximages.oss-cn-guangzhou.aliyuncs.com/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%99%A8.png" alt></p><p><strong>反向代理：</strong></p><p>以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得</p><p>到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器</p><p><img src="https://nginximages.oss-cn-guangzhou.aliyuncs.com/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%99%A8.png" alt></p><p><strong>总结：</strong></p><p><strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端.</strong></p><p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略。</p><p>轮询：</p><p>顾名思义，该策略就是服务器将每个前端请求按顺序（时间顺序和排列次序）逐一分配到不同的后端服务器节点。</p><p>加权轮询</p><p>该策略在基本的轮询策略基础上考虑各后端服务器节点接受请求的权重，指定各后端服务器节点被轮询到的机率，主要应用于后端服务器节点性能不均的情况。如果权重高的，则较多请求会访问此服务器。</p><p>iphash(了解即可，已经给redis代替)</p><p>对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p><p><img src="https://nginximages.oss-cn-guangzhou.aliyuncs.com/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt></p><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><ol><li><p>安装gcc</p><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>PCRE pcre-devel 安装</p><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure></li><li><p>zlib 安装</p><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure></li><li><p>OpenSSL 安装<br>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>下载安装包并把安装包上传到/opt</p></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.18.0</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>查找安装路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ nginx-1.18.0]<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure></li><li><p>开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ ~]<span class="comment"># ps -ef|grep nginx </span></span><br><span class="line">root     22756 22709  0 21:51 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ nginx-1.18.0]<span class="comment"># cd /usr/local/nginx</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ nginx]<span class="comment"># ls</span></span><br><span class="line">conf  html  logs  sbin</span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ nginx]<span class="comment"># cd sbin</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># ll</span></span><br><span class="line">total 3764</span><br><span class="line">-rwxr-xr-x 1 root root 3851552 Mar 14 21:16 nginx</span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># ./nginx</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># ps -ef|grep nginx</span></span><br><span class="line">root     22835     1  0 21:53 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   22836 22835  0 21:53 ?        00:00:00 nginx: worker process</span><br><span class="line">root     23278 22709  0 21:59 pts/2    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># systemctl status firewalld  检查防火墙是否开启</span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># systemctl start firewalld  开启防火墙</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># systemctl status firewalld </span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sun 2021-03-14 21:58:07 CST; 3s ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 23076 (firewalld)</span><br><span class="line">   CGroup: /system.slice/firewalld.service</span><br><span class="line">           └─23076 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class="line"></span><br><span class="line">Mar 14 21:58:06 iZwz9ick8j8tmsj93waiowZ systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class="line">Mar 14 21:58:07 iZwz9ick8j8tmsj93waiowZ systemd[1]: Started firewalld - dynamic firewall daemon.</span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># firewall-cmd --zone=public --add-port=80/tcp --permanent 开启80端口，因为nginx默认端口为80</span></span><br><span class="line">success</span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ sbin]<span class="comment"># firewall-cmd --reload 重启防火墙</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure></li><li><p>开放安全组</p></li><li><p>直接输入ip地址即可出现Welcome to nginx!</p></li></ol><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/ <span class="comment"># 进入nginx安装的目录文件</span></span><br><span class="line">./nginx  <span class="comment">#启动</span></span><br><span class="line">./nginx -s stop  <span class="comment">#停止</span></span><br><span class="line">./nginx -s quit  <span class="comment">#安全退出</span></span><br><span class="line">./nginx -s reload  <span class="comment">#重新加载配置文件，每次更改完配置都需要进行此操作</span></span><br><span class="line">ps aux|grep nginx  <span class="comment">#查看nginx进程</span></span><br></pre></td></tr></table></figure><h2 id="Nginx配置-nginx-conf"><a href="#Nginx配置-nginx-conf" class="headerlink" title="Nginx配置(nginx.conf)"></a>Nginx配置(nginx.conf)</h2><p>nginx.conf配置文件大致可以分为以下几部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># http配置</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#upstream xx&#123;</span></span><br><span class="line">    <span class="comment">#负载均衡配置</span></span><br><span class="line">    <span class="comment">#server ip地址:port weight=x;</span></span><br><span class="line">    <span class="comment">#server ip地址:port weight=x;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认端口</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            <span class="comment">#proxy_pass http://xx;</span></span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 如果需要443端口的话</span></span><br><span class="line">     server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致流程：nginx监听着80端口，我们请求80端口根目录的话，就会代理到我们的服务上，也就是upstream里的服务</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="2021/03/10/redis/"/>
      <url>2021/03/10/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h2><h3 id="为什么要用Nosql"><a href="#为什么要用Nosql" class="headerlink" title="为什么要用Nosql"></a>为什么要用Nosql</h3><ol><li><p>单机mysql</p><p><img src="https://redisimages.oss-cn-guangzhou.aliyuncs.com/%E5%8D%95%E6%9C%BAmysql.png" alt></p></li><li><p>Memcache(缓存) + MySQL + 垂直拆分(读写分离)</p><p>优化顺序：优化数据结构和索引–&gt;文件缓存–&gt;Memcache</p><p><img src="https://redisimages.oss-cn-guangzhou.aliyuncs.com/memcache.png" alt></p></li><li><p>分库分表+水平拆分(MySQL集群)</p><p><img src="https://redisimages.oss-cn-guangzhou.aliyuncs.com/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.png" alt></p><p>分布式与集群的区别：请看另一篇博客</p></li></ol><blockquote><p>为什么要用Nosql</p></blockquote><p>用户的个人信息，社交网络，地理位置(并不是规则的数据)。用户自己产生的数据，用户日志等等爆发式增长</p><p>这时候我们就需要使用Nosql数据库，可以很好地处理以上的情况</p><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h3><p>NoSQL = Not Only SQL（不仅仅是SQL）</p><p>泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难应付web2.0时代，尤其是超大规模的高并发的社区。暴露出很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><p>很多的数据类型用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！不需要多余的操作就可以横向扩展的！</p><p>关系型数据库：表格，行，列</p><blockquote><p>NoSQL特点</p></blockquote><p>解耦！</p><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒写8万次，读取11万，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p></li><li><p>数据类型是多样型的（不需要事先设计数据库，随取随用）</p></li><li><p>传统的关系型数据库和NoSQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">传统的关系型数据库</span><br><span class="line">-结构化组织</span><br><span class="line">-SQL</span><br><span class="line">-数据和关系都存在单独的表中</span><br><span class="line">-操作操作，数据定义语言</span><br><span class="line">-严格的一致性</span><br><span class="line">-基础的事务</span><br><span class="line">-...</span><br><span class="line"></span><br><span class="line">Nosq1</span><br><span class="line">-不仅仅是数据</span><br><span class="line">-没有固定的查询语言</span><br><span class="line">-键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">-最终一致性</span><br><span class="line">-CAP定理和BASE</span><br><span class="line">-高性能，高可用，高可扩。</span><br></pre></td></tr></table></figure></li></ol><h3 id="NoSQL四大分类"><a href="#NoSQL四大分类" class="headerlink" title="NoSQL四大分类"></a>NoSQL四大分类</h3><p><strong>KV键值对：</strong></p><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memcache</li></ul><p><strong>文档型数据库（bson和json）</strong></p><ul><li>MongoDB（一般必须要掌握）<ul><li>MongoDB是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档！</li><li>MongoDB是一个介于关系型数据库和非关系型数据的中间的产品！MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的！</li></ul></li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><ul><li>Neo4j，infoGrid</li></ul><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis是什么？</p></blockquote><p>Redis（Remote Dictionary Server），即远程字典服务</p><p>是一个开源的使用C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，可用作缓存和消息中间件，并提供多种语言的APl。</p><blockquote><p>Redis</p></blockquote><ol><li>内存存储、持久化</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量！）</li></ol><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ol><li><p>下载安装包<code>redis-6.0.14.tar.gz</code></p></li><li><p>把下载好的安装包放到/opt 目录下并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-6.0.14.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进去解压后的文件，可以看到我们redis的配置文件</p></li><li><p>基本的环境安装(因为redis是c写的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装gcc，不过好像centos好像自带gcc</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment"># 进入解压后的文件</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.0.14</span><br><span class="line"><span class="comment"># 编译 make的过程是把各种语言写的源码文件，变成可执行文件和各种库文件</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># make install 是把这些编译出来的可执行文件和库文件安装到合适的地方</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>注意：在make完后，这里会出现很多error，主要是gcc版本太低了，得升级版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看gcc版本</span></span><br><span class="line">gcc -v</span><br><span class="line"><span class="comment"># 升级gcc9</span></span><br><span class="line">yum install centos-release-scl</span><br><span class="line">yum install devtoolset-9-gcc*</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"><span class="comment"># 再次make</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>如何遇到这个问题：You need tcl 8.5 or newer in order to run the Redis test</p><p>解决：<code>yum install tcl</code></p></li><li><p>redis的默认安装路径<code>/usr/local/bin</code></p></li><li><p>到/usr/local/bin下创建一个新的文件夹，并把redis.conf复制到新的文件夹中，我们以后用这个配置文件启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># mkdir myconfig</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># cp /opt/redis-6.0.6/redis.conf myconfig/</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># cd myconfig/</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ myconfig]<span class="comment"># ls</span></span><br><span class="line">redis.conf</span><br></pre></td></tr></table></figure></li><li><p>redis默认不是后台启动的，修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line"></span><br><span class="line">找到daemonize no 改成yes</span><br></pre></td></tr></table></figure></li><li><p>启动redis服务(通过指定的配置文件启动服务)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># redis-server myconfig/redis.conf</span></span><br><span class="line">20588:C 10 Mar 2021 20:24:37.025 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">20588:C 10 Mar 2021 20:24:37.025 <span class="comment"># Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=20588, just started</span></span><br><span class="line">20588:C 10 Mar 2021 20:24:37.025 <span class="comment"># Configuration loaded</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如果需要外网连接redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改redis.conf配置文件中的：</span><br><span class="line">1.daemonize no 改成 yes</span><br><span class="line">2.注释原有的<span class="built_in">bind</span> 127.0.0.1 ， 新增<span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">3.protected-mode(保护模式)可不用设置，它默认为yes，即开启</span><br><span class="line">1.关闭protected-mode模式，此时外部网络可以直接访问</span><br><span class="line">2.开启protected-mode保护模式，需配置<span class="built_in">bind</span> ip或者设置访问密码（因为第2步已经<span class="built_in">bind</span> ip了，所以这里不需要关闭保护模式）</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>使用redis-cli进行连接测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name hbp</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"hbp"</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p>查看redis的进程是否开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># ps -ef|grep redis</span></span><br><span class="line">root     20589     1  0 20:24 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class="line">root     20884 15393  0 20:30 pts/0    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure></li><li><p>如何关闭redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p>redis-benchmark是一个压力测试工具</p><p>官方自带的性能测试工具</p><p>redis-benchmark命令参数：</p><table><thead><tr><th>序号</th><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td><strong>-h</strong></td><td>指定服务器主机名（如果是本机的话，可以忽略此参数）</td><td>127.0.0.1</td></tr><tr><td>2</td><td><strong>-p</strong></td><td>指定服务器端口</td><td>6379</td></tr><tr><td>3</td><td><strong>-s</strong></td><td>指定服务器 socket</td><td></td></tr><tr><td>4</td><td><strong>-c</strong></td><td>指定并发连接数</td><td>50</td></tr><tr><td>5</td><td><strong>-n</strong></td><td>指定请求数</td><td>10000</td></tr><tr><td>6</td><td><strong>-d</strong></td><td>以字节的形式指定 SET/GET 值的数据大小</td><td>2</td></tr><tr><td>7</td><td><strong>-k</strong></td><td>1=keep alive 0=reconnect</td><td>1</td></tr><tr><td>8</td><td><strong>-r</strong></td><td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td></td></tr><tr><td>9</td><td><strong>-P</strong></td><td>通过管道传输 <numreq> 请求</numreq></td><td>1</td></tr><tr><td>10</td><td><strong>-q</strong></td><td>强制退出 redis。仅显示 query/sec 值</td><td></td></tr><tr><td>11</td><td><strong>–csv</strong></td><td>以 CSV 格式输出</td><td></td></tr><tr><td>12</td><td><strong>-l</strong></td><td>生成循环，永久执行测试</td><td></td></tr><tr><td>13</td><td><strong>-t</strong></td><td>仅运行以逗号分隔的测试命令列表。</td><td></td></tr><tr><td>14</td><td><strong>-I</strong></td><td>Idle 模式。仅打开 N 个 idle 连接并等待。</td><td></td></tr></tbody></table><p>简单的测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试：100个并发连接 1000000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 1000000</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">====== SET ======</span><br><span class="line">  1000000 requests completed <span class="keyword">in</span> 13.16 seconds <span class="comment"># 对我们的10w个请求进行写入测试</span></span><br><span class="line">  100 parallel clients <span class="comment"># 100个并发客户端</span></span><br><span class="line">  3 bytes payload <span class="comment"># 每次写入3个字节</span></span><br><span class="line">  keep alive: 1 <span class="comment"># 只有一台服务器来处理这些请求，单机性能</span></span><br><span class="line">  host configuration <span class="string">"save"</span>: 900 1 300 10 60 10000</span><br><span class="line">  host configuration <span class="string">"appendonly"</span>: no</span><br><span class="line">  multi-thread: no</span><br><span class="line"></span><br><span class="line">89.52% &lt;= 1 milliseconds</span><br><span class="line">99.82% &lt;= 2 milliseconds</span><br><span class="line">99.93% &lt;= 3 milliseconds</span><br><span class="line">99.96% &lt;= 4 milliseconds</span><br><span class="line">99.97% &lt;= 5 milliseconds</span><br><span class="line">99.98% &lt;= 6 milliseconds</span><br><span class="line">99.98% &lt;= 7 milliseconds</span><br><span class="line">100.00% &lt;= 13 milliseconds</span><br><span class="line">100.00% &lt;= 20 milliseconds</span><br><span class="line">100.00% &lt;= 21 milliseconds</span><br><span class="line">100.00% &lt;= 21 milliseconds</span><br><span class="line">75987.84 requests per second <span class="comment"># 每秒处理75987.84次请求</span></span><br></pre></td></tr></table></figure><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>redis默认有16个数据库(vim redis.config可以查看)，默认使用时第0个，可以使用select进行切换数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 3 <span class="comment"># 切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; DBSIZE <span class="comment"># 查看DB大小，这里小写也是可以的</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[3]&gt; <span class="built_in">set</span> name hbp <span class="comment"># 添加key-value</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[3]&gt; select 7</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[7]&gt; get name</span><br><span class="line">(nil) <span class="comment"># null</span></span><br><span class="line">127.0.0.1:6379[7]&gt; select 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; get name</span><br><span class="line"><span class="string">"hbp"</span></span><br></pre></td></tr></table></figure><p>清除当前数据库<code>flushdb</code></p><p>清除全部数据库的内容<code>flushall</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379[3]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ ~]<span class="comment"># redis-cli -p 6379 # 连接redis</span></span><br><span class="line">127.0.0.1:6379&gt; flushall <span class="comment"># 清除所有数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 查看所有的key</span></span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name hbp</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 22</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; exists name <span class="comment"># 判断当前的key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; move name 1 <span class="comment"># 把name移动到指定的数据库</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name hbp</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"hbp"</span></span><br><span class="line">127.0.0.1:6379&gt; expire name 5 <span class="comment"># 设置key的过期时间，单位是秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name <span class="comment"># 查看当前key的剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name hbp</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment"># 查看当前key的类型</span></span><br><span class="line">string</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td>set key value 设置指定 key 的值</td></tr><tr><td>2</td><td>get key 获取指定 key 的值。</td></tr><tr><td>3</td><td>getrange key start end 返回 key 中字符串值的子字符</td></tr><tr><td>4</td><td>getset key value 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td>5</td><td>getbit key offset 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td>6</td><td>mget key1 [key2..]获取所有(一个或多个)给定 key 的值。</td></tr><tr><td>7</td><td>setbit key offset value 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td>8</td><td>setex key seconds value 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td>9</td><td>setnx key value 只有在 key 不存在时设置 key 的值，<strong>分布锁中会常常使用</strong>。</td></tr><tr><td>10</td><td>setrange key offset value用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td>11</td><td>strlen key返回 key 所储存的字符串值的长度。</td></tr><tr><td>12</td><td>mset key value [key value …]同时设置一个或多个 key-value 对。</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/strings-msetnx.html" target="_blank" rel="noopener">MSETNX key value [key value …]</a> 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/strings-psetex.html" target="_blank" rel="noopener">PSETEX key milliseconds value</a> 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td>15</td><td>incr key 将 key 中储存的数字值增一。</td></tr><tr><td>16</td><td>incrby key increment 将 key 所储存的值加上给定的增量值，相当于步长</td></tr><tr><td>17</td><td>[INCRBYFLOAT key increment将 key 所储存的值加上给定的浮点增量值（increment） 。</td></tr><tr><td>18</td><td>decr key将 key 中储存的数字值减一。</td></tr><tr><td>19</td><td>decrby key decrement key 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td>20</td><td>append key value 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。如果不存在，就相当于set key</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################### set get strlen append ####################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key01 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key01</span><br><span class="line"><span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key01"</span></span><br><span class="line">127.0.0.1:6379&gt; exists key01</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; append key01 <span class="string">"hello"</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key01</span><br><span class="line"><span class="string">"v1hello"</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key01</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; append key01 <span class="string">",hbp"</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; strlen key01</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get key01</span><br><span class="line"><span class="string">"v1hello,hbp"</span></span><br><span class="line"><span class="comment">#################### incr decr incrby decrby ####################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">"0"</span></span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">"2"</span></span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">127.0.0.1:6379&gt; incrby views 10 <span class="comment"># 设置步长</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">"11"</span></span><br><span class="line">127.0.0.1:6379&gt; decrby views 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"><span class="comment">#################### getrange setrange ####################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">"hello,hbp"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"hello,hbp"</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 3 <span class="comment"># 截取字符串[0,3]</span></span><br><span class="line"><span class="string">"hell"</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 -1 <span class="comment"># 获取全部的字符串和get一样</span></span><br><span class="line"><span class="string">"hello,hbp"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 abcdefg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">"abcdefg"</span></span><br><span class="line">127.0.0.1:6379&gt; setrange key2 1 xxx <span class="comment"># 替换指定位置开始的字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">"axxxefg"</span></span><br><span class="line"><span class="comment">#################### setex setnx ####################</span></span><br><span class="line">127.0.0.1:6379&gt; setex key3 30 <span class="string">"hello"</span> <span class="comment"># 设置key3 的值为hello，30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">"redis"</span> <span class="comment"># 如果mykey不存在，则创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key2"</span></span><br><span class="line">2) <span class="string">"mykey"</span></span><br><span class="line">3) <span class="string">"key1"</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">"mysql"</span> <span class="comment"># 如果mykey存在，则创建失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line"><span class="comment">#################### mset mget ####################</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class="comment"># 同时设置多个值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k3"</span></span><br><span class="line">3) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3 <span class="comment"># 同时获取多个值</span></span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v3"</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class="comment"># msetnx 是一个原子操作，要么成功，要么失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># 对象创建</span></span><br><span class="line">法1：<span class="built_in">set</span> user:1 &#123;name:hbp,age:3&#125; <span class="comment"># 设置一个user:1 对象，值为json字符来保存一个对象</span></span><br><span class="line"><span class="comment"># 这里的key是一个巧妙的设置：user:&#123;id&#125;:&#123;属性&#125;</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name hbp user:1:age 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">"hbp"</span></span><br><span class="line">2) <span class="string">"2"</span></span><br><span class="line"><span class="comment">#################### getset mget ####################</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis <span class="comment"># 先get这个key，如果不存在，则返回nil，然后同时set这个key</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mysql <span class="comment"># 先取，后set</span></span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">"mysql"</span></span><br></pre></td></tr></table></figure><h3 id="List-联表"><a href="#List-联表" class="headerlink" title="List(联表)"></a>List(联表)</h3><p>基本的数据类型，列表，在redis里，我们可以把list玩成栈，队列，阻塞队列</p><p>所有的list命令都是以l开头的</p><table><thead><tr><th>1</th><th><a href="https://www.runoob.com/redis/lists-blpop.html" target="_blank" rel="noopener">BLPOP key1 [key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/redis/lists-brpop.html" target="_blank" rel="noopener">BRPOP key1 [key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/lists-brpoplpush.html" target="_blank" rel="noopener">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/lists-lindex.html" target="_blank" rel="noopener">LINDEX key index</a> 通过索引获取列表中的元素</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/redis/lists-linsert.html" target="_blank" rel="noopener">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/lists-llen.html" target="_blank" rel="noopener">LLEN key</a> 获取列表长度</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/lists-lpop.html" target="_blank" rel="noopener">LPOP key</a> 移出并获取列表的第一个元素</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/redis/lists-lpush.html" target="_blank" rel="noopener">LPUSH key value1 [value2]</a> 将一个或多个值插入到列表头部</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/lists-lpushx.html" target="_blank" rel="noopener">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/lists-lrange.html" target="_blank" rel="noopener">LRANGE key start stop</a> 获取列表指定范围内的元素</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/redis/lists-lrem.html" target="_blank" rel="noopener">LREM key count value</a> 移除列表元素</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/redis/lists-lset.html" target="_blank" rel="noopener">LSET key index value</a> 通过索引设置列表元素的值</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/lists-ltrim.html" target="_blank" rel="noopener">LTRIM key start stop</a> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/lists-rpop.html" target="_blank" rel="noopener">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td></tr><tr><td>15</td><td><a href="https://www.runoob.com/redis/lists-rpoplpush.html" target="_blank" rel="noopener">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>16</td><td><a href="https://www.runoob.com/redis/lists-rpush.html" target="_blank" rel="noopener">RPUSH key value1 [value2]</a> 在列表中添加一个或多个值</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/redis/lists-rpushx.html" target="_blank" rel="noopener">RPUSHX key value</a> 为已存在的列表添加值</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################### LPUSH LRANGE ####################</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one <span class="comment"># 将一个值或多个值，从左插入到列表中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">3) <span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1</span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list rightt <span class="comment"># 将一个值或多个值，从右插入到列表中</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">3) <span class="string">"one"</span></span><br><span class="line">4) <span class="string">"rightt"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">3) <span class="string">"one"</span></span><br><span class="line">4) <span class="string">"rightt"</span></span><br><span class="line"><span class="comment">#################### LPOP RPOP ####################</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP list <span class="comment"># 移除list的第一个元素</span></span><br><span class="line"><span class="string">"three"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP list <span class="comment"># 移除list的最后一个元素</span></span><br><span class="line"><span class="string">"rightt"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">"two"</span></span><br><span class="line">2) <span class="string">"one"</span></span><br><span class="line"><span class="comment">#################### Lindex ####################</span></span><br><span class="line">127.0.0.1:6379&gt; Lindex list 0</span><br><span class="line"><span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; Lindex list 1</span><br><span class="line"><span class="string">"one"</span></span><br><span class="line"><span class="comment">#################### Llen ####################</span></span><br><span class="line">127.0.0.1:6379&gt; Lpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; Lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; Lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; Llen list</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">#################### Lrem ####################</span></span><br><span class="line">127.0.0.1:6379&gt; Lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"three"</span></span><br><span class="line">3) <span class="string">"two"</span></span><br><span class="line">4) <span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; Lrem list 1 one <span class="comment"># 移除list集合中指定个数的value，精确匹配</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"three"</span></span><br><span class="line">3) <span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; Lrem list 2 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">"two"</span></span><br><span class="line"><span class="comment">#################### Ltrim ####################</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">"hello1"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">"hello2"</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">"hello3"</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">"hello4"</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; Ltrim mylist 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"hello2"</span></span><br><span class="line">2) <span class="string">"hello3"</span></span><br><span class="line"><span class="comment">#################### rpoplpush ####################</span></span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">"hello1"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">"hello2"</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">"hello3"</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">"hello4"</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush mylist otherlist <span class="comment"># 移除列表的最后一个元素，并将他移动到新的列表中</span></span><br><span class="line"><span class="string">"hello4"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"hello1"</span></span><br><span class="line">2) <span class="string">"hello2"</span></span><br><span class="line">3) <span class="string">"hello3"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange otherlist 0 -1</span><br><span class="line">1) <span class="string">"hello4"</span></span><br><span class="line"><span class="comment">#################### lset ####################</span></span><br><span class="line"><span class="comment">#将列表中指定下标的值替换为另外一个值，更新操作</span></span><br><span class="line">127.0.0.1:6379&gt; exists list <span class="comment"># 判断这个列表是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item <span class="comment"># 如果不存在列表我们去更新就会报错</span></span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; lpush list value1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 0</span><br><span class="line">1) <span class="string">"value1"</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item <span class="comment"># 如果存在，更新当前下标的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 0</span><br><span class="line">1) <span class="string">"item"</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 1 other <span class="comment"># 如果不存在，则会报错</span></span><br><span class="line">(error) ERR index out of range</span><br><span class="line"><span class="comment">#################### linsert ####################</span></span><br><span class="line"><span class="comment"># linsert将某个具体得value插入到列表中某个元素的前面或后面</span></span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">"hello"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist <span class="string">"world"</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; linsert mylist before <span class="string">"world"</span> <span class="string">"other"</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">2) <span class="string">"other"</span></span><br><span class="line">3) <span class="string">"world"</span></span><br><span class="line">127.0.0.1:6379&gt; linsert mylist after <span class="string">"world"</span> <span class="string">"new"</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">2) <span class="string">"other"</span></span><br><span class="line">3) <span class="string">"world"</span></span><br><span class="line">4) <span class="string">"new"</span></span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ul><li>他实际上是一个链表，before Node after，left，right都可以插入值</li><li>如果key不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在！</li><li>在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点消息排队！</li><li>消息队列（Lpush Rpop），栈（Lpush Lpop）</li></ul><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><p>set中的值不能重复，无序</p><table><thead><tr><th>1</th><th><a href="https://www.runoob.com/redis/sets-sadd.html" target="_blank" rel="noopener">SADD key member1 [member2]</a> 向集合添加一个或多个成员</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/redis/sets-scard.html" target="_blank" rel="noopener">SCARD key</a> 获取集合的成员数</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/sets-sdiff.html" target="_blank" rel="noopener">SDIFF key1 [key2]</a> 返回第一个集合与其他集合之间的差异。</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/sets-sdiffstore.html" target="_blank" rel="noopener">SDIFFSTORE destination key1 [key2]</a> 返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/redis/sets-sinter.html" target="_blank" rel="noopener">SINTER key1 [key2]</a> 返回给定所有集合的交集</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/sets-sinterstore.html" target="_blank" rel="noopener">SINTERSTORE destination key1 [key2]</a> 返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/sets-sismember.html" target="_blank" rel="noopener">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/redis/sets-smembers.html" target="_blank" rel="noopener">SMEMBERS key</a> 返回集合中的所有成员</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/sets-smove.html" target="_blank" rel="noopener">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/sets-spop.html" target="_blank" rel="noopener">SPOP key</a> 移除并返回集合中的一个随机元素</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/redis/sets-srandmember.html" target="_blank" rel="noopener">SRANDMEMBER key [count]</a> 返回集合中一个或多个随机数</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/redis/sets-srem.html" target="_blank" rel="noopener">SREM key member1 [member2]</a> 移除集合中一个或多个成员</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/sets-sunion.html" target="_blank" rel="noopener">SUNION key1 [key2]</a> 返回所有给定集合的并集</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/sets-sunionstore.html" target="_blank" rel="noopener">SUNIONSTORE destination key1 [key2]</a> 所有给定集合的并集存储在 destination 集合中</td></tr><tr><td>15</td><td><a href="https://www.runoob.com/redis/sets-sscan.html" target="_blank" rel="noopener">SSCAN key cursor [MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################### smenbers sismember ####################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">"hello"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">",hbp"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">2) <span class="string">",hbp"</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello <span class="comment"># 判断一个值是否在集合中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset world</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#################### scard ####################</span></span><br><span class="line">127.0.0.1:6379&gt; scard myset <span class="comment"># 获取set集合中的内容元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#################### rem ####################</span></span><br><span class="line">127.0.0.1:6379&gt; srem myset hello <span class="comment"># 移除元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#################### srandmember ####################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">"hello"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2<span class="comment"># 随机抽选出指定个数的元素</span></span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line"><span class="string">",hbp"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line"><span class="comment">#################### spop ####################</span></span><br><span class="line"><span class="comment"># 随机删除key(可以指定数量)</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line"><span class="comment">#################### spop ####################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">"hello1"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">"hello2"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">"hello3"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">"hello4"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 <span class="string">"hello3"</span> <span class="comment"># 将一个指定的值，移动到另外一个set集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">"hello2"</span></span><br><span class="line">2) <span class="string">"hello1"</span></span><br><span class="line">3) <span class="string">"hello4"</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">"hello3"</span></span><br><span class="line"><span class="comment">#################### sdiff sinter sunion ####################</span></span><br><span class="line"><span class="comment">#微博，B站，共同关注的好友，这用到了数学中的集合(交集)</span></span><br><span class="line">127.0.0.1:6379&gt; sadd key1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sdiff key1 key2</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">127.0.0.1:6379&gt; sinter key1 key2 <span class="comment"># 查看共同好友就是这样实现</span></span><br><span class="line">1) <span class="string">"b"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; sunion key1 key2</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br></pre></td></tr></table></figure><h3 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h3><p>Map集合，key-Map集合，即key中的value中又是key-value。 key-&lt;key , value&gt;。</p><p>本质和String类型没有太大区别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################### hset hget hmset hmget hgetall####################</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash k1 v1 <span class="comment"># set一个具体得kv</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash k1</span><br><span class="line"><span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash k1 v1 k2 v2 <span class="comment"># set多个kv</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash k1 k2</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">"k1"</span></span><br><span class="line">2) <span class="string">"v1"</span></span><br><span class="line">3) <span class="string">"k2"</span></span><br><span class="line">4) <span class="string">"v2"</span></span><br><span class="line"><span class="comment">#################### hdel ####################</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash k1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line"><span class="comment">#################### hlen ####################</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment"># 获取hash表的字段数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hmset myhash k3 v3 k4 v4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">#################### hexists ####################</span></span><br><span class="line">127.0.0.1:6379&gt; hexists myhash k1 <span class="comment">#判断hash中指定字段是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash k2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#################### hkeys hvals ####################</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment"># 只获得所有key</span></span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k3"</span></span><br><span class="line">3) <span class="string">"k4"</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash <span class="comment"># 只获得宿友value</span></span><br><span class="line">1) <span class="string">"v2"</span></span><br><span class="line">2) <span class="string">"v3"</span></span><br><span class="line">3) <span class="string">"v4"</span></span><br></pre></td></tr></table></figure><p>应用：hash变更的数据 user name age 尤其是用户信息之类的，经常变动的信息，hash更适合于对象存储 ，String更适合字符串的存储</p><h3 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h3><p>在set的基础上，增加了一个值，set k1 v1; zset k1 score v1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one <span class="comment"># 增加一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class="comment"># 增加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange myset 0 -1</span><br><span class="line">1) <span class="string">"one"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">3) <span class="string">"three"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 zhangsan <span class="comment"># 添加用户</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 300 lisi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 1000 wangwu</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf <span class="comment"># 显示全部的用户，从小到大排序</span></span><br><span class="line">1) <span class="string">"lisi"</span></span><br><span class="line">2) <span class="string">"wangwu"</span></span><br><span class="line">3) <span class="string">"zhangsan"</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange salary 0 -1 <span class="comment"># 显示全部的用户，从大到小排序</span></span><br><span class="line">1) <span class="string">"wangwu"</span></span><br><span class="line">2) <span class="string">"lisi"</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores <span class="comment"># 显示全部的用户并且附带成绩</span></span><br><span class="line">1) <span class="string">"lisi"</span></span><br><span class="line">2) <span class="string">"300"</span></span><br><span class="line">3) <span class="string">"wangwu"</span></span><br><span class="line">4) <span class="string">"1000"</span></span><br><span class="line">5) <span class="string">"zhangsan"</span></span><br><span class="line">6) <span class="string">"2500"</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf 1000 withscores <span class="comment"># 显示工资&lt;=1000的用户</span></span><br><span class="line">1) <span class="string">"lisi"</span></span><br><span class="line">2) <span class="string">"300"</span></span><br><span class="line">3) <span class="string">"wangwu"</span></span><br><span class="line">4) <span class="string">"1000"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">"lisi"</span></span><br><span class="line">2) <span class="string">"wangwu"</span></span><br><span class="line">3) <span class="string">"zhangsan"</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">"lisi"</span></span><br><span class="line">2) <span class="string">"wangwu"</span></span><br></pre></td></tr></table></figure><p>案例：set 排序 储存班级成绩表 工资表排序 </p><p>普通消息 重要消息 根据权重来判断</p><h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h3><p>朋友的定位，附近的人，打车距离计算</p><p>Redis的Geo在3.2版本就退出了，这个功能可以推算地理位置的信息，两地之间的巨鹿，方圆几里的 人</p><p>只有6个命令</p><ol><li>geoadd</li><li>geodist</li><li>geohash</li><li>geopos</li><li>georadius</li><li>georadiusbymember</li></ol><blockquote><p>geoadd </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getadd 添加地理位置</span></span><br><span class="line"><span class="comment"># 规则：两级无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！</span></span><br><span class="line"><span class="comment"># 有效的经度从-180度到180度。</span></span><br><span class="line"><span class="comment"># 有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class="line"><span class="comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqin 114.05 22.52 shenzhen</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><blockquote><p>geopos</p></blockquote><p>获得当前定位，一定是一个坐标值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city beijing <span class="comment"># 获取指定的城市的经度纬度</span></span><br><span class="line">1) 1) <span class="string">"116.39999896287918091"</span></span><br><span class="line">   2) <span class="string">"39.90000009167092543"</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing chongqin</span><br><span class="line">1) 1) <span class="string">"116.39999896287918091"</span></span><br><span class="line">   2) <span class="string">"39.90000009167092543"</span></span><br><span class="line">2) 1) <span class="string">"106.49999767541885376"</span></span><br><span class="line">   2) <span class="string">"29.52999957900659211"</span></span><br></pre></td></tr></table></figure><blockquote><p>geodist</p></blockquote><p>两人之间的距离</p><p>单位：</p><ul><li>m表示单位为米</li><li>km表示单位为千米</li><li>mi表示单位为英里</li><li>ft表示单位为英尺</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai <span class="comment"># 查看上海到北京的直线距离</span></span><br><span class="line"><span class="string">"1067378.7564"</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai km</span><br><span class="line"><span class="string">"1067.3788"</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai m</span><br><span class="line"><span class="string">"1067378.7564"</span></span><br></pre></td></tr></table></figure><blockquote><p>georadius</p></blockquote><p>我附近的人？（获得所有附近的人的地址，定位）通过半径来查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km <span class="comment"># 以100 30这个经纬度为中心，寻找方圆1000km内的城市</span></span><br><span class="line">1) <span class="string">"chongqin"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br><span class="line">3) <span class="string">"shenzhen"</span></span><br><span class="line">4) <span class="string">"hangzhou"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 50 km</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km</span><br><span class="line">1) <span class="string">"chongqin"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist <span class="comment"># 显示到中间距离的位置</span></span><br><span class="line">1) 1) <span class="string">"chongqin"</span></span><br><span class="line">   2) <span class="string">"341.9374"</span></span><br><span class="line">2) 1) <span class="string">"xian"</span></span><br><span class="line">   2) <span class="string">"483.8340"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord<span class="comment"># 显示到他人的定位信息</span></span><br><span class="line">1) 1) <span class="string">"chongqin"</span></span><br><span class="line">   2) 1) <span class="string">"106.49999767541885376"</span></span><br><span class="line">      2) <span class="string">"29.52999957900659211"</span></span><br><span class="line">2) 1) <span class="string">"xian"</span></span><br><span class="line">   2) 1) <span class="string">"108.96000176668167114"</span></span><br><span class="line">      2) <span class="string">"34.25999964418929977"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord withdist count 2 <span class="comment"># 筛选出指定的结果</span></span><br><span class="line">1) 1) <span class="string">"chongqin"</span></span><br><span class="line">   2) <span class="string">"341.9374"</span></span><br><span class="line">   3) 1) <span class="string">"106.49999767541885376"</span></span><br><span class="line">      2) <span class="string">"29.52999957900659211"</span></span><br><span class="line">2) 1) <span class="string">"xian"</span></span><br><span class="line">   2) <span class="string">"483.8340"</span></span><br><span class="line">   3) 1) <span class="string">"108.96000176668167114"</span></span><br><span class="line">      2) <span class="string">"34.25999964418929977"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord withdist count 1</span><br><span class="line">1) 1) <span class="string">"chongqin"</span></span><br><span class="line">   2) <span class="string">"341.9374"</span></span><br><span class="line">   3) 1) <span class="string">"106.49999767541885376"</span></span><br><span class="line">      2) <span class="string">"29.52999957900659211"</span></span><br></pre></td></tr></table></figure><blockquote><p>georadiusbymember</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找出位于指定元素周围的其他元素</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km</span><br><span class="line">1) <span class="string">"beijing"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br></pre></td></tr></table></figure><blockquote><p>geohash（很少用）</p></blockquote><p>该命令将返回11个字符的geohash字符串</p><blockquote><p>GEO底层的实现原理其实就是Zset，我们可以使用Zset命令来操作geo</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1 <span class="comment"># 查看地图所有的城市</span></span><br><span class="line">1) <span class="string">"chongqin"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br><span class="line">3) <span class="string">"shenzhen"</span></span><br><span class="line">4) <span class="string">"hangzhou"</span></span><br><span class="line">5) <span class="string">"shanghai"</span></span><br><span class="line">6) <span class="string">"beijing"</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city beijing <span class="comment"># 移除城市</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">"chongqin"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br><span class="line">3) <span class="string">"shenzhen"</span></span><br><span class="line">4) <span class="string">"hangzhou"</span></span><br><span class="line">5) <span class="string">"shanghai"</span></span><br></pre></td></tr></table></figure><h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><p>什么是基数？ </p><p>一个数据集内不重复的元素的个数。</p><p>比如：A{1,3,5,7,7}  基数=5</p><blockquote><p>简介</p></blockquote><p>Redis 2.8.9版本就更新了Hyperloglog数据结构！<br>Redis Hyperloglog 基数统计的算法！<br>优点：占用的内存是固定，2^64不同的元素的技术，只需要废12KB内存！如果要从内存角度来比较的话Hyperloglog首选！</p><p>它有0.81%错误率！统计UV任务，但如果你允许容错的话，这可以忽略不计的！</p><p>网页的UV用户访问量（一个人访问一个网站多次，但是还是算作一个人！）传统的方式</p><p>set保存用户的id，然后就可以统计set中的元素数量作为标准判断！</p><p>这个方式如果保存大量的用户id，就会比较麻烦！我们的目的是为了计数，而不是保存用户id；</p><blockquote><p>测试使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd mykey a b c d e f</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; pfadd mykey2 e f g h i</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey2</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; pfmerge mykey3 mykey mykey2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey3</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br></pre></td></tr></table></figure><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><blockquote><p>位存储</p></blockquote><p>统计用户信息，活跃，不活跃！登录、未登录！打卡，365打卡！两个状态的，都可以使用Bitmaps！</p><p>Bitmaps位图，数据结构！都是操作二进制位来进行记录，就只有0和1两个状态！</p><p>365天=365bit 1字节=8bit 46个字节左右！</p><blockquote><p>测试</p></blockquote><p>使用bitmap来记录一个星期的打卡 </p><p>打卡：1   未打开：0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit week 0 1 <span class="comment"># 第一个数字表示周一，第2个数字表示打卡</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit week 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit week 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit week 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit week 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit week 5 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit week 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><blockquote><p>查看某一天是否打卡</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getbit week 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><blockquote><p>统计天数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount week <span class="comment">#统计这周的打卡记录</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Redis事务本质：一组命令的集合。一个事务中的所有命令都会被序列化，即在事务执行过程中，会按顺序执行(先进来就先执行)</p><p>一次性、顺序性、排他性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">----队列 set set set 执行-----</span><br></pre></td></tr></table></figure><p>Redis事务没有隔离级别的概念，即不会出现不可重复读，脏读等问题。</p><p>所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行</p><p>Redis单条命令保证原子性，但是事务不保证原子性</p><p>redis的事务：</p><ul><li>开启事务(multi)</li><li>命令入队(…)</li><li>执行事务(exec)</li></ul><blockquote><p>正常执行事务(以下操作算作是一组事务)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">"v2"</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><blockquote><p>取消事务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 每次开启事务都要加上这个</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard <span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4 <span class="comment"># 事务中的命令都不会被执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><blockquote><p>编译型异常(代码有问题，命令有错)，事务中所有命令都不会被执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 <span class="comment"># 错误的命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">'getset'</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4 <span class="comment"># 但此时并没有退出事务</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务报错</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k4 <span class="comment"># 所欲命令都不会被执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><blockquote><p>运行时异常(1/0)，如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 <span class="string">"v1"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range <span class="comment"># 虽然第一条命令报错了，但是依旧正常执行成功</span></span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">"v3"</span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">"v2"</span></span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">"v3"</span></span><br></pre></td></tr></table></figure><blockquote><p>监控 Watch</p></blockquote><p><strong>悲观锁</strong></p><ul><li>很悲观，认为什么时候都会出问题，无论做什么都会加锁</li></ul><p><strong>乐观锁</strong></p><ul><li>很乐观，认为什么时候都不会出问题，所以不会上锁。更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><blockquote><p>Redis测监视测试(无论事务执行成功与否，都会取消监视)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视 money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行之前，另外一个线程修改了money，这个时候，就会导致事务执行失败</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><blockquote><p>什么是Jedis</p></blockquote><p>我们要用java来操作Redis，Jedis是Redis官方推荐的java连接开发工具，使用java操作Redis的中间件。</p><blockquote><p>测试</p></blockquote><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>编码测试</p><ol><li><p>连接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、new Jedis 对象即可</span></span><br><span class="line">        Jedis jedis =<span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//jedis 所有的命令就是我们之前学习的所有指令！</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>操作命令</p><p>所有的api命令就是之前学得命令，一模一样</p></li><li><p>断开连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.close()</span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>事务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">    Jedis jedis =<span class="keyword">new</span> Jedis（<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">        jedis.flushdb();</span><br><span class="line">        JSONObject jsonObject=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"name"</span>,<span class="string">"kuangshen"</span>);</span><br><span class="line">    Transaction multi=jedis.multi();<span class="comment">//开启事务</span></span><br><span class="line">        String result=jsonObject.toJSONString();</span><br><span class="line">        <span class="comment">//jedis.watch(result);</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">    multi.set(<span class="string">"user1"</span>,result);</span><br><span class="line">             multi.set(<span class="string">"user2"</span>,result);</span><br><span class="line">             <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//代码抛出异常，执行失败</span></span><br><span class="line">             multi.exec();<span class="comment">//执行事务</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>（Exception e）&#123;</span><br><span class="line">            multi.discard();<span class="comment">//放弃事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"> &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">"user1"</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">"user2"</span>));</span><br><span class="line">            jedis.close();<span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h2><p>启动redis的时候，就通过配置文件来启动的</p><blockquote><p>单位 units</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis configuration file example.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">说明对大小写不敏感</span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure><blockquote><p>包含 INCLUDES</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Notice option "include" won't be rewritten by command "CONFIG REWRITE"</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you'd better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">可以把多个文件配置过来，相当于spring当中的import include</span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br></pre></td></tr></table></figure><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment"># 绑定的ip</span></span><br><span class="line">protect-mode yes <span class="comment"># 保护模式</span></span><br><span class="line">port 6379 <span class="comment"># 端口设置</span></span><br><span class="line">tcp-keepalive 300 <span class="comment"># 默认为300 用来定时向client发送tcp_ack包来探测client是否存活的</span></span><br></pre></td></tr></table></figure><blockquote><p>通用 GENERAL</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes <span class="comment"># 以守护进程的方式运行，默认为no，我们需要自己开启为yes，不然的话一退出，进程就结束了(即后台运行)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidfile /var/run/redis_6379.pid <span class="comment"># 如果以后台的方式运行，我们就需要指定一个pid文件</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing) 测试开发阶段</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">logfile <span class="string">""</span> <span class="comment"># 日志的文件位置名</span></span><br><span class="line">databases 16 <span class="comment"># 数据库的数量，默认有16个</span></span><br><span class="line">always-show-logo yes <span class="comment"># 是否总是显示logo</span></span><br></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件.rdb  .aof</p><p>redis是内存数据库，如果没有持久化，那么数据断电即失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果900秒内，如果至少有1个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 如果300秒内，如果至少有10个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 如果60秒内，如果至少有10000个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment"># 持久化如果出错，是否还需要继续工作</span></span><br><span class="line">rdbcompression yes <span class="comment"># 是否压缩rdb文件(持久化文件)，需要消耗一些cpu资源</span></span><br><span class="line">rdbchecksum yes <span class="comment"># 保存rdb文件的时候，进行错误的检查校验、</span></span><br><span class="line">dir ./ <span class="comment"># rdb文件保存的目录</span></span><br></pre></td></tr></table></figure><blockquote><p>SECURITY 安全</p></blockquote><p>可以在这里设置redis的密码，默认是没有密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass <span class="comment"># 获取redis的密码</span></span><br><span class="line">1) <span class="string">"requirepass"</span></span><br><span class="line">2) <span class="string">""</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass <span class="string">"123456"</span> <span class="comment"># 设置redis的密码</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">"requirepass"</span></span><br><span class="line">2) <span class="string">"123456"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ ~]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; ping <span class="comment"># 发现所有的命令都没有权限了</span></span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456 <span class="comment"># 使用命令进行登录</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">"requirepass"</span></span><br><span class="line">2) <span class="string">"123456"</span></span><br></pre></td></tr></table></figure><blockquote><p>CLIENTS 限制</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 <span class="comment"># 设置能连接上redis最大连接客户端的数量</span></span><br><span class="line">maxmemory &lt;botes&gt; <span class="comment"># redis配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment"># 内存达到上限之后的处理策略</span></span><br></pre></td></tr></table></figure><blockquote><p>APPEND ONLY MODE aof配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment"># 默认是不开启aof模式，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span> <span class="comment"># 持久化文件的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会同步，小号性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次同步，可能会丢失这1s的数据</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行同步，这个时候操作系统自己同步，速度最快</span></span><br></pre></td></tr></table></figure><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的</p><p>数据库状态也会消失。所以Redis 提供了持久化功能！</p><h3 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h3><blockquote><p>什么是RDB</p></blockquote><p><img src="https://redisimages.oss-cn-guangzhou.aliyuncs.com/RDB.png" alt></p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快</p><p>照文件直接读到内存里。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程</p><p>结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何I0操作的。这就</p><p>保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式</p><p>比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置</p><p>有时候在生产环境我们会将这个文件进行备份</p><p>RDB保存的文件是dump.rdb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The filename where to dump the DB</span></span><br><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们测试一下：只要60s内修改5次key，就会触发rdb操作,即持久化到硬盘中</span><br><span class="line"><span class="comment"># save 900 1</span></span><br><span class="line"><span class="comment"># save 300 10</span></span><br><span class="line"><span class="comment"># save 60 10000</span></span><br><span class="line">save 60 5</span><br></pre></td></tr></table></figure><blockquote><p>触发机制</p></blockquote><ol><li>save的规则满足的情况下，会自动触发rdb规则</li><li>执行flushdb命令，也会触发我们rdb规则（kill，不会生成）</li><li>退出redis，也会产生rdb文件</li></ol><p>备份就自动生成一个dump.rdb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># ls</span></span><br><span class="line">chardetect      dump.rdb          jsondiff     myconfig         redis-cli</span><br><span class="line">cloud-id        easy_install      jsonpatch    redis-benchmark  redis-sentinel</span><br><span class="line">cloud-init      easy_install-3.6  jsonpointer  redis-check-aof  redis-server</span><br><span class="line">cloud-init-per  easy_install-3.8  jsonschema   redis-check-rdb</span><br></pre></td></tr></table></figure><blockquote><p>如果恢复rdb文件</p></blockquote><ol><li><p>只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候回自动检查dump.rdb 恢复其中的数据</p></li><li><p>查看需要存放的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">"dir"</span></span><br><span class="line">2) <span class="string">"/usr/local/bin"</span> <span class="comment"># 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure></li></ol><p>优缺点：</p><ol><li>适合大规模数据恢复</li><li>对数据完整性要求不高</li></ol><p>缺点：</p><ol><li>需要一定的时间间隔进程操作，如果redis意外宕机了，这个最后一次修改数据就没有了</li><li>fork进程的时候，会占用一定的内存空间</li></ol><h3 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h3><p>将我们的所有命令都记录下来，恢复的时候就把这些命令重新执行一遍</p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据田志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p>AOF保存的是appendonly.aof文件</p><blockquote><p>append</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认是不开启的,只需要改成yes就开启的了</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为修改了配置文件，这里需要重启一下</span></span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># redis-server myconfig/redis.conf</span></span><br><span class="line">23366:C 13 Mar 2021 14:49:11.605 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">23366:C 13 Mar 2021 14:49:11.605 <span class="comment"># Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=23366, just started</span></span><br><span class="line">23366:C 13 Mar 2021 14:49:11.605 <span class="comment"># Configuration loaded</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启之后就可以生效了</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># ls</span></span><br><span class="line">appendonly.aof  dump.rdb          jsonpatch        redis-check-aof</span><br><span class="line">chardetect      easy_install      jsonpointer      redis-check-rdb</span><br><span class="line">cloud-id        easy_install-3.6  jsonschema       redis-cli</span><br><span class="line">cloud-init      easy_install-3.8  myconfig         redis-sentinel</span><br><span class="line">cloud-init-per  jsondiff          redis-benchmark  redis-server</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写数据</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">"v2"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看appendonly.aof文件(只记录所有写操作)</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># vim appendonly.aof</span></span><br><span class="line"><span class="variable">$1</span></span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">k1</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">v1</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">k2</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">v2</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">k3</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">v3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭redis服务并且破坏appendonly.aof文件</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># vim appendonly.aof</span></span><br><span class="line"><span class="variable">$1</span></span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">k1</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">v1</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">k2</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">v2</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">k3</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">dfsfdsfsfsfdsv3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># redis-server myconfig/redis.conf</span></span><br><span class="line">24355:C 13 Mar 2021 15:07:54.523 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">24355:C 13 Mar 2021 15:07:54.523 <span class="comment"># Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=24355, just started</span></span><br><span class="line">24355:C 13 Mar 2021 15:07:54.523 <span class="comment"># Configuration loaded</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接失败 所以aof文件有问题是启动不了redis的</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</span><br></pre></td></tr></table></figure><p>如果这个aof文件有错位，这时候redis是启动不起来的，我们需要修复这个aof文件</p><p>redis给我们体用了一个工具<code>redis-check-aof</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ bin]<span class="comment"># redis-check-aof --fix appendonly.aof</span></span><br><span class="line">0x              6a: Expected \r\n, got: 7366</span><br><span class="line">AOF analyzed: size=123, ok_up_to=81, diff=42</span><br><span class="line">This will shrink the AOF from 123 bytes, with 42 bytes, to 81 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br><span class="line"><span class="comment"># 这时候如果重新进去appendonly.aof文件时可以看到这个文件给修复了</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重启redis就可以恢复了</span><br></pre></td></tr></table></figure><p>优点和缺点</p><p>优点：</p><ol><li>每一次修改都同步，文件的完整会更好</li><li>默认每秒同步一次，可能会丢失一秒数据</li></ol><p>缺点：</p><ol><li>相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢</li><li>aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><p>扩展：</p><p>1、RDB持久化方式能够在指定的时间间隔内对你的数据进行快照存储<br>2、AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化4、同时开启两种持久化方式<br>·在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。<br>·RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。<br>5、性能建议<br>·因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 9001这条</p><p>如果Enable AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。<br>·如果不Enable AOF，仅靠Master-Slave Repllcation实现高可用性也可以，能省掉一大笔0，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个，微博就是这种架构。</p><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（master/leader），后者称为从节点<br>（slave/follower）；数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。<br>主从复制的作用主要包括：<br>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据沉余方式。<br>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。<br>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。<br>4、高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。<br>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机，一主二从），原因如下：<br>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；<br>2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>只许配从库，不用配置主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication <span class="comment"># 查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 角色 master</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 没有从机</span></span><br><span class="line">master_replid:37b43fbf653f172df6732500fd9d6e8f6a12d1a8</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>复制3个配置文件，然后修改队形的信息</p><ol><li>端口</li><li>pid名字</li><li>log文件名字</li><li>dump.rdb名字</li></ol><p>修改完毕之后，启动我们的3个redis服务器</p><h3 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h3><p>默认情况下，每台redis服务器都是主节点，我们一般情况下只用配置从机就好了</p><p>有一点要注意：如果主机有密码的话 ，需要在从机中配置主机的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; salveof 127.0.0.1 6379 <span class="comment"># 找谁当自己的老大</span></span><br></pre></td></tr></table></figure><p>真实的主从配置应该是在配置文件中配置的，这样的话是永久的，因为命令行都是暂时改变的东西都是暂时的</p><p>注意：</p><p>主机可以写，从机不能写，只能读！主机中的所有信息和数据，都会自动被从机保存</p><p>如果主机断开连接，从机依旧连接主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息</p><p>如果是使用命令行来配置主从，这个时候如果从机重启，就会变回主机，只要变为从机，立马就会从主机中获取值</p><blockquote><p>复制原理</p></blockquote><p>Slave 启动成功连接到master 后会发送一个sync同步命令Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。<br>全量复制：而save服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步但是只要是重新连接master，一次完全同步（全量复制）将被自动执行</p><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>(自主选举老大的模式)</p><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵）架构来解决这个问题。<br>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。<br>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p><strong><img src="https://redisimages.oss-cn-guangzhou.aliyuncs.com/%E5%8D%95%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png" alt></strong></p><p>这里的哨兵有两个作用<br>·通过发送命令，监控Redis服务器，并让Redis服务器返回其运行状态，包括主服务器和从服务器。<br>·当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。<br>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式</p><p><img src="https://redisimages.oss-cn-guangzhou.aliyuncs.com/%E5%A4%9A%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png" alt></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的称为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。</p><blockquote><p>测试</p></blockquote><p>我们目前的状态是一主二从</p><ol><li><p>配置哨兵配置文件sentinel.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 host port 1</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>后面的数字1，代表主机挂了，slave投票看谁接替称为主机，票数最多的，就会成为主机</p></li><li><p>启动哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel myconfig/sentinel.conf</span><br></pre></td></tr></table></figure><p>如果master节点断开了，这个时候就会从从机中随机选择一个服务器(这里有一个投票算法)</p><p>如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则</p></li></ol><blockquote><p>哨兵模式</p></blockquote><p>优点：</p><ol><li>哨兵集群，基于主从复制模式，所有的主从配置有点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li></ol><p>缺点：</p><ol><li>Redis不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实就很麻烦，里面有很多选择</li></ol><h2 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h2><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题,就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><p>另外的一些典型问题就是，缓存穿透、 缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p><h3 id="缓存穿透-查不到"><a href="#缓存穿透-查不到" class="headerlink" title="缓存穿透(查不到)"></a>缓存穿透(查不到)</h3><blockquote><p> 概念</p></blockquote><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发 现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中(秒杀! )于是都去请求了持久层数据库。 这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力</p><p>缓存空对象</p><p>当存储层不命中后，即将返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源</p><p>但是这种方法会存在两个问题：</p><ol><li>如果空值能够被缓存起来，这就意味着缓存需要更多空间存储更多的键，因为这当中可能会有很多的空值的键；</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响</li></ol><h3 id="缓存击穿-量太大，缓存过期"><a href="#缓存击穿-量太大，缓存过期" class="headerlink" title="缓存击穿(量太大，缓存过期)"></a>缓存击穿(量太大，缓存过期)</h3><blockquote><p>概述</p></blockquote><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停地扛着大并发，大并发集中对这一点进行访问 ，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据 ，由于缓存过期,会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><blockquote><p>解决方案</p></blockquote><p><strong>设置热点数据永不过期</strong></p><p>从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题。</p><p><strong>加互斥锁</strong></p><p>分布式锁:使用分布式锁，保证对于每个key同时只有一一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可，这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概念</p></blockquote><p>缓存雪崩，是指在某一个时间段.,缓存集中过期失效。</p><p>产生雪崩的原因之一，比如在写本文的时候 ，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><p>双十一:停掉一些服务(比如不能当天退款)</p><blockquote><p>解决方案</p></blockquote><p>redis高可用</p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p><p><strong>限流降级</strong></p><p>这个解决方案的思想是，在缓存失效后;通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong></p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍,这样部分可能大显访问的数据就会加载到缓存中.在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql优化</title>
      <link href="2021/03/02/mysql%E4%BC%98%E5%8C%96/"/>
      <url>2021/03/02/mysql%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql高级"><a href="#Mysql高级" class="headerlink" title="Mysql高级"></a>Mysql高级</h1><h2 id="Mysql逻辑架构介绍"><a href="#Mysql逻辑架构介绍" class="headerlink" title="Mysql逻辑架构介绍"></a>Mysql逻辑架构介绍</h2><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/mysql%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt></p><h3 id="mysql四层架构"><a href="#mysql四层架构" class="headerlink" title="mysql四层架构"></a>mysql四层架构</h3><ol><li><p><strong>连接层：</strong>最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></li><li><p><strong>服务层：</strong>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td>Management Serveices &amp; Utilities</td><td>系统管理和控制工具（备份、容灾恢复、安全、复制、集群..）</td></tr><tr><td>SQL Interface</td><td>SQL 接口（DDL、DML、存储过程、视图、触发器..）。 接受用户的 SQL 命令， 并且返回用户需要查询的结果。 比如 select from 就是调用 SQL Interface</td></tr><tr><td>Parser</td><td>解析器。 SQL 命令传递到解析器的时候会被解析器验证和解析</td></tr><tr><td>Optimizer</td><td>查询优化器。 SQL 语句在查询之前会使用mysql中专门负责优化select语句的优化模块，通过计算分析系统中收集到的统计信息，为客户端请求的 query（sql语句）提供它认为最优的执行计划(由此可见，它认为最优的数据检索方式，不见得是DBA认为最优的)</td></tr><tr><td>Cache &amp; Buffer</td><td>查询缓存。 如果查询缓存有命中的查询结果， 查询语句就可以直接去查询缓存中取数据。 这个缓存机制是由一系列小缓存组成的。 比如表缓存， 记录缓存， key 缓存， 权限缓存等</td></tr></tbody></table><p>大致的过程就是：客户端发过来一个请求，SQL Interface来分类出此操作是写操作还是读操作，通过Parser转换以后，把注释去掉，处理成mysql能理解sql之后，再按照Optimizer自己认为最优的方式去运行，比如简单来说就是说你这个sql的查询和加载顺序是 1234，但经过优化之后可能变成了2314，通过这个优化，mysql就会运行自己认为最优的，而不是按照程序员认为最优。言下之意：这一模块块可以’拔’出来，然后换成自己认为最优的方式去运行，比如阿里的mysql就是如此进行优化的。</p></li><li><p><strong>引擎层：</strong>拔插式的存储引擎，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过APl与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</p></li><li><p><strong>存储层：</strong>数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</p></li></ol><p>大致运行流程：</p><ul><li>mysql 客户端通过协议与 mysql 服务器建连接， 发送查询语句， 先检查查询缓存， 如果命中， 直接返回结果，否则进行语句解析,也就是说， 在解析查询之前， 服务器会先访问查询缓存(query cache)——它存储 SELECT 语句以及相应的查询结果集。 如果某个查询结果已经位于缓存中， 服务器就不会再对查询进行解析、 优化、 以及执行。 它仅仅将缓存中的结果返回给用户即可， 这将大大提高系统的性能。</li><li>语法解析器和预处理： 首先 mysql 通过关键字将 SQL 语句进行解析， 并生成一颗对应的“解析树”。 mysql 解析器将使用 mysql 语法规则验证和解析查询； 预处理器则根据一些 mysql 规则进一步检查解析数是否合法。</li><li>查询优化器首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析Query中的Hint信息（如果有），看显示Hint信息是否可以完全确定该Query的执行计划。如果没有Hint 或Hint信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。</li></ul><h3 id="mysql存储引擎"><a href="#mysql存储引擎" class="headerlink" title="mysql存储引擎"></a>mysql存储引擎</h3><blockquote><p>查看 mysql 支持的存储引擎(默认引擎为InnoDB)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysql&gt; show engines;</span><br><span class="line">+<span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line">| Engine             | Support | <span class="keyword">Comment</span>                                                        | Transactions | XA   | Savepoints |</span><br><span class="line">+<span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line">| <span class="keyword">InnoDB</span>             | <span class="keyword">DEFAULT</span> | Supports transactions, <span class="keyword">row</span>-<span class="keyword">level</span> locking, <span class="keyword">and</span> <span class="keyword">foreign</span> <span class="keyword">keys</span>     | YES          | YES  | YES        |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection <span class="keyword">of</span> identical MyISAM <span class="keyword">tables</span>                          | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| <span class="keyword">MEMORY</span>             | YES     | <span class="keyword">Hash</span> based, <span class="keyword">stored</span> <span class="keyword">in</span> <span class="keyword">memory</span>, useful <span class="keyword">for</span> <span class="keyword">temporary</span> <span class="keyword">tables</span>      | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/<span class="literal">null</span> <span class="keyword">storage</span> <span class="keyword">engine</span> (anything you write <span class="keyword">to</span> it disappears) | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| MyISAM             | YES     | MyISAM <span class="keyword">storage</span> <span class="keyword">engine</span>                                          | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| CSV                | YES     | CSV <span class="keyword">storage</span> <span class="keyword">engine</span>                                             | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| <span class="keyword">ARCHIVE</span>            | YES     | <span class="keyword">Archive</span> <span class="keyword">storage</span> <span class="keyword">engine</span>                                         | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | <span class="keyword">Performance</span> <span class="keyword">Schema</span>                                             | <span class="keyword">NO</span>           | <span class="keyword">NO</span>   | <span class="keyword">NO</span>         |</span><br><span class="line">| FEDERATED          | <span class="keyword">NO</span>      | Federated MySQL <span class="keyword">storage</span> <span class="keyword">engine</span>                                 | <span class="literal">NULL</span>         | <span class="literal">NULL</span> | <span class="literal">NULL</span>       |</span><br><span class="line">+<span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>MyISAM和InnoDB引擎的比较</strong></p><table><thead><tr><th>对比项</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>主外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td>行锁，操作时只锁某一行，不对其他行有影响，适合高并发操作</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td></tr><tr><td>表空间</td><td>小</td><td>大</td></tr><tr><td>关注点</td><td>性能</td><td>事务</td></tr><tr><td>## 索引优化分析</td><td></td><td></td></tr></tbody></table><h3 id="性能下降、SQL慢、执行时间长、等待时间长的原因分析"><a href="#性能下降、SQL慢、执行时间长、等待时间长的原因分析" class="headerlink" title="性能下降、SQL慢、执行时间长、等待时间长的原因分析"></a>性能下降、SQL慢、执行时间长、等待时间长的原因分析</h3><ol><li>查询语句写的烂</li><li>索引失效<ol><li>单值索引：在表中给一个属性建索引 <ul><li>比如给user表中的name属性建个索引：create index idx_user_name on user(name)</li></ul></li><li>复合索引：在表中给多个属性建索引<ul><li>比如给user表中的name、phone属性建索引：create index idx_user_namePhone on user(name,phone)</li></ul></li></ol></li><li>关联查询太多join（设计缺陷或不得已的需求）</li><li>服务器调优及各个参数设置（缓冲、线程数）</li></ol><h3 id="常见的JOIN查询"><a href="#常见的JOIN查询" class="headerlink" title="常见的JOIN查询"></a>常见的JOIN查询</h3><h4 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h4><ul><li><p>手写的顺序（从上至下）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span></span><br><span class="line">&lt;select_list&gt;</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">&lt;left_table&gt;&lt;join_type&gt;</span><br><span class="line"><span class="keyword">join</span> &lt;right_table&gt; <span class="keyword">on</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">&lt;where_condition&gt;</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">&lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">&lt;having_condition&gt;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">&lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">limit</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>机读顺序</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/sql%E6%9C%BA%E8%AF%BB%E9%A1%BA%E5%BA%8F.png" alt></p></li></ul><h4 id="JOIN理论图"><a href="#JOIN理论图" class="headerlink" title="JOIN理论图"></a>JOIN理论图</h4><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/join%E7%9A%847%E7%A7%8D%E8%BF%9E%E6%8E%A5.jpg" alt></p><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><h4 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h4><ol><li><p>MySQL官方对索引的定义为：索引(Index)是帮助MySQL高效获取数据的数据结构。即索引的本质：<strong>索引是数据结构</strong></p><p>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构<strong>以某种方式引用（指向）数据</strong>，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p></li><li><p>简单理解为”<strong>排好序的能快速查找的数据结构</strong>“，即<strong>索引=排序+查找</strong></p><p>索引的目的在于提高查询效率，可以类比字典。比如如果要查询“mysql”这个单词，用了索引的话，我们肯定需要先定位到m字母，然后从下往上找到y字母，再找到剩下的sql。而如果没有索引，那么你可能需要a–z这样遍历的搜索。</p></li><li><p>一般来说索引本身占用内存空间也很大，不可能全部存储在内存中，因此<strong>索引往往以文件形式存储在硬盘上</strong></p></li><li><p>我们平时所说的索引，如果没有特别指明，都是指B树(多路搜索树，并不一定是二叉树)结构组织的索引。</p></li><li><p>聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。当然，除了B+树这种类型的索引之外，还有哈希索引(hash index)等</p></li></ol><h4 id="索引的优劣势"><a href="#索引的优劣势" class="headerlink" title="索引的优劣势"></a>索引的优劣势</h4><blockquote><p>优势</p></blockquote><ol><li>类似大学图书馆的书目索引，提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序成本，降低了CPU的消耗</li></ol><blockquote><p>劣势</p></blockquote><ol><li>实际上索引也是一张表，该表保存了主键和索引字段，并指向实体表的记录，所以索引列也是要占用空间的</li><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如果对表insert，update和delete。因为更新表时，MySQL不仅要不存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息</li><li>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立优秀的索引，或优化查询语句</li></ol><h3 id="mysql索引分类"><a href="#mysql索引分类" class="headerlink" title="mysql索引分类"></a>mysql索引分类</h3><ol><li>单值索引：是最基本的索引，它没有任何限制，即一个索引只包含单个列，一个表可以有多个单列索引；建议一张表索引不要超过5个，优先考虑复合索引</li><li>唯一索引：与前面的单值索引类似，不同的就是：索引列的值必须唯一，但允许有空值，如主键索引。如果是组合索引，则列值的组合必须唯一</li><li>复合索引：指一个索引包含多个字段，只有在查询条件中使用了创建索引时的<strong>第一个字段</strong>，索引才会被使用。使用组合索引时遵循最左前缀原则</li></ol><h3 id="索引基本语法"><a href="#索引基本语法" class="headerlink" title="索引基本语法"></a>索引基本语法</h3><p><strong>创建索引：</strong></p><ul><li>如果是char和varchar类型，length可以小于字段实际长度；</li><li>如果是blob和text类型，必须指定length。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">unique</span>] <span class="keyword">index</span> indexName <span class="keyword">ON</span> tableName(columnname(<span class="keyword">length</span>));</span><br><span class="line"><span class="comment">--或者</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> [indexName] <span class="keyword">ON</span>(columnname(<span class="keyword">length</span>));</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> [indexName] <span class="keyword">ON</span> tableName;</span><br></pre></td></tr></table></figure><p><strong>查看索引</strong>（\G表示将查询到的横向表格纵向输出，sql结尾不需要加分号，方便阅读）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> tableName\G</span><br></pre></td></tr></table></figure><p><strong>添加数据表的索引</strong></p><p>使用 ALTER 命令，有四种方式：</p><ol><li>ALTER TABLE tableName ADD PRIMARY KEY(column_list)：该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</li><li>ALTER TABLE tableName ADD UNIQUE index_name(column_list)：这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li><li>ALTER TABLE tableName ADD INDEX index_name(column_list)：.添加（单值或复合）索引，索引值可出现多次。</li><li>ALTER TABLE tableName ADD FULLTEXT index_name(column_list)：该语句指定了索引为FULLTEXT，用于全文索引。</li></ol><h3 id="B-Tree搜索过程"><a href="#B-Tree搜索过程" class="headerlink" title="B+Tree搜索过程"></a>B+Tree搜索过程</h3><ol><li><p>B+Tree和BTree的区别</p><p> B树的关键字和数据记录是放在一起的； B+树的非叶子节点中只有关键字和指向下一个节点的索引， 数据记录只放在叶子节点中。</p></li><li><p>B+Tree 与 BTree 的查找过程</p><ol><li>在 B 树中， 越靠近根节点的记录查找时间越快， 只要找到关键字即可确定记录的存在； 而 B+ 树中每个记录的查找时间基本是一样的， 都需要从根节点走到叶子节点， 而且在叶子节点中还要再比较关键字。</li><li>从这个角度看 B 树的性能好像要比 B+ 树好， 而在实际应用中却是 B+ 树的性能要好些。 因为 B+ 树的非叶子节点不存放实际的数据，这样每个节点可容纳的关键字个数比 B 树多， 树高比 B 树小， 这样带来的好处是减少磁盘访问次数，即减少IO。</li><li>B+树的查询效率更加稳定：由于非终结点并不是最终指向文件内容的结点， 而只是叶子结点中关键字的索引。 所以任何关键字的查找必须走一条从根结点到叶子结点的路。 所有关键字查询的路径长度相同， 导致每一个数据的查询效率相当。 而且 B+树的叶子节点使用指针连接在一起， 方便顺序遍历（范围搜索）， 这也是很多数据库和文件系统使用 B+树的缘故。</li></ol></li><li><p>索引的性能提升</p><p>真实的情况是， 3 层的 B+ 树可以表示上百万的数据， 如果上百万的数据查找只需要三次 IO， 性能提高将是巨大的，如果没有索引， 每个数据项都要发生一次 IO， 那么总共需要百万次的 IO， 显然成本非常非常高。</p></li></ol><h3 id="何时需要建索引"><a href="#何时需要建索引" class="headerlink" title="何时需要建索引"></a>何时需要建索引</h3><blockquote><p><strong>那些情况适合建索引</strong></p></blockquote><ol><li>主键自动建立唯一索引</li><li>频繁作为查询的条件的字段应该创建索引</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>单值/组合索引的选择问题（在高并发下倾向创建组合索引）</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序的速度</li><li>查询中统计或者分组字段</li></ol><blockquote><p><strong>那些情况不要建索引</strong></p></blockquote><ol><li>表记录数据太少</li><li>Where 条件里用不到的字段不创建索引</li><li><strong>经常增删改的表</strong></li><li><strong>数据重复且分布平均的表字段</strong>，因此应该只为经常查询和经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li></ol><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="mysql常见瓶颈"><a href="#mysql常见瓶颈" class="headerlink" title="mysql常见瓶颈"></a>mysql常见瓶颈</h4><ol><li>CPU 瓶颈：CPU在饱和的时候一般发生在数据装入在内存或从磁盘上读取数据时候</li><li>IO 瓶颈：磁盘I/O瓶颈发生在装入数据远大于内存容量时</li><li>服务器硬件的性能瓶颈：top、free、iostat和vmstat来查看系统的性能状态</li></ol><h4 id="Explain概述"><a href="#Explain概述" class="headerlink" title="Explain概述"></a>Explain概述</h4><ol><li><p><strong>Explain是什么</strong></p><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是结构的性能瓶颈</p></li><li><p><strong>Explain能做什么</strong></p><ol><li>表的读取顺序（id 字段）</li><li>数据读取操作的操作类型（select_type 字段）</li><li>哪些索引理论上可以使用（possible_keys 字段）</li><li>哪些索引被实际使用（keys 字段）</li><li>表之间的引用（ref 字段）</li><li>每张表有多少行被优化器查询（rows 字段）</li></ol></li><li><p><strong>Explain怎么用？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> + <span class="keyword">sql</span>语句</span><br></pre></td></tr></table></figure><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/explain%E5%88%86%E6%9E%90.png" alt></p></li><li><p><strong>Explain详细说明</strong></p><blockquote><p>id：<strong>select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</strong></p></blockquote><p>id的取值有3种情况：</p><ol><li><p>id相同，表示执行顺序由上至下</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/id%E7%9B%B8%E5%90%8C.png" alt></p><p>即此表中mysql执行的顺序是t1 t3 t2，并不是我们理解的t1 t2 t3</p></li><li><p>id不同，表示如果是子查询，id的序号会递增，<strong>id值越大优先级越高，越先被执行</strong></p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/id%E4%B8%8D%E5%90%8C.png" alt></p><p>即此表中mysql执行的顺序是t3 t1 t2   primary表示最外层查询，subquery表示子查询</p></li><li><p>id相同不同。id如果相同，可以认为是一组，从上往下执行。在所有组中，id值越大，优先级越高，越先被执行</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/id%E7%9B%B8%E5%90%8C%E4%B8%8D%E5%90%8C.png" alt></p><p>from后面是虚表，并不是真实的表。derived表示衍生的意思。而这里的derived2是指向了id=2那个虚表，即s1。此表中mysql执行的顺序是t3 s1 t2</p></li></ol></li></ol><blockquote><p><strong>select_type：查询的类型，主要用于区别普通查询、联合查询、子查询等复杂查询</strong></p></blockquote><ol><li>SIMPLE：简单的select查询，查询中不包含子查询或者UNION</li><li>PRIMARY：查询中若包含任何复杂的子部分，最外层查询则被标记为PRIMARY</li><li>SUBQUERY：在SELECT或者WHERE列表中包含了子查询</li><li>DERIVED：在FROM列表中包含的子查询被标记为DERIVED（衍生）MySQL会递归执行这些子查询，把结果放在临时表里</li><li>UNION：若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED</li><li>UNION RESULT：从UNION表获取结果的SELECT</li></ol><blockquote><p><strong>table：显示这一行的数据是关于哪张表的</strong></p></blockquote><blockquote><p><strong>type：访问类型排列，显示查询使用了何种类型</strong></p></blockquote><p>type显示的是访问类型，是较为重要的一个指标，<strong>结果值从最好到最坏依次一般是</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</span><br></pre></td></tr></table></figure><p><strong>一般来说，得保证查询至少达到range级别，最好能达到ref</strong>。而对于All来说，一般达到百万级别的才需要优化，没百万级别的，mysql优化得还是很好的。</p><hr><ol><li><p>system：表只有一行记录（等于系统表），这是const类型的特例，一般这种表跟业务没关系，平时不会出现，这个也可以忽略不计。</p></li><li><p>const：表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为一个常量</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/const.png" alt></p></li><li><p>eq_ref：唯一性索引，对于<code>每个索引键</code>，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/eq_ref.png" alt></p><p>【eq_ref与const的区别】：</p><ul><li>const是直接按主键或唯一键读取，而<code>eq_ref</code>用于联表查询的情况，按联表的主键或唯一键联合查询。</li><li>eq_ref通过主表的主键在从表中匹配后有唯一对应(一对一)。即eq_ref是可能有多条记录，但是A表的外键对应B表中只有一条记录</li><li>const只有一条记录</li></ul></li><li><p>ref：非唯一索引扫描，返回匹配某个单独值的所有行(一对多)。本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/ref.png" alt></p></li><li><p>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引一般就是在你的where语句中出现了<code>between</code>、<code>&lt;</code>、<code>&gt;</code>、<code>in</code>等的查询这种范围扫描索引扫描比全表扫描要好，因为他只需要开始索引的某一点，而结束于另一点，不用扫描全部索引</p></li><li><p>index：Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和index都是读全表，但index是从索引中读取的（可以少一些io），而all是从硬盘数据库文件中读的）</p></li><li><p>all：FullTable Scan，将遍历全表以找到匹配的行（全表扫描）</p></li></ol><blockquote><p><strong>possible_keys 理论上的索引</strong>  </p></blockquote><ol><li>显示<strong>可能</strong>应用在这张表中的索引，一个或多个</li><li>若查询涉及的字段上存在索引，则该索引将被列出，但不一定被查询实际使用</li></ol><blockquote><p><strong>key  实际上的索引</strong> </p></blockquote><ol><li><strong>实际</strong>使用的索引，如果为null，则2种情况<ol><li>没有使用索引或者没建索引</li><li>建了之后索引失效</li></ol></li><li>若查询中使用了覆盖索引，则该索引仅出现在key列表中</li></ol><blockquote><p><strong>key_len</strong></p></blockquote><ol><li>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好</li><li>key_len显示的值为索引最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</li></ol><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/key_len.png" alt></p><blockquote><p><strong>ref</strong></p></blockquote><p><strong>显示索引哪一列被使用了</strong>，如果可能的话，最好是一个常数。哪些列或常量被用于查找索引列上的值</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/reff.png" alt></p><p>由key_len可知t1表的索引idx_col1_col2被充分使用，t1表的col1匹配t2表的col1，t1表的col2匹配了一个常量，即’ac’</p><blockquote><p><strong>row</strong></p></blockquote><p>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/rows.png" alt></p><blockquote><p><strong>Extra：包含不适合在其他列中显示但十分重要的额外信息</strong></p></blockquote><ol><li><p><strong>using filesort（不好）</strong></p><p>MySQL中无法利用索引完成排序操作称为“文件排序”，说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。即你建好了索引，所谓的索引就是先排序再查找，可是某种情况下用不上你的索引，或者说使用过程中出现了其他问题，mysql只好把这些数据在内部再排序一次。<strong>需要尽快优化 SQL</strong></p><p>比如：</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/using%20filesort.png" alt></p><ul><li>示例中第一个查询只使用了 col1 和 col3，原有索引派不上用场，所以进行了外部文件排序</li><li>示例中第二个查询使用了 col1、col2 和 col3，原有索引派上用场，无需进行文件排序</li></ul><p><strong>言下之意：排序的时候最好也遵守你所建索引的顺序和个数</strong></p></li><li><p><strong>using temporary</strong>（不好）</p><p>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序 order by 和分组查询 group by，<strong>需要立即优化 SQL</strong></p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/using%20temporary.png" alt></p><ul><li>示例中第一个查询只使用了 col1，原有索引派不上用场，所以创建了临时表进行分组</li><li>示例中第二个查询使用了 col1、col2，原有索引派上用场，无需创建临时表</li><li><strong>言下之意：分组的时候最好也遵守你所建索引的顺序和个数</strong></li></ul></li><li><p><strong>using index</strong>(好)</p><p>表示相应的select操作中使用了覆盖索引（Coveing Index），避免访问了表的数据行，效率不错！</p><p>如果同时出现using where，表明索引被用来执行索引键值的查找</p><p>如果没有同时出现using where，表明索引用来读取数据而非执行查找动作</p><p>覆盖索引（Covering Index），select的字段和建索引的字段相同，则只从索引就可以获得数据。也说为索引覆盖：就是select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件，换句话说查询列要被所建的索引覆盖。</p><p>注意：如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select * </p><p>因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降</p></li><li><p>using where </p><p>表明使用了where过滤</p></li><li><p>using join buffer</p><p>表明使用了连接缓存</p></li><li><p>impossible where</p><p>where子句的值总是false，不能用来获取任何元组</p></li></ol><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><h4 id="单表索引优化"><a href="#单表索引优化" class="headerlink" title="单表索引优化"></a>单表索引优化</h4><p>创建表</p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> article(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">author_id <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">category_id <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">views <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">comments <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">title <span class="built_in">varchar</span>(<span class="number">225</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">content</span> <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article(author_id,category_id,views,comments,title,<span class="keyword">content</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">'java'</span>,<span class="string">'简单'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="string">'mysql'</span>,<span class="string">'很简单'</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">'linux'</span>,<span class="string">'超简单'</span>);</span><br></pre></td></tr></table></figure></li><li><p>表中的测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from article;</span><br><span class="line">+<span class="comment">----+-----------+-------------+-------+----------+-------+---------+</span></span><br><span class="line">| id | author_id | category_id | views | comments | title | content |</span><br><span class="line">+<span class="comment">----+-----------+-------------+-------+----------+-------+---------+</span></span><br><span class="line">|  1 |         1 |           1 |     1 |        1 | java  |         |</span><br><span class="line">|  2 |         2 |           2 |     2 |        2 | mysql |         |</span><br><span class="line">|  3 |         1 |           1 |     3 |        3 | linux |         |</span><br><span class="line">+<span class="comment">----+-----------+-------------+-------+----------+-------+---------+</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>查询案例</strong></p><ul><li><p>查询category_id为1且comments 大于1的情况下，views最多的article_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,author_id  <span class="keyword">from</span> article <span class="keyword">where</span> category_id = <span class="number">1</span> <span class="keyword">and</span> comments &gt; <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> views <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">| id | author_id |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">|  3 |         1 |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br></pre></td></tr></table></figure><p>好，那么现在对错的问题已经解决了，接下来得解决优化的问题（完成-&gt;完美，功能-&gt;性能的道理）</p></li><li><p>分析sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,author_id  <span class="keyword">from</span> article <span class="keyword">where</span> category_id = <span class="number">1</span> <span class="keyword">and</span> comments &gt; <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> views <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/%E5%8D%95%E8%A1%A8%E5%88%9D%E6%AC%A1%E5%88%86%E6%9E%90.png" alt></p><p>很明显：type为all全表扫描即最坏情况、using filesort产生了内部排序。那么此时是没有建立索引的</p></li><li><p>查看索引</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/%E5%88%9D%E6%AC%A1%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95.png" alt></p></li><li><p>开始优化（一开始并不知道新建的索引好不好对不对之类的，所以我们得慢慢调整）</p><ol><li><p>新建索引(根据where后面的条件建立索引)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_article_ccv <span class="keyword">on</span> article(category_id,comments,views);</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> article <span class="keyword">add</span> <span class="keyword">index</span> idx_article_ccv(category_id,comments,views)</span><br></pre></td></tr></table></figure></li><li><p>查看索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysql&gt; show index from article;</span><br><span class="line">+<span class="comment">---------+------------+-----------------+--------------+-------------+-----------+</span></span><br><span class="line">| Table   | Non_unique | Key_name        | Seq_in_index | Column_name | Collation |</span><br><span class="line">+<span class="comment">---------+------------+-----------------+--------------+-------------+-----------+</span></span><br><span class="line">| article |          0 | PRIMARY         |            1 | id          | A         |</span><br><span class="line">| article |          1 | idx_article_ccv |            1 | category_id | A         |</span><br><span class="line">| article |          1 | idx_article_ccv |            2 | comments    | A         |</span><br><span class="line">| article |          1 | idx_article_ccv |            3 | views       | A         |</span><br><span class="line">+<span class="comment">---------+------------+-----------------+--------------+-------------+------------</span></span><br></pre></td></tr></table></figure></li><li><p>再次分析sql</p><p><img src="https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/%E5%86%8D%E6%AC%A1%E5%88%86%E6%9E%90sql.png" alt></p><p>分析：此索引解决了type为all的问题，但using filesort没解决。但是我们已经建立的索引，但为什么没用呢？这是因为按照BTREE索引的工作原理：先排序category_id，如果遇到相同的category_id则再排序comments，如果遇到相同的comments则再排序views。当comments字段在联合索引里处于中间位置时，因comments&gt;1条件是一个范围值(所谓range)，会导致索引失效，mysql无法利用索引再对后面的views部分进行索引，即range类型查询字段后面的索引无效。相当于中间的梯子没了</p></li><li><p>删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_article_ccv <span class="keyword">on</span> article;</span><br></pre></td></tr></table></figure></li><li><p>重新建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_article_cv <span class="keyword">on</span> article(category_id,views);</span><br></pre></td></tr></table></figure></li></ol></li></ul><pre><code>![](https://mysqloptimages.oss-cn-guangzhou.aliyuncs.com/%E5%86%8D%E5%86%8D%E5%88%86%E6%9E%90sql.png)完美</code></pre><h4 id="两表索引优化"><a href="#两表索引优化" class="headerlink" title="两表索引优化"></a>两表索引优化</h4><p><strong>创建表</strong></p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">class</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">card <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> book(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">card <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br></pre></td></tr></table></figure></li></ul><p><strong>查询案例</strong></p><ul><li><p>实现两表的连接，连接条件是 class.card = book.card</p><p>mysql&gt; select * from class left join book on class.card = book.card;<br>+—-+——+——+——+<br>| id | card | id   | card |<br>+—-+——+——+——+<br>|  8 |    4 |    2 |    4 |<br>|  7 |    8 |    3 |    8 |<br>|  2 |    6 |    4 |    6 |<br>|  5 |    6 |    4 |    6 |<br>|  7 |    8 |    6 |    8 |<br>|  7 |    8 |    7 |    8 |<br>|  1 |    1 |    8 |    1 |<br>|  3 |    2 | NULL | NULL |<br>|  4 |    7 | NULL | NULL |<br>|  6 |    7 | NULL | NULL |<br>+—-+——+——+——+<br>10 rows in set (0.00 sec)</p></li><li><p>分析sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from class left join book on class.card = book.card;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    8 |   100.00 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    8 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>分析：type有all，说明 class 和 book 进行了全表检索</p></li><li><p>问题：</p><p>我们建立索引是要给class表中的card建立索引还是book表中的card</p></li><li><p>验证：</p><ol><li><strong>先给book表建立索引优化</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> <span class="keyword">index</span> idx_bcard(card);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>再次分析sql</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from class left join book on class.card = book.card;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+-----------+---------+----------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref            | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+-----------+---------+----------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | class | NULL       | ALL  | NULL          | NULL      | NULL    | NULL           |    8 |   100.00 | NULL        |</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | ref  | idx_bcard     | idx_bcard | 4       | opt.class.card |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+-----------+---------+----------------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>此次测试结果：可以看到第二行的type变为了ref，rows也变成了优化比较明显。</strong></p></li><li><p><strong>删除原先索引，给class表建立索引优化</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_bcard <span class="keyword">on</span> book;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">class</span> <span class="keyword">add</span> <span class="keyword">index</span> idx_ccard(card);</span><br></pre></td></tr></table></figure></li><li><p><strong>分析sql</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from class left join book on class.card = book.card;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key       | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | class | NULL       | index | NULL          | idx_ccard | 4       | NULL |    8 |   100.00 | Using index                                        |</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | ALL   | NULL          | NULL      | NULL    | NULL |    8 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+----------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>测试结果：同样的索引，在左连接的情况下，索引加在左表和加载右表的情况是不一样的。</p></li><li><p><strong>结论</strong></p><ol><li>左连接相反加，同样右连接也是相反加。即左连接的话给右表加</li><li>这是由左连接特性决定的。LEFT JOIN条件用于确定如何从右表搜索行，左边一定都有，所以右边是我们的关键点，一定需要建立索引。</li><li>左表连接右表，则需要拿着左表的数据去右表里面查，索引需要在右表中建立索引</li></ol></li></ol></li></ul><h4 id="三表索引优化"><a href="#三表索引优化" class="headerlink" title="三表索引优化"></a>三表索引优化</h4><p><strong>创建表</strong></p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> phone(</span><br><span class="line">phoneId <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">card <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="keyword">FLOOR</span>(<span class="number">1</span>+(<span class="keyword">RAND</span>()*<span class="number">8</span>)));</span><br></pre></td></tr></table></figure></li></ul><p><strong>查询案例</strong></p><ul><li><p>实现三表的连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from class</span><br><span class="line">    -&gt; left join book</span><br><span class="line">    -&gt; on class.card = book.card</span><br><span class="line">    -&gt; left join phone</span><br><span class="line">    -&gt; on book.card=phone.card;</span><br><span class="line">+<span class="comment">----+------+------+------+---------+------+</span></span><br><span class="line">| id | card | id   | card | phoneId | card |</span><br><span class="line">+<span class="comment">----+------+------+------+---------+------+</span></span><br><span class="line">|  1 |    1 |    8 |    1 |       1 |    1 |</span><br><span class="line">|  2 |    6 |    4 |    6 |       7 |    6 |</span><br><span class="line">|  5 |    6 |    4 |    6 |       7 |    6 |</span><br><span class="line">|  1 |    1 |    8 |    1 |       8 |    1 |</span><br><span class="line">|  7 |    8 |    3 |    8 |       9 |    8 |</span><br><span class="line">|  7 |    8 |    6 |    8 |       9 |    8 |</span><br><span class="line">|  7 |    8 |    7 |    8 |       9 |    8 |</span><br><span class="line">|  8 |    4 |    2 |    4 |    NULL | NULL |</span><br><span class="line">|  3 |    2 | NULL | NULL |    NULL | NULL |</span><br><span class="line">|  4 |    7 | NULL | NULL |    NULL | NULL |</span><br><span class="line">|  6 |    7 | NULL | NULL |    NULL | NULL |</span><br><span class="line">+<span class="comment">----+------+------+------+---------+------+</span></span><br><span class="line">11 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>分析sql</p><p>先把上面的索引给去掉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="keyword">class</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_ccard <span class="keyword">on</span> <span class="keyword">class</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from class left join book on class.card = book.card left join phone on book.card=phone.card;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    8 |   100.00 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    8 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | phone | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   10 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>测试结果：type 有All ，rows 为表数据总行数，说明 class、 book 和 phone 表都进行了全表检索Extra 中 Using join buffer ，表明连接过程中使用了 join 缓冲区</p></li><li><p>索引优化</p><ol><li><p>相反原则：进行左连接时，永远都在右表的字段上建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> <span class="keyword">index</span> idx_bcard(card);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> phone <span class="keyword">add</span> <span class="keyword">index</span> idx_pcard(card);</span><br></pre></td></tr></table></figure></li><li><p>分析sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from class left join book on class.card = book.card left join phone on book.card=phone.card;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+-----------+---------+----------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref            | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+-----------+---------+----------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | class | NULL       | ALL  | NULL          | NULL      | NULL    | NULL           |    8 |   100.00 | NULL        |</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | ref  | idx_bcard     | idx_bcard | 4       | opt.class.card |    1 |   100.00 | Using index |</span><br><span class="line">|  1 | SIMPLE      | phone | NULL       | ref  | idx_pcard     | idx_pcard | 4       | opt.book.card  |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+-----------+---------+----------------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure></li><li><p>测试结果：后2行的type都是ref且总rows优化很好，效果不错。因此索引设置在需要经常查询的字段中</p></li></ol></li></ul><blockquote><p>Join语句优化的结论</p></blockquote><p>将 left join 看作是两层嵌套 for 循环</p><ol><li>尽可能减少Join语句中的嵌套循环的循环总次数；</li><li>永远用小结果集驱动大的结果集（在大结果集中建立索引，在小结果集中遍历全表）；</li><li>优先优化嵌套循环的内层循环；（因为里面快了外面才能快）</li><li>保证Join语句中被驱动表上Join条件字段已经被索引；</li><li>当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝惜JoinBuffer的设置；</li></ol><h3 id="索引失效-应该避免"><a href="#索引失效-应该避免" class="headerlink" title="索引失效(应该避免)"></a>索引失效(应该避免)</h3><p>索引失效：建了索引，但是没用上</p><p><strong>创建表</strong></p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> staffs(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">24</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">default</span><span class="string">''</span> <span class="keyword">comment</span><span class="string">'姓名'</span>,</span><br><span class="line">age <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span><span class="string">'年龄'</span>,</span><br><span class="line">pos <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">default</span><span class="string">''</span> <span class="keyword">comment</span><span class="string">'职位'</span>,</span><br><span class="line">add_time <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">default</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">comment</span><span class="string">'入职时间'</span></span><br><span class="line">)<span class="keyword">CHARSET</span> utf8 <span class="keyword">comment</span><span class="string">'员工记录表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> staffs(<span class="string">`name`</span>,<span class="string">`age`</span>,<span class="string">`pos`</span>,<span class="string">`add_time`</span>) <span class="keyword">VALUES</span>(<span class="string">'z3'</span>,<span class="number">22</span>,<span class="string">'manager'</span>,<span class="keyword">NOW</span>());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> staffs(<span class="string">`name`</span>,<span class="string">`age`</span>,<span class="string">`pos`</span>,<span class="string">`add_time`</span>) <span class="keyword">VALUES</span>(<span class="string">'July'</span>,<span class="number">23</span>,<span class="string">'dev'</span>,<span class="keyword">NOW</span>());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> staffs(<span class="string">`name`</span>,<span class="string">`age`</span>,<span class="string">`pos`</span>,<span class="string">`add_time`</span>) <span class="keyword">VALUES</span>(<span class="string">'2000'</span>,<span class="number">23</span>,<span class="string">'dev'</span>,<span class="keyword">NOW</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> staffs <span class="keyword">add</span> <span class="keyword">index</span> index_staffs_nameAgePos(<span class="keyword">name</span>,age,pos);</span><br></pre></td></tr></table></figure></li><li><p>staffs 表中的测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from staffs;</span><br><span class="line">+<span class="comment">----+------+-----+---------+---------------------+</span></span><br><span class="line">| id | name | age | pos     | add_time            |</span><br><span class="line">+<span class="comment">----+------+-----+---------+---------------------+</span></span><br><span class="line">|  1 | z3   |  22 | manager | 2021-03-05 16:47:10 |</span><br><span class="line">|  2 | July |  23 | dev     | 2021-03-05 16:47:10 |</span><br><span class="line">|  3 | 2000 |  23 | dev     | 2021-03-05 16:47:10 |</span><br><span class="line">+<span class="comment">----+------+-----+---------+---------------------+</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>staffs 表中的复合索引：name、age、pos</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW INDEX FROM staffs;</span><br><span class="line">+<span class="comment">--------+------------+-------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| Table  | Non_unique | Key_name                | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | <span class="keyword">Comment</span> | Index_comment |</span><br><span class="line">+<span class="comment">--------+------------+-------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| staffs |          <span class="number">0</span> | PRIMARY                 |            <span class="number">1</span> | <span class="keyword">id</span>          | A         |           <span class="number">2</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   |      | BTREE      |         |               |</span><br><span class="line">| staffs |          <span class="number">1</span> | index_staffs_nameAgePos |            <span class="number">1</span> | <span class="keyword">name</span>        | A         |           <span class="number">3</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   |      | BTREE      |         |               |</span><br><span class="line">| staffs |          <span class="number">1</span> | index_staffs_nameAgePos |            <span class="number">2</span> | age         | A         |           <span class="number">3</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   |      | BTREE      |         |               |</span><br><span class="line">| staffs |          <span class="number">1</span> | index_staffs_nameAgePos |            <span class="number">3</span> | pos         | A         |           <span class="number">3</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   |      | BTREE      |         |               |</span><br><span class="line">+<span class="comment">--------+------------+-------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><h4 id="索引失效准则"><a href="#索引失效准则" class="headerlink" title="索引失效准则"></a>索引失效准则</h4><ol><li>全值匹配我最爱(相当于where后面的字段=某个值，即ref=const的时候，并且顺序没影响，因为mysql底层有优化器)</li><li>最佳左前缀法则：如果索引了多例，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</li><li>不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</li><li>存储引擎不能使用索引中范围条件右边的列</li><li>尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</li><li>mysql在使用不等于（!=或者&lt;&gt;）的时候无法使用索引会导致全表扫描</li><li>is null，is not null 也无法使用索引（早期版本不能走索引，后续版本应该优化过，可以走索引）</li><li>like以通配符开头（’%abc…’）mysql索引失效会变成全表扫描操作</li><li>字符串不加单引号索引失效</li><li>少用or，用它连接时会索引失效 </li></ol><blockquote><p>最佳左前缀法则：带头大哥不能死，中间兄弟不能断</p></blockquote><p><strong>如果索引了多列，要遵守最左前缀法则。指的是从索引的最左前列开始并且不跳过索引中间的列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 只有带头大哥 name 时</span></span><br><span class="line"><span class="comment">--key = index_staffs_nameAgePos 表明索引生效</span></span><br><span class="line"><span class="comment">--ref = const ：这个常量就是查询时的 ‘July’ 字符串常量</span></span><br><span class="line">mysql&gt; explain select * from staffs where name = 'July';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 74      | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--带头大哥 name 带上中间的小弟 age</span></span><br><span class="line"><span class="comment">--key = index_staffs_nameAgePos 表明索引生效</span></span><br><span class="line"><span class="comment">--ref = const,const：两个常量分别为 ‘July’ 和 23</span></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'July'</span> <span class="keyword">and</span> age = <span class="number">25</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref         | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 78      | const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--带头大哥 name 带上中间小弟 age ，中间小弟 age 带上小小弟 pos</span></span><br><span class="line"><span class="comment">--key = index_staffs_nameAgePos 表明索引生效</span></span><br><span class="line"><span class="comment">--ref = const,const,const ：三个常量分别为 ‘July’、23 和 ‘dev’</span></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'July'</span> <span class="keyword">and</span> age = <span class="number">25</span> <span class="keyword">and</span> pos = <span class="string">'dev'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref               | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 140     | const,const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--带头大哥 name 挂了</span></span><br><span class="line"><span class="comment">--key = NULL 说明索引失效</span></span><br><span class="line"><span class="comment">--ref = null 表示 ref 也失效</span></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> age = <span class="number">25</span> <span class="keyword">and</span> pos = <span class="string">'dev'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--带头大哥 name 没挂，中间小弟 age 跑</span></span><br><span class="line"><span class="comment">--key = index_staffs_nameAgePos 说明索引没有失效</span></span><br><span class="line"><span class="comment">--但是ref = const 表明只使用了一个常量，即全值匹配中部分使用到了而已</span></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'July'</span> <span class="keyword">and</span> pos = <span class="string">'dev'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref   | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 74      | const |    1 |    33.33 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p></blockquote><ul><li><p>不对带头大哥 name 进行任何操作：key = index_staffs_nameAgePos 表明索引生效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where name = 'July';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 74      | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>对带头大哥 name 进行操作：使用 LEFT 函数截取子串（相当于java中的substr）</p><ul><li>key = NULL 表明索引生效</li><li>type = ALL 表明进行了全表扫描</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where left(name,4) = &apos;July&apos;;</span><br><span class="line">+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |   100.00 | Using where |</span><br><span class="line">+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>存储引擎不能使用索引中范围条件右边的列（范围之后全失效，但是有范围的那个本身是用到索引的了（只用到排序，而没有用到查找））</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where name = 'July' and age = 23 and pos = 'dev';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref               | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 140     | const,const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>测试结果：</p><ul><li>type = ref 表示非唯一索引扫描，SQL 语句将返回匹配某个单独值的所有行。</li><li>key_len = 140 表明表示索引中使用的字节数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where name = 'July' and age &gt; 23 and pos = 'dev';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type  | possible_keys           | key                     | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | range | index_staffs_nameAgePos | index_staffs_nameAgePos | 78      | NULL |    1 |    33.33 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>测试结果</p><ul><li>type = range 表示范围扫描</li><li>key = index_staffs_nameAgePos 表示索引并没有失效</li><li>key_len = 78 ，ref = NULL 均表明范围搜索使其后面的索引(age和pos)均失效</li></ul><blockquote><p>尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--select * </span></span><br><span class="line">mysql&gt; explain select * from staffs where name = 'July' and age &gt; 23 and pos='dev';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type  | possible_keys           | key                     | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | range | index_staffs_nameAgePos | index_staffs_nameAgePos | 78      | NULL |    1 |    33.33 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--覆盖索引的写法：Extra = Using where; Using index ，Using index 表示使用索引列进行查询，将大大提高查询的效率.虽然在查询条件中使用了范围搜索，但是由于我们只需要查找索引列，所以无需进行全表扫描</span></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span>,age,pos <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'July'</span> <span class="keyword">and</span> age &gt; <span class="number">23</span> <span class="keyword">and</span> pos=<span class="string">'dev'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type  | possible_keys           | key                     | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | range | index_staffs_nameAgePos | index_staffs_nameAgePos | 78      | NULL |    1 |    33.33 | Using where; Using index |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--只要查询列&lt;索引列即可满足覆盖索引</span></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'July'</span> <span class="keyword">and</span> age = <span class="number">23</span> <span class="keyword">and</span> pos=<span class="string">'dev'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref               | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 140     | const,const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------------------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>mysql在使用不等于（!=或者&lt;&gt;）的时候无法使用索引会导致全表扫描</p></blockquote><p>不过有时候该写还是要写，只不过你要知道这样写会导致索引失效，具体要看业务需求</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where name='July';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 74      | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span>!=<span class="string">'July'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | index_staffs_nameAgePos | NULL | NULL    | NULL |    3 |    66.67 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>is null，is not null 也无法使用索引（早期版本不能走索引，后续版本应该优化过，可以走索引）</p></blockquote><p>可以=-1之类的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where name is null;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra            |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span></span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Impossible WHERE |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | index_staffs_nameAgePos | NULL | NULL    | NULL |    3 |    66.67 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>like以通配符开头（’%abc…’）mysql索引失效会变成全表扫描操作（百分like加右边）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where name like '%July%';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%July'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'July%'</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type  | possible_keys           | key                     | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | range | index_staffs_nameAgePos | index_staffs_nameAgePos | 74      | NULL |    1 |   100.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+-------------------------+-------------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>问题：<strong>解决【like ‘%str%’ 】索引失效的问题：使用覆盖索引</strong>，即查询的列要与索引列要一致（id也是索引）</p><blockquote><p>字符串不加单引号索引失效</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysql&gt; explain select * from staffs where name = '2000';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key                     | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ref  | index_staffs_nameAgePos | index_staffs_nameAgePos | 74      | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+-------------------------+---------+-------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--不加单引号，mysql也是能查出结果的，因为它会为我们作隐式转换</span></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> staffs <span class="keyword">where</span> <span class="keyword">name</span> = <span class="number">2000</span>;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | index_staffs_nameAgePos | NULL | NULL    | NULL |    3 |    33.33 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">3</span> <span class="keyword">warnings</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>少用or，用它连接时会索引失效</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from staffs where name ='z3' or name = 'July';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys           | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | staffs | NULL       | ALL  | index_staffs_nameAgePos | NULL | NULL    | NULL |    3 |    66.67 | Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+-------------------------+------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h4 id="索引优化面试题"><a href="#索引优化面试题" class="headerlink" title="索引优化面试题"></a>索引优化面试题</h4><p><strong>创建表</strong></p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test01(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    c1 <span class="built_in">char</span>(<span class="number">10</span>),</span><br><span class="line">    c2 <span class="built_in">char</span>(<span class="number">10</span>),</span><br><span class="line">    c3 <span class="built_in">char</span>(<span class="number">10</span>),</span><br><span class="line">    c4 <span class="built_in">char</span>(<span class="number">10</span>),</span><br><span class="line">    c5 <span class="built_in">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01(c1,c2,c3,c4,c5) <span class="keyword">values</span> (<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a3'</span>,<span class="string">'a4'</span>,<span class="string">'a5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01(c1,c2,c3,c4,c5) <span class="keyword">values</span> (<span class="string">'b1'</span>,<span class="string">'b2'</span>,<span class="string">'b3'</span>,<span class="string">'b4'</span>,<span class="string">'b5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01(c1,c2,c3,c4,c5) <span class="keyword">values</span> (<span class="string">'c1'</span>,<span class="string">'c2'</span>,<span class="string">'c3'</span>,<span class="string">'c4'</span>,<span class="string">'c5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01(c1,c2,c3,c4,c5) <span class="keyword">values</span> (<span class="string">'d1'</span>,<span class="string">'d2'</span>,<span class="string">'d3'</span>,<span class="string">'d4'</span>,<span class="string">'d5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01(c1,c2,c3,c4,c5) <span class="keyword">values</span> (<span class="string">'e1'</span>,<span class="string">'e2'</span>,<span class="string">'e3'</span>,<span class="string">'e4'</span>,<span class="string">'e5'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test01_c1234 <span class="keyword">on</span> test01(c1,c2,c3,c4);</span><br></pre></td></tr></table></figure></li><li><p>test01表中的测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test01;</span><br><span class="line">+<span class="comment">----+------+------+------+------+------+</span></span><br><span class="line">| id | c1   | c2   | c3   | c4   | c5   |</span><br><span class="line">+<span class="comment">----+------+------+------+------+------+</span></span><br><span class="line">|  1 | a1   | a2   | a3   | a4   | a5   |</span><br><span class="line">|  2 | b1   | b2   | b3   | b4   | b5   |</span><br><span class="line">|  3 | c1   | c2   | c3   | c4   | c5   |</span><br><span class="line">|  4 | d1   | d2   | d3   | d4   | d5   |</span><br><span class="line">|  5 | e1   | e2   | e3   | e4   | e5   |</span><br><span class="line">+<span class="comment">----+------+------+------+------+------+</span></span><br></pre></td></tr></table></figure></li></ul><p>我们创建了复合索引idx_test01_c1234，根据以下SQL分析下索引使用情况</p><ol><li>全值匹配</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a1' and c2='a2' and c3='a3' and c4='a4';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref                     | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 124     | const,const,const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="2"><li>即使顺序不一样，mysql的优化器会为我们优化顺序，使得我们的查询列和索引列保持一致</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c4='a4' and c3='a3' and c2='a2' and c1='a1';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------------------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref                     | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------------------+------+----------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 124     | const,const,const,const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------------------+------+----------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="3"><li>c3 列使用了索引进行排序，并没有进行查找，即部分索引，导致 c4 无法用索引进行查找，也就是说范围之后全失效</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a1' and c2='a2' and c3&gt;'a3' and c4='a4';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+------------------+------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type  | possible_keys    | key              | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+------------------+------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | range | idx_test01_c1234 | idx_test01_c1234 | 93      | NULL |    1 |    20.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+------------------+------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="4"><li>mysql底层会自动优化顺序，按照1234的来</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a1' and c2='a2' and c4&gt;'c4' and c3='a3';</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+------------------+------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type  | possible_keys    | key              | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+------------------+------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | range | idx_test01_c1234 | idx_test01_c1234 | 124     | NULL |    1 |   100.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+-------+------------------+------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="5"><li>c3用到了部分索引（只用于排序，没有用于查找），c4 列没有用到索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a1' and c2='c2' and c4='a4' order by c3;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref         | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 62      | const,const |    1 |    20.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="6"><li>跟上面一样，c4列本来就没用到</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a1' and c2='c2' order by c3;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref         | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 62      | const,const |    1 |   100.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="7"><li>中间兄弟断了，导致了mysql动用了文件排序，using filesort说明此句需要优化</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysql&gt; explain select * from test01 where c1='a1' and c2='c2' order by c4;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+---------------------------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref         | rows | filtered | Extra                                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+---------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 62      | const,const |    1 |   100.00 | Using index condition; Using filesort |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+---------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="8"><li>只用了c1一个字段索引，但是c2，c3用于排序，无filesort</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a' and c5='a5' order by c2,c3;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------+------+----------+------------------------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref   | rows | filtered | Extra                              |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------+------+----------+------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 31      | const |    1 |    20.00 | Using index condition; Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------+------+----------+------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="9"><li>我们建的索引是1234，它没有按顺序来，3 2颠倒了，有filesort，跟上面对比</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a' and c5='a5' order by c3,c2;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------+------+----------+----------------------------------------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref   | rows | filtered | Extra                                              |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------+------+----------+----------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 31      | const |    1 |    20.00 | Using index condition; Using where; Using filesort |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------+------+----------+----------------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="10"><li>用c1、c2两个字段索引，但是c2、c3用于排序，无filesort</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a1' and c2='a2' order by c2,c3;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref         | rows | filtered | Extra                 |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 62      | const,const |    1 |   100.00 | Using index condition |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>11.注意查询条件 c2=‘a2’ ，即c2 为常量，那么对c2排序就没有意思了，所以没有产生 filesort</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test01 where c1='a1' and c2='a2' and c5='a5' order by c3,c2;</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+------------------------------------+</span></span><br><span class="line">| id | select_type | table  | partitions | type | possible_keys    | key              | key_len | ref         | rows | filtered | Extra                              |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | test01 | NULL       | ref  | idx_test01_c1234 | idx_test01_c1234 | 62      | const,const |    1 |    20.00 | Using index condition; Using where |</span><br><span class="line">+<span class="comment">----+-------------+--------+------------+------+------------------+------------------+---------+-------------+------+----------+------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="索引失效总结"><a href="#索引失效总结" class="headerlink" title="索引失效总结"></a>索引失效总结</h4><ol><li>对于单键索引，尽量选择针对当前query过滤性更好的索引</li><li>在选择组合索引的时候，当前query中过滤性最好的字段在索引字段顺序中，位置越靠左越好。</li><li>在选择组合索引的时候，尽量选择可以能包含当前query中的where子句中更多字段的索引</li><li>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</li></ol><h2 id="查询截取分析"><a href="#查询截取分析" class="headerlink" title="查询截取分析"></a>查询截取分析</h2><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><h4 id="mysql优化原则"><a href="#mysql优化原则" class="headerlink" title="mysql优化原则"></a>mysql优化原则</h4><blockquote><p>mysql的调优大纲</p></blockquote><ol><li>慢查询的开启并捕获</li><li>explain+慢SQL分析</li><li>show profile查询SQL在Mysql服务器里面的执行细节和生命周期情况</li><li>SQL数据库服务器的参数调优</li></ol><blockquote><p>永远小表驱动大表，类似嵌套循环</p></blockquote><p><strong>引入</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>...)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">100</span>..)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">100</span>...)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">5</span>..)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以知道上面2种循环的循环次数是一样的，但对于数据库而言并非如此，我们会上面第1种情况。为什么？小表驱动大表，数据库在连接和释放资源比较耗时，第1种情况，只建立了5次连接，然后第2种情况，却建立了100次连接。</p><p>in和exist的说明 ：</p><p>EXISTS 语法：</p><ul><li><code>SELECT ... FROM table WHERE EXISTS(subquery)</code></li><li>该语法可以理解为：将查询的数据，放到子查询中做条件验证，根据验证结果（TRUE或FALSE）来决定主查询的数据结果是否得以保留。</li><li>EXISTS(subquery) 只返回TRUE或FALSE，因此子查询中的<code>SELECT *</code>也可以是<code>SELECT 1</code>或其他常数，官方说法是实际执行时会忽略SELECT清单，因此没有区别</li><li>EXISTS子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题。</li><li>EXISTS子查询往往也可以用条件表达式、其他子查询或者JOIN来替代，何种最优需要具体问题具体分析</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--优化原则：小表驱动大表，即小的数据集驱动大的数据集</span></span><br><span class="line"><span class="comment">--原理：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> B)</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> B</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> A.id = B.id</span><br><span class="line"><span class="comment">--当B表的数据集&lt;A表的数据集时，用in优于exists</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B.id = A.id)</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> B <span class="keyword">where</span> B.id = A.id</span><br><span class="line"><span class="comment">--当A表的数据集&lt;B表的数据集时，用exist优于in</span></span><br><span class="line"><span class="comment">--注意：A表与B表的ID字段应建立索引</span></span><br></pre></td></tr></table></figure><p>相当于我这两条语句是等价的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tableA A <span class="keyword">where</span> A.deptId <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> tableB B)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tableA A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> tableB B)</span><br></pre></td></tr></table></figure><h4 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h4><p>ORDER BY子句，尽量使用Index方式排序，避免使用FileSort方式排序</p><p><strong>创建表</strong></p><ul><li><p>建表SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tblA(</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">birth <span class="built_in">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tblA(age, birth) <span class="keyword">values</span>(<span class="number">22</span>, <span class="keyword">now</span>());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tblA(age, birth) <span class="keyword">values</span>(<span class="number">23</span>, <span class="keyword">now</span>());</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tblA(age, birth) <span class="keyword">values</span>(<span class="number">24</span>, <span class="keyword">now</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_A_ageBirth <span class="keyword">on</span> tblA(age, birth);</span><br></pre></td></tr></table></figure></li><li><p>tblA表中的测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tblA;</span><br><span class="line">+<span class="comment">------+---------------------+</span></span><br><span class="line">| age  | birth               |</span><br><span class="line">+<span class="comment">------+---------------------+</span></span><br><span class="line">|   22 | 2021-03-06 14:51:45 |</span><br><span class="line">|   23 | 2021-03-06 14:51:45 |</span><br><span class="line">|   24 | 2021-03-06 14:51:45 |</span><br><span class="line">+<span class="comment">------+---------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>case1：能使用索引进行排序的情况</strong></p><ul><li><p>只有带头大哥age</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from tblA where age&gt;20 order by age;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys  | key            | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | idx_A_ageBirth | idx_A_ageBirth | 9       | NULL |    3 |   100.00 | Using where; Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tblA <span class="keyword">where</span> birth&gt;<span class="string">'2021-03-06 00:00:00'</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key            | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | NULL          | idx_A_ageBirth | 9       | NULL |    3 |    33.33 | Using where; Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>带头大哥age + 小弟birth</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from tblA where age&gt;20 order by age,birth;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys  | key            | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | idx_A_ageBirth | idx_A_ageBirth | 9       | NULL |    3 |   100.00 | Using where; Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>mysql 默认升序排列，全升序或者全降序，都扛得住</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from tblA order by age ASC,birth ASC;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key            | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | NULL          | idx_A_ageBirth | 9       | NULL |    3 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tblA <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">DESC</span>,birth <span class="keyword">DESC</span>;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key            | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | NULL          | idx_A_ageBirth | 9       | NULL |    3 |   100.00 | Using index |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>CASE2：不能使用索引进行排序的情况</strong></p><ul><li><p>带头大哥age挂了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from tblA where age &gt; 20 order by birth;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+------------------------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys  | key            | key_len | ref  | rows | filtered | Extra                                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | idx_A_ageBirth | idx_A_ageBirth | 9       | NULL |    3 |   100.00 | Using where; Using index; Using filesort |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tblA <span class="keyword">where</span> age &gt; <span class="number">20</span> <span class="keyword">order</span> <span class="keyword">by</span> birth,age;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+------------------------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys  | key            | key_len | ref  | rows | filtered | Extra                                    |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | idx_A_ageBirth | idx_A_ageBirth | 9       | NULL |    3 |   100.00 | Using where; Using index; Using filesort |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+----------------+----------------+---------+------+------+----------+------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>mysql 默认升序排列，如果全升序或者全降序，都 ok ，但是一升一降 mysql 就扛不住了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from tblA order by age ASC,birth DESC;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key            | key_len | ref  | rows | filtered | Extra                       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | tblA  | NULL       | index | NULL          | idx_A_ageBirth | 9       | NULL |    3 |   100.00 | Using index; Using filesort |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>结论：</strong></p><ol><li>MySQL支持二种方式的排序，FileSort和Index，Index效率高，它指MySQL扫描索引本身完成排序，FileSort方式效率较低。</li><li>ORDER BY满足两情况（最佳左前缀原则），会使用Index方式排序<ol><li>ORDER BY语句使用索引最左前列</li><li>使用where子句与OrderBy子句条件列组合满足索引最左前列</li></ol></li><li>尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀</li></ol><blockquote><p><strong>如果未在索引列上完成排序，mysql 会启动 filesort 的两种算法：双路排序和单路排序</strong></p></blockquote><ol><li>双路排序<ol><li>MySQL4.1之前是使用双路排序，字面意思是两次扫描磁盘，最终得到数据。读取行指针和将要进行order by操作的列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据传输</li><li>从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。</li></ol></li><li>单路排序<ol><li>取一批数据，要对磁盘进行两次扫描，众所周知，I/O是很耗时的，所以在mysql4.1之后，出现了改进的算法，就是单路排序。</li><li>从磁盘读取查询需要的所有列，按照将要进行orderby的列，在sort buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据，并且把随机IO变成顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。</li></ol></li><li>结论及引申出的问题：<ol><li>由于单路是改进的算法，总体而言好过双路</li><li>在sort_buffer中，方法B比方法A要多占用很多空间，因为方法B是把所有字段都取出，所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取取sort_buffer容量大小，再排…… 从而会导致多次I/O。</li><li>结论：本来想省一次I/O操作，反而导致了大量的/O操作，反而得不偿失。</li></ol></li><li>更深层次的优化策略：<ol><li>增大sort_buffer_size参数的设置</li><li>增大max_length_for_sort_data参数的设置</li></ol></li><li>遵循如下规则，可提高Order By的速度<ol><li>Order by时select *是一个大忌，只Query需要的字段，这点非常重要。在这里的影响是：<ol><li>当Query的字段大小总和小于max_length_for_sort_data，而且排序字段不是TEXT|BLOB类型时，会用改进后的算法——单路排序，否则用老算法——多路排序。</li><li>两种算法的数据都有可能超出sort_buffer的容量，超出之后，会创建tmp文件进行合并排序，导致多次I/O，但是用单路排序算法的风险会更大一些，所以要提高sort_buffer_size。</li></ol></li><li>尝试提高 sort_buffer_size不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的</li><li>尝试提高max_length_for_sort_data提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率。</li></ol></li></ol><h4 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h4><ol><li>group by实质是先排序后进行分组，遵照索引的最佳左前缀</li><li>当无法使用索引列，增大max_length_for_sort_data参数的设置+增大sort_buffer_size参数的设置</li><li>where高于having，能写在where限定的条件就不要去having限定了</li><li>其余的规则均和 order by 一致</li></ol><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><h4 id="慢查询日志介绍"><a href="#慢查询日志介绍" class="headerlink" title="慢查询日志介绍"></a>慢查询日志介绍</h4><ol><li>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</li><li>long_query_time的默认值为10，意思是运行10秒以上的SQL语句会被记录下来</li><li>由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒的sql，结合之前explain进行全面分析。</li></ol><h4 id="慢查询日志开启"><a href="#慢查询日志开启" class="headerlink" title="慢查询日志开启"></a>慢查询日志开启</h4><p><strong>说明：</strong></p><ol><li>默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。</li><li>当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件</li></ol><p><strong>查看是否开启及如何开启</strong></p><ul><li>查看慢查询日志是否开启：<ol><li>通过SHOW VARIABLES LIKE ‘%slow_query_log%’;查看 mysql 的慢查询日志是否开启</li><li>默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的</li></ol></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like'%slow_query_log%';</span><br><span class="line">+<span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line">| Variable_name       | Value                                           |</span><br><span class="line">+<span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line">| slow_query_log      | OFF                                             |</span><br><span class="line">| slow_query_log_file | /var/lib/mysql/iZwz9ick8j8tmsj93waiowZ-slow.log |</span><br><span class="line">+<span class="comment">---------------------+-------------------------------------------------+</span></span><br></pre></td></tr></table></figure><ul><li><p>开启慢查询日志：</p><ol><li><p>通过set global slow_query_log = 1;开启慢查询日志</p></li><li><p>使用<code>set global slow_query_log=1</code>开启了慢查询日志只对当前数据库生效，如果MySQL重启后则会失效。</p></li><li><p>关于slow_query_log_file这个参数，它指定慢查询日志文件的存放路径</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global slow_query_log = 1;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like'%slow_query_log%';</span><br><span class="line">+<span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line">| Variable_name       | Value                                           |</span><br><span class="line">+<span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line">| slow_query_log      | ON                                              |</span><br><span class="line">| slow_query_log_file | /var/lib/mysql/iZwz9ick8j8tmsj93waiowZ-slow.log |</span><br><span class="line">+<span class="comment">---------------------+-------------------------------------------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>如果想永久生效，就必须修改配置文件my.cnf，然后重启mysql</p><p>修改my.cnf文件，[mysqld]下增加或修改参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show_query_log=1</span><br><span class="line">slow_query_log_file=/var/lib/mysql/主机名-slow.log</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>  <strong>那么开启慢查询日志后，什么样的SQL参会记录到慢查询里面？</strong></p><p>  那么何为慢，得有个标准</p><ul><li><p>这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，这里的10是指&gt;，而非&gt;=</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看慢 SQL 的阈值:show variables like 'long_query_time%';</span></span><br><span class="line">mysql&gt; show variables like 'long_query_time%';</span><br><span class="line">+<span class="comment">-----------------+-----------+</span></span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+<span class="comment">-----------------+-----------+</span></span><br><span class="line">| long_query_time | 10.000000 |</span><br><span class="line">+<span class="comment">-----------------+-----------+</span></span><br></pre></td></tr></table></figure></li><li><p>可以使用命令修改，也可以在my.cnf参数里面修改。</p></li></ul><p>设置慢的阈值时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li><p>为什么设置后阈值时间没变？</p><ul><li>需要重新连接或者新开一个回话才能看到修改值。</li><li>或者查看全局的 long_query_time 值：show global variables like ‘long_query_time’;发现已经生效</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like 'long_query_time';</span><br><span class="line">+<span class="comment">-----------------+----------+</span></span><br><span class="line">| Variable_name   | Value    |</span><br><span class="line">+<span class="comment">-----------------+----------+</span></span><br><span class="line">| long_query_time | 3.000000 |</span><br><span class="line">+<span class="comment">-----------------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>测试模拟</strong></p><ul><li><p>select sleep(4)：超过3s，会被记录到慢sql日志中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>查看日志：慢查询日志文件在 /var/lib/mysql/ 下，后缀为 -slow.log</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ ~]<span class="comment"># cd /var/lib/mysql</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ mysql]<span class="comment"># cat iZwz9ick8j8tmsj93waiowZ-slow.log</span></span><br><span class="line">/usr/sbin/mysqld, Version: 5.7.33 (MySQL Community Server (GPL)). started <span class="keyword">with</span>:</span><br><span class="line">Tcp port: <span class="number">3306</span>  Unix socket: /<span class="keyword">var</span>/lib/mysql/mysql.sock</span><br><span class="line"><span class="built_in">Time</span>                 <span class="keyword">Id</span> Command    Argument</span><br><span class="line"><span class="comment"># Time: 2021-03-06T08:12:44.093910Z</span></span><br><span class="line"><span class="comment"># User@Host: root[root] @ localhost []  Id:    49</span></span><br><span class="line"><span class="comment"># Query_time: 4.000279  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">timestamp</span>=<span class="number">1615018364</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">4</span>);<span class="comment">#导致的sql</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ mysql]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>查询当前系统中有多少条慢查询记录：show global status like ‘%Slow_queries%’;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like '%Slow_queries%';</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Slow_queries  | 1     |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>配置版的慢查询日志</strong></p><p>在 /etc/my.cnf 文件的 [mysqld] 节点下配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log=1；</span><br><span class="line">slow_query_log_file=/var/lib/mysql/Heygo-slow.log </span><br><span class="line">long_query_time=3；</span><br><span class="line">log_output=FILE</span><br></pre></td></tr></table></figure><blockquote><p><strong>日志分析命令 mysqldumpslow</strong></p></blockquote><p><strong>mysqldumpslow是什么？</strong></p><p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。</p><p><strong>mysqldumpshow 参数解释</strong></p><ol><li>s：是表示按何种方式排序</li><li>c：访问次数</li><li>l：锁定时间</li><li>r：返回记录</li><li>t：查询时间</li><li>al：平均锁定时间</li><li>ar：平均返回记录数</li><li>at：平均查询时间</li><li>t：即为返回前面多少条的数据</li><li>g：后边搭配一个正则匹配模式，大小写不敏感的</li></ol><p>常用参数手册</p><p>得到返回记录集最多的10个SQL</p><p>​    mysqldumpslow -s r -t 10 /var/lib/mysql/Heygo-slow.log</p><p>得到访问次数最多的10个SQL</p><p>​    mysqldumpslow -s c- t 10/var/lib/mysql/Heygo-slow.log</p><p>得到按照时间排序的前10条里面含有左连接的查询语句</p><p>​    mysqldumpslow -s t -t 10 -g “left join” /var/lib/mysql/Heygo-slow.log</p><p>另外建议在使用这些命令时结合 | 和more使用，否则有可能出现爆屏情况</p><p>​    mysqldumpslow -s r -t 10 /var/lib/mysql/Heygo-slow.log | more</p><h3 id="批量数据脚本"><a href="#批量数据脚本" class="headerlink" title="批量数据脚本"></a>批量数据脚本</h3><p>首先来说明什么是函数和存储过程：</p><p>说白了就是用sql脚本语言所写的数据库编程，那么他们两个的区别是：函数需要返回值，存储过程不需要返回值</p><p><strong>创建表</strong></p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    deptno <span class="built_in">int</span> <span class="keyword">unsigned</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dname <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">""</span>,</span><br><span class="line">    loc <span class="built_in">varchar</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">""</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    empno mediumint <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    ename <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">""</span>,</span><br><span class="line">    job <span class="built_in">varchar</span>(<span class="number">9</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">""</span>,</span><br><span class="line">    mgr mediumint <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    hiredate <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    sal <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    comm <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    deptno mediumint <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></li><li><p>设置参数</p><ul><li><p>创建函数，假如报错：This function has none of DETERMINISTIC………</p></li><li><p>由于开启过慢查询日志，因为我们开启了bin-log，我们就必须为我们的function指定一个参数。</p><ul><li><code>log_bin_trust_function_creators = OFF</code>，默认必须为 function 传递一个参数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'log_bin_trust_function_creators'; </span><br><span class="line">+<span class="comment">---------------------------------+-------+</span></span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+<span class="comment">---------------------------------+-------+</span></span><br><span class="line">| log_bin_trust_function_creators | OFF   |</span><br><span class="line">+<span class="comment">---------------------------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>通过 <code>set global log_bin_trust_function_creators=1;</code>我们可以不用为 function 传参</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global log_bin_trust_function_creators=1; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like 'log_bin_trust_function_creators';</span><br><span class="line">+<span class="comment">---------------------------------+-------+</span></span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+<span class="comment">---------------------------------+-------+</span></span><br><span class="line">| log_bin_trust_function_creators | ON    |</span><br><span class="line">+<span class="comment">---------------------------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>这样添加了参数以后，如果mysqld重启，上述参数又会消失，永久方法在配置文件中修改</p><p>windows下：my.ini –&gt; [mysqld] 节点下加上 log_bin_trust_function_creators=1<br>linux下：/etc/my.cnf –&gt; [mysqld] 节点下加上 log_bin_trust_function_creators=1</p></li></ul></li></ul><p><strong>创建函数，保证每条数据都不同</strong></p><ul><li><p>随机产生字符串的函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$ </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> rand_string(n <span class="built_in">int</span>) <span class="keyword">returns</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> chars_str <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">    <span class="keyword">declare</span> return_str <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    while i &lt; n do</span><br><span class="line">        <span class="keyword">set</span> return_str = <span class="keyword">concat</span>(return_str,<span class="keyword">substring</span>(chars_str,<span class="keyword">floor</span>(<span class="number">1</span>+<span class="keyword">rand</span>()*<span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">set</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">    return return_str;</span><br><span class="line"><span class="keyword">end</span> $$</span><br></pre></td></tr></table></figure><ul><li>delimiter $$ 表示mysql语句得使用$$进行结束（默认是使用分号），因为要想执行一连串的sql语句，不能使用分号作为sql语句的结束符，否则执行一句就会结束</li></ul></li><li><p>随机产生部门编号的函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> rand_num() <span class="keyword">returns</span> <span class="built_in">int</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">set</span> i=<span class="keyword">floor</span>(<span class="number">100</span>+<span class="keyword">rand</span>()*<span class="number">10</span>);</span><br><span class="line">    return i;</span><br><span class="line"><span class="keyword">end</span> $$</span><br></pre></td></tr></table></figure></li></ul><p><strong>创建存储过程</strong></p><ul><li><p>创建往emp表中插入数据的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_emp(<span class="keyword">in</span> <span class="keyword">start</span> <span class="built_in">int</span>(<span class="number">10</span>),<span class="keyword">in</span> max_num <span class="built_in">int</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">    repeat</span><br><span class="line">        <span class="keyword">set</span> i = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> emp(empno,ename,job,mgr,hiredate,sal,comm,deptno) <span class="keyword">values</span>((<span class="keyword">start</span>+i),rand_string(<span class="number">6</span>),<span class="string">'salesman'</span>,<span class="number">0001</span>,<span class="keyword">curdate</span>(),<span class="number">2000</span>,<span class="number">400</span>,rand_num());</span><br><span class="line">        until i=max_num</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">    <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br></pre></td></tr></table></figure></li><li><p>创建往dept表中插入数据的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_dept(<span class="keyword">in</span> <span class="keyword">start</span> <span class="built_in">int</span>(<span class="number">10</span>),<span class="keyword">in</span> max_num <span class="built_in">int</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line">    repeat</span><br><span class="line">        <span class="keyword">set</span> i = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno,dname,loc) <span class="keyword">values</span>((<span class="keyword">start</span>+i),rand_string(<span class="number">10</span>),rand_string(<span class="number">8</span>));</span><br><span class="line">        until i=max_num</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">    <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br></pre></td></tr></table></figure><ul><li>这里为什么要<code>set autocommit = 0;</code>这是因为mysql中更新操作默认是自动提交的</li></ul></li></ul><p><strong>调用存储过程</strong></p><ul><li><p>向 dept 表中插入 10 条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> insert_dept(<span class="number">100</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="showProfile"><a href="#showProfile" class="headerlink" title="showProfile"></a>showProfile</h3><p><strong>是什么？</strong></p><ol><li>了解SQL执行的线程的状态及资源消耗情况，可以用于SQL的调优测量</li><li>默认情况下，参数处于关闭状态，并保存最近15次的运行结果</li></ol><p><strong>分析步骤：</strong></p><ul><li><p>查看当前sql版本是否支持show profile</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'profiling%';</span><br><span class="line">+<span class="comment">------------------------+-------+</span></span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+<span class="comment">------------------------+-------+</span></span><br><span class="line">| profiling              | OFF   |</span><br><span class="line">| profiling_history_size | 15    |</span><br><span class="line">+<span class="comment">------------------------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p>开启功能show profile，版本稍低的一般是默认关闭的，使用前需要开启。并且profile一般是保存15条sql记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set profiling=on; </span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like 'profiling%';</span><br><span class="line">+<span class="comment">------------------------+-------+</span></span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+<span class="comment">------------------------+-------+</span></span><br><span class="line">| profiling              | ON    |</span><br><span class="line">| profiling_history_size | 15    |</span><br><span class="line">+<span class="comment">------------------------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p>运行sql</p><ul><li><p>正常的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_emp;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_emp e <span class="keyword">inner</span> <span class="keyword">join</span> tbl_dept d <span class="keyword">on</span> e.deptId = d.id;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_emp e <span class="keyword">left</span> <span class="keyword">join</span> tbl_dept d <span class="keyword">on</span> e.deptId = d.id;</span><br></pre></td></tr></table></figure></li><li><p>慢sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">10</span> <span class="keyword">limit</span> <span class="number">150000</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">10</span> <span class="keyword">limit</span> <span class="number">150000</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">20</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>%10 20只是对id进行求模，为了展示慢</p></li></ul></li></ul><ul><li><p>查看结果<code>show profiles;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profiles;</span><br><span class="line">+<span class="comment">----------+------------+----------------------------------------------------------------------+</span></span><br><span class="line">| Query_ID | Duration   | Query                                                                |</span><br><span class="line">+<span class="comment">----------+------------+----------------------------------------------------------------------+</span></span><br><span class="line">|        1 | 0.00052700 | <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'profiling%'</span>                                     |</span><br><span class="line">|        <span class="number">2</span> | <span class="number">0.00030300</span> | <span class="keyword">select</span> * <span class="keyword">from</span> tbl_emp                                                |</span><br><span class="line">|        <span class="number">3</span> | <span class="number">0.00010650</span> | <span class="keyword">select</span> * <span class="keyword">from</span> tbl_emp e <span class="keyword">inner</span> <span class="keyword">join</span> tbl_dept d <span class="keyword">on</span> e.<span class="string">'deptId'</span> = d.<span class="string">'id'</span> |</span><br><span class="line">|        <span class="number">4</span> | <span class="number">0.00031625</span> | <span class="keyword">select</span> * <span class="keyword">from</span> tbl_emp e <span class="keyword">inner</span> <span class="keyword">join</span> tbl_dept d <span class="keyword">on</span> e.deptId = d.id     |</span><br><span class="line">|        <span class="number">5</span> | <span class="number">0.00042100</span> | <span class="keyword">select</span> * <span class="keyword">from</span> tbl_emp e <span class="keyword">left</span> <span class="keyword">join</span> tbl_dept d <span class="keyword">on</span> e.deptId = d.id      |</span><br><span class="line">|        <span class="number">6</span> | <span class="number">0.38621875</span> | <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">20</span> <span class="keyword">limit</span> <span class="number">150000</span>                        |</span><br><span class="line">|        <span class="number">7</span> | <span class="number">0.00014900</span> | <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">20</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">150000</span>                     |</span><br><span class="line">|        <span class="number">8</span> | <span class="number">0.38649000</span> | <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">20</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">5</span>                          |</span><br><span class="line">|        <span class="number">9</span> | <span class="number">0.06782700</span> | <span class="keyword">select</span> <span class="keyword">COUNT</span>(*) <span class="keyword">from</span> emp                                             |</span><br><span class="line">|       <span class="number">10</span> | <span class="number">0.35434400</span> | <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">10</span> <span class="keyword">limit</span> <span class="number">150000</span>                        |</span><br><span class="line">+<span class="comment">----------+------------+----------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>诊断SQL</strong></p><p><code>show profile cpu, block io for query SQL编号;</code> 查看 SQL 语句执行的具体流程以及每个步骤花费的时间，常用的参数是cpu和block io</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profile cpu, block io for query 2;</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+--------------+---------------+</span></span><br><span class="line">| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+--------------+---------------+</span></span><br><span class="line">| starting             | 0.000055 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| checking permissions | 0.000007 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| Opening tables       | 0.000011 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| init                 | 0.000024 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| System <span class="keyword">lock</span>          | <span class="number">0.000046</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| optimizing           | <span class="number">0.000018</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| <span class="keyword">statistics</span>           | <span class="number">0.000008</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| preparing            | <span class="number">0.000019</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| executing            | <span class="number">0.000003</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| Sending <span class="keyword">data</span>         | <span class="number">0.000089</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| <span class="keyword">end</span>                  | <span class="number">0.000004</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| <span class="keyword">query</span> <span class="keyword">end</span>            | <span class="number">0.000003</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| closing <span class="keyword">tables</span>       | <span class="number">0.000005</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| freeing items        | <span class="number">0.000006</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">| cleaning up          | <span class="number">0.000006</span> | <span class="number">0.000000</span> |   <span class="number">0.000000</span> |            <span class="number">0</span> |             <span class="number">0</span> |</span><br><span class="line">+<span class="comment">----------------------+----------+----------+------------+--------------+---------------+</span></span><br></pre></td></tr></table></figure><ul><li>其余参数<ol><li>ALL：显示所有的开销信息</li><li>BLOCK IO：显示块IO相关开销</li><li>CONTEXT SWITCHES：上下文切换相关开销</li><li>CPU：显示CPU相关开销信息</li><li>IPC：显示发送和接收相关开销信息</li><li>MEMORY：显示内存相关开销信息</li><li>PAGE FAULTS：显示页面错误相关开销信息</li><li>SOURCE：显示和Source_function，Source_file，Source_line相关的开销信息</li><li>SWAPS：显示交换次数相关开销的信息</li></ol></li></ul></li><li><p><strong>结论</strong>（如果status中出现了以下4个，便是有很大问题了）</p><ol><li>converting HEAP to MyISAM：查询结果太大，内存都不够用了往磁盘上搬了。</li><li>Creating tmp table：创建临时表，mysql 先将拷贝数据到临时表，然后用完再将临时表删除</li><li>Copying to tmp table on disk：把内存中临时表复制到磁盘，危险！！！</li><li>locked：锁表</li></ol></li></ul><h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><p><strong>永远不要在生产环境开启这个功能。</strong></p><ol><li><p>在mysql的my.cnf中，设置如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">general_log=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录日志文件的路径</span></span><br><span class="line">general_log_file=/path/logfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出格式</span></span><br><span class="line">log_output=FILE</span><br></pre></td></tr></table></figure></li><li><p>命令行启用全局查询日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output=<span class="string">'TABLE'</span>;</span><br></pre></td></tr></table></figure></li><li><p>你所执行的sql语句，将会记录到mysql库里的general_log表，可以用下面的命令查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from mysql.general_log;</span><br><span class="line">+<span class="comment">---------------------+---------------------------+-----------+-----------+--------------+-----------------------------------------------+</span></span><br><span class="line">| event_time          | user_host                 | thread_id | server_id | command_type | argument                                      |</span><br><span class="line">+<span class="comment">---------------------+---------------------------+-----------+-----------+--------------+-----------------------------------------------+</span></span><br><span class="line">| 2020-08-05 14:41:07 | root[root] @ localhost [] |        14 |         0 | Query        | <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>%<span class="number">10</span> <span class="keyword">limit</span> <span class="number">150000</span> |</span><br><span class="line">| <span class="number">2020</span><span class="number">-08</span><span class="number">-05</span> <span class="number">14</span>:<span class="number">41</span>:<span class="number">12</span> | root[root] @ localhost [] |        <span class="number">14</span> |         <span class="number">0</span> | <span class="keyword">Query</span>        | <span class="keyword">select</span> <span class="keyword">COUNT</span>(*) <span class="keyword">from</span> emp                      |</span><br><span class="line">| <span class="number">2020</span><span class="number">-08</span><span class="number">-05</span> <span class="number">14</span>:<span class="number">41</span>:<span class="number">30</span> | root[root] @ localhost [] |        <span class="number">14</span> |         <span class="number">0</span> | <span class="keyword">Query</span>        | <span class="keyword">select</span> * <span class="keyword">from</span> mysql.general_log               |</span><br><span class="line">+<span class="comment">---------------------+---------------------------+-----------+-----------+--------------+-----------------------------------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol><h2 id="SQL优化一般步骤"><a href="#SQL优化一般步骤" class="headerlink" title="SQL优化一般步骤"></a>SQL优化一般步骤</h2><ol><li>通过慢查日志等定位那些执行效率较低的SQL语句</li><li>explain 分析SQL的执行计划，需要重点关注type、rows、filtered、extra。</li><li>show profile 分析</li><li>确定问题并采用相应的措施</li></ol><h2 id="mysql锁机制"><a href="#mysql锁机制" class="headerlink" title="mysql锁机制"></a>mysql锁机制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="锁的定义"><a href="#锁的定义" class="headerlink" title="锁的定义"></a>锁的定义</h4><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。<br>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。<br>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。<br>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h4 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h4><ol><li>从数据操作的类型（读、写）分<ul><li><strong>读锁</strong>（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li><li><strong>写锁</strong>（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。</li></ul></li><li>从对数据操作的颗粒度<ul><li>表锁</li><li>行锁</li></ul></li></ol><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>特点：</p><p>偏向MyISAM存储引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发最低</p><h4 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h4><p><strong>创建表：</strong></p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mylock (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">''</span></span><br><span class="line">) <span class="keyword">engine</span> myisam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'d'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'e'</span>);</span><br></pre></td></tr></table></figure></li><li><p>mylock 表中的测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a    |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>加锁和释放锁</strong></p><ul><li>查看当前数据库中表的上锁情况：<code>show open tables;</code>，In_use 中的0 表示未上锁</li><li>添加锁<code>lock table 表名1 read(write), 表名2 read(write), ...;</code></li><li>释放锁<code>unlock tables;</code></li></ul><p><strong>读锁</strong></p><ul><li><p>在 session 1 会话中：给 mylock 表加个读锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> mylock <span class="keyword">read</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 session1 会话中：可以读取mylock表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session1 中的操作</span></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a    |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br></pre></td></tr></table></figure></li><li><p>在 session1 会话中：不能读取 book 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session1 中的操作</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from book;</span><br><span class="line">ERROR 1100 (HY000): Table 'book' was not locked <span class="keyword">with</span> <span class="keyword">LOCK</span> <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure></li><li><p>在 session2 会话中：可以读取 mylock 表和book表的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- session2 中的操作</span></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a    |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>在 session1 会话中：不能修改 mylock 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session1 中的操作</span></span><br><span class="line"></span><br><span class="line">mysql&gt; update mylock set name='a2' where id=1;</span><br><span class="line">ERROR 1099 (HY000): Table 'mylock' was locked <span class="keyword">with</span> a <span class="keyword">READ</span> <span class="keyword">lock</span> <span class="keyword">and</span> can<span class="string">'t be updated</span></span><br></pre></td></tr></table></figure></li><li><p>在 session2 会话中：暂时不能修改 mylock 表，处于阻塞态，一旦 mylock 表锁释放，则会执行修改操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session2 中的操作 </span></span><br><span class="line"></span><br><span class="line">mysql&gt; update mylock set name='a2' where id=1;</span><br><span class="line"><span class="comment">--这里的结果是暂时没有反应的，处于阻塞态，如果再session1中将mylock表解锁，这里便会执行了</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>结论</strong></p><ol><li>当前 session 和其他 session 均可以读取加了读锁的表</li><li>当前 session 不能读取其他表，并且不能修改加了读锁的表</li><li>其他 session 想要修改加了读锁的表，必须等待其读锁释放</li></ol><p><strong>写锁</strong></p><ul><li><p>在 session 1 会话中：给 mylock 表加个写锁</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; lock table mylock write;</span><br></pre></td></tr></table></figure></li><li><p>在 session1 会话中：可以读取 mylock 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session1 中的操作</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a2   |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>在 session1 会话中：不可以读取 book 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session1 中的操作</span></span><br><span class="line">mysql&gt; select * from book;</span><br><span class="line">ERROR 1100 (HY000): Table 'book' was not locked <span class="keyword">with</span> <span class="keyword">LOCK</span> <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure></li><li><p>在 session1 会话中：考研修改 mylock 表，因为加写锁就是为了修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session1 中的操作</span></span><br><span class="line">mysql&gt; update mylock set name='a2' where id=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 0  Warnings: 0</span><br></pre></td></tr></table></figure></li><li><p>在 session2 会话中：不可以读取 mylock 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--session2 中的操作</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">-阻塞</span><br></pre></td></tr></table></figure></li></ul><p><strong>结论：</strong></p><ol><li>当前 session 可以读取和修改加了写锁的表</li><li>当前 session 不能读取其他表</li><li>其他 session 想要读取加了写锁的表，必须等待其读锁释放</li></ol><p><strong>总结：</strong>结合上述案例，所以对MyISAM表进行操作，会有以下情况：</p><ol><li>对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</li><li>对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作</li><li><strong>简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞。</strong></li></ol><h4 id="表锁分析"><a href="#表锁分析" class="headerlink" title="表锁分析"></a>表锁分析</h4><p>通过 show status like ‘table%’; 命令查看，检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定。</p><ul><li>Table_locks_immediate：产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1；</li><li>Table_locks_waited：出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值加1），此值高则说明存在着较严重的表级锁争用情况；</li></ul><p><strong>此外，Myisam的读写锁调度是写优先，这也是myisam不适合做写为主表的引擎（偏读）。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞</strong></p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>特点：</p><ol><li>偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li><li>InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）；二是采用了行级锁</li></ol><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p><strong>创建表</strong></p><ul><li><p>建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_innodb_lock (a <span class="built_in">INT</span>(<span class="number">11</span>),b <span class="built_in">VARCHAR</span>(<span class="number">16</span>))<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'b2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">'4000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">'5000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">6</span>, <span class="string">'6000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">'7000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">8</span>, <span class="string">'8000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">'9000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'b1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> test_innodb_a_ind <span class="keyword">ON</span> test_innodb_lock(a);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> test_innodb_lock_b_ind <span class="keyword">ON</span> test_innodb_lock(b);</span><br></pre></td></tr></table></figure></li><li><p>test_innodb_lock 表中的测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_innodb_lock;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| a    | b    |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 | b2   |</span><br><span class="line">|    3 | 3    |</span><br><span class="line">|    4 | 4000 |</span><br><span class="line">|    5 | 5000 |</span><br><span class="line">|    6 | 6000 |</span><br><span class="line">|    7 | 7000 |</span><br><span class="line">|    8 | 8000 |</span><br><span class="line">|    9 | 9000 |</span><br><span class="line">|    1 | b1   |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>操作同一行数据</strong></p><ul><li><p>session1 开启事务，修改 test_innodb_lock 中的数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4001' where a=4;</span><br></pre></td></tr></table></figure></li><li><p>session2 开启事务，修改 test_innodb_lock 中同一行数据，将导致 session2 发生阻塞，一旦 session1 提交事务，session2 将执行更新操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4002' where a=4;</span><br><span class="line"><span class="comment"># 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间太长，会报超时错误</span></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4001' where a=4;</span><br><span class="line">ERROR 1205 (HY000): <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction</span><br></pre></td></tr></table></figure></li></ul><p><strong>操作不同行的操作</strong></p><ul><li><p>session1 开启事务，修改 test_innodb_lock 中的数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4001' where a=4;</span><br></pre></td></tr></table></figure></li><li><p>session2 开启事务，修改 test_innodb_lock 中不同行的数据</p><p>由于采用行锁，session2 和 session1 互不干涉，所以 session2 中的修改操作没有阻塞</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='9001' where a=9;</span><br></pre></td></tr></table></figure></li></ul><p><strong>无索引导致行锁升级为表锁</strong></p><ul><li><p>session1 开启事务，修改 test_innodb_lock 中的数据，varchar 不用 ’ ’ ，导致系统自动转换类型，导致索引失效</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set a=44 where b=4000;</span><br></pre></td></tr></table></figure></li><li><p>session2 开启事务，修改 test_innodb_lock 中不同行的数据，由于发生了自动类型转换，索引失效，导致行锁变为表锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='9001' where a=9;</span><br><span class="line"><span class="comment">--阻塞</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><p><strong>什么是？</strong></p><ol><li>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP）”</li><li>InnoDB也会对这个“间隙”加锁，这种锁机制是所谓的间隙锁（Next-Key锁）</li></ol><p><strong>危害：</strong></p><p>因为Query执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在。<br>间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害</p><p><strong>案例：</strong></p><ul><li><p>test_innodb_lock 表中的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_innodb_lock;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| a    | b    |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 | b2   |</span><br><span class="line">|    3 | 3    |</span><br><span class="line">|    4 | 4000 |</span><br><span class="line">|    5 | 5000 |</span><br><span class="line">|    6 | 6000 |</span><br><span class="line">|    7 | 7000 |</span><br><span class="line">|    8 | 8000 |</span><br><span class="line">|    9 | 9000 |</span><br><span class="line">|    1 | b1   |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>session1 开启事务，执行修改 a &gt; 1 and a &lt; 6 的数据，这会导致 mysql 将 a = 2 的数据行锁住（虽然表中并没有这行数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='Heygo' where a&gt;1 and a&lt;6;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 3  Changed: 3  Warnings: 0</span><br></pre></td></tr></table></figure></li><li><p>session2 开启事务，修改 test_innodb_lock 中不同行的数据，也会导致阻塞，直至 session1 提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='9001' where a=9;</span><br><span class="line"><span class="comment">--阻塞</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="手动行锁（悲观锁）"><a href="#手动行锁（悲观锁）" class="headerlink" title="手动行锁（悲观锁）"></a>手动行锁（悲观锁）</h4><p>如何锁定一行</p><ul><li><p><code>select xxx ... for update</code> 锁定某一行后，其它的操作会被阻塞，直到锁定行的会话提交</p></li><li><p>session1 开启事务，手动执行 for update 锁定指定行，待执行完指定操作时再将数据提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_innodb_lock  where a=8 for update;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| a    | b    |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    8 | 8000 |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>session2 开启事务，修改 session1 中被锁定的行，会导致阻塞，直至 session1 提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='XXX' where a=8;</span><br><span class="line"><span class="comment">--阻塞</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="行锁分析"><a href="#行锁分析" class="headerlink" title="行锁分析"></a>行锁分析</h4><ol><li>Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。</li><li>当系统并发量较高的时候，Innodb的整体性能和MyISAM相比就会有比较明显的优势了。</li><li>但是，Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候（索引失效，导致行锁变表锁），可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</li></ol><p><strong>如何分析行锁定</strong></p><ul><li><p>通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况<code>show status like &#39;innodb_row_lock%&#39;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like 'innodb_row_lock%';</span><br><span class="line">+<span class="comment">-------------------------------+--------+</span></span><br><span class="line">| Variable_name                 | Value  |</span><br><span class="line">+<span class="comment">-------------------------------+--------+</span></span><br><span class="line">| Innodb_row_lock_current_waits | 0      |</span><br><span class="line">| Innodb_row_lock_time          | 212969 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 42593  |</span><br><span class="line">| Innodb_row_lock_time_max      | 51034  |</span><br><span class="line">| Innodb_row_lock_waits         | 5      |</span><br><span class="line">+<span class="comment">-------------------------------+--------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>对各个状态量的说明如下：</strong></p><ol><li>Innodb_row_lock_current_waits：当前正在等待锁定的数量；</li><li>Innodb_row_lock_time：从系统启动到现在锁定总时间长度；</li><li>Innodb_row_lock_time_avg：每次等待所花平均时间；</li><li>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；</li><li>Innodb_row_lock_waits：系统启动后到现在总共等待的次数；</li></ol><p><strong>对于这5个状态变量，比较重要的主要是</strong></p><ol><li>Innodb_row_lock_time_avg（等待平均时长）</li><li>Innodb_row_lock_waits（等待总次数）</li><li>Innodb_row_lock_time（等待总时长）</li></ol><p><strong>行锁优化</strong></p><ol><li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能较少检索条件，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可能低级别事务隔离</li></ol><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="复制的基本原理"><a href="#复制的基本原理" class="headerlink" title="复制的基本原理"></a><strong>复制的基本原理</strong></h3><ol><li>slave会从master读取binlog来进行数据同步，主从复制的三步骤</li><li>master将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件（binary log events）</li><li>slave将master的binary log events拷贝到它的中继日志（relay log）</li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步的且串行化的</li></ol><h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><ol><li>每个slave只有一个master</li><li>每个slave只能有一个唯一的服务器ID</li><li>每个master可以有多个salve</li></ol><h3 id="复制最大问题"><a href="#复制最大问题" class="headerlink" title="复制最大问题"></a>复制最大问题</h3><p>因为发生多次 IO， 存在延时问题</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm整合</title>
      <link href="2021/02/19/ssm%E6%95%B4%E5%90%88/"/>
      <url>2021/02/19/ssm%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="1、数据库搭建："><a href="#1、数据库搭建：" class="headerlink" title="1、数据库搭建："></a>1、数据库搭建：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> ssmIntegation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> ssmIntegation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">If</span> <span class="keyword">EXISTS</span> books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books(</span><br><span class="line">bOokID <span class="built_in">INT</span>(<span class="number">10</span>) primary <span class="keyword">key</span> auto_increment <span class="keyword">COMMENT</span> <span class="string">'书id'</span>,</span><br><span class="line">bookName <span class="built_in">VARCHAR</span>(<span class="number">100</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书名'</span>,</span><br><span class="line">bookCounts <span class="built_in">INT</span>(<span class="number">11</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数量'</span>,</span><br><span class="line">detail <span class="built_in">VARCHAR</span>(<span class="number">200</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> books(bookID,bookName,bookCounts,detail)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'Java'</span>,<span class="number">1</span>,<span class="string">'从入门到放弃'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'MySQL'</span>,<span class="number">10</span>,<span class="string">'从删库到跑路'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'Linux'</span>,<span class="number">5</span>,<span class="string">'从进门到进牢'</span>);</span><br></pre></td></tr></table></figure><h2 id="2、pom依赖"><a href="#2、pom依赖" class="headerlink" title="2、pom依赖"></a>2、pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖 junit 数据库驱动 连接池 servlet jsp mybatis mybatis-spring spring json--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1、maven资源过滤设置"><a href="#2-1、maven资源过滤设置" class="headerlink" title="2.1、maven资源过滤设置"></a>2.1、maven资源过滤设置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、建立基本结构和配置框架"><a href="#3、建立基本结构和配置框架" class="headerlink" title="3、建立基本结构和配置框架"></a>3、建立基本结构和配置框架</h2><ul><li><p>com.hbp.pojo</p></li><li><p>com.hbp.service</p></li><li><p>com.hbp.mapper(dao)</p></li><li><p>com.hbp.controller</p></li><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-mvc.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-service.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-mapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、mybatis层编写"><a href="#4、mybatis层编写" class="headerlink" title="4、mybatis层编写"></a>4、mybatis层编写</h2><h3 id="4-1、数据库配置文件database-properties"><a href="#4-1、数据库配置文件database-properties" class="headerlink" title="4.1、数据库配置文件database.properties"></a>4.1、数据库配置文件database.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line"># 如果使用的是mysql8.0+  得把useSSL改成false并且增加一个时区的配置； &amp;serverTimezone=Asia/Shanghai</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/ssmintegation?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=6666</span><br></pre></td></tr></table></figure><h3 id="4-2、编写Mybatis的核心配置文件"><a href="#4-2、编写Mybatis的核心配置文件" class="headerlink" title="4.2、编写Mybatis的核心配置文件"></a>4.2、编写Mybatis的核心配置文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源，交给spring去做--&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.hbp.pojo"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.hbp.mapper.BookMapper"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>编写数据库对应的实体类com.hbp.pojo.Books</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写mapper层的Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询所有的书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写接口对应的mapper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hbp.mapper.BookMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        insert into books(bookName,bookCounts,detail)</span><br><span class="line">        values(#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        update books</span><br><span class="line">        set bookName=#&#123;bookName&#125;,bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125;</span><br><span class="line">        where bookID=#&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写service层的接口和实现类</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询所有的书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service层调dao层：组合dao</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5、Spring层编写"><a href="#5、Spring层编写" class="headerlink" title="5、Spring层编写"></a>5、Spring层编写</h2><ol><li><p>配置Spring整合mybatis，这里使用c3p0连接池</p></li><li><p>我们去编写Spring整合mybatis的相关的配置文件：spring-mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--c3p0连接池的私有属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关闭连接后不自动commit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--获取连接超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--当获取连接失败重试次数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4.配置dao接口扫描包，动态的实现了dao接口可以注入到spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.注入sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要扫描的dao包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.hbp.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>我们去编写Spring整合service的相关的配置文件：spring-service.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.扫描service下的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hbp.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.将我们的所有业务类，注入到Spring，可以通过配置，或者注解实现(@Service @Autowired)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BookServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.hbp.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.声明式事务配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>我们去编写Spring整合mvc的相关的配置文件：spring-mvc.xml ，并且在WEB-INF目录下新建jsp文件夹</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.扫描包：controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hbp.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--4.视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h2><ol><li>在controller层新建BookController类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//controller 调 service层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"BookServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"allBook"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"allBook"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在jsp文件夹下新建名为allBook.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;书籍展示&lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &lt;c:forEach <span class="keyword">var</span>=<span class="string">"book"</span> items=<span class="string">"$&#123;list&#125;"</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;book.bookID&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;book.bookName&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;book.bookCounts&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;book.detail&#125;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/c:forEach&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h3&gt;</span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contentType&#125;/book/allBook"&gt;进入书籍页面&lt;/a&gt;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot</title>
      <link href="2021/02/16/springboot/"/>
      <url>2021/02/16/springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h2><h3 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h3><p>yaml与properties功能上差不多，但yaml使用起来更方便也更强大</p><p>基础语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">k:(空格)v</span></span><br></pre></td></tr></table></figure><p>以此来表示已对键值对(冒号后面的空格不能省)；以空格的缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。而且属性和值对大小写敏感。</p><p>值的写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通的key: value</span></span><br><span class="line"><span class="comment"># 字面量直接写在后面即可，字符串默认不用加上双引号或者单引号</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">hbp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">hbp</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">student:</span> <span class="string">&#123;name:</span> <span class="string">hbp,age</span> <span class="number">3</span><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数组</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><p>yaml可以直接给实体类赋值</p><ol><li><p>application.yaml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">  name: hbp</span><br><span class="line">  age: <span class="number">22</span></span><br><span class="line">  happy: <span class="keyword">true</span></span><br><span class="line">  date: <span class="number">2021</span>/<span class="number">2</span>/<span class="number">16</span></span><br><span class="line">  maps: &#123;k1: v1,k2: v2&#125;</span><br><span class="line">  lists:</span><br><span class="line">    - code</span><br><span class="line">    - music</span><br><span class="line">    - girl</span><br><span class="line">  dog:</span><br><span class="line">    name: 旺财</span><br><span class="line">    age: <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值，映射到这个组件中：</span></span><br><span class="line"><span class="comment">告诉springboot将本类中的所有属性和配置文件中先关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = "person"：将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> happy;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 构造器 get set toString 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ConfigApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(person);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>扩充：</p><ul><li>松散绑定：比如我的yaml中写了last-name，这个和lastName是一样的，-后面跟着的字母默认是大写，这就是松散绑定</li><li>JSR303数据校验，这个是就是我们可以在字段时增加一层过滤器验证，可以保证数据的合法性</li></ul><p>结论：</p><ul><li>配置yml和配置properties都可以获取到值，强烈推荐yml</li><li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下@Value</li><li>如果说，我们专门编写了一个JavaBean来和配置文件进行映射，就直接使用@configurationProperites</li></ul><h2 id="SpringBoot-web"><a href="#SpringBoot-web" class="headerlink" title="SpringBoot web"></a>SpringBoot web</h2><p>静态资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ServletContext servletContext = getServletContext();</span><br><span class="line">   addResourceHandler(registry, <span class="string">"/webjars/**"</span>, <span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">   addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">      registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">      <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">         registration.addResourceLocations(<span class="keyword">new</span> ServletContextResource(servletContext, SERVLET_LOCATION));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>在SpringBoot中，我们可以使用一下方式处理静态资源<ul><li>webjars    <code>localhost:8080/webjars/</code></li><li>public,static,/**,reources     <code>localhost:8080/</code></li></ul></li><li>优先级 resouces &gt; static(默认) &gt; public</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="2021/02/05/Mybatis/"/>
      <url>2021/02/05/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h2><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持定制化SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的JDBC代码和手动设置参数以及获取结果集（也就是帮你简化JDBC代码）。</p><h3 id="什么叫持久化"><a href="#什么叫持久化" class="headerlink" title="什么叫持久化"></a>什么叫持久化</h3><ul><li>持久化就是将程序的数据在持久状态和瞬时状态的过程</li><li>持久状态是指：将数据持久地存储在数据库或硬盘或io文件中，即断电不丢失</li></ul><h2 id="体会：第一个Mybatis程序"><a href="#体会：第一个Mybatis程序" class="headerlink" title="体会：第一个Mybatis程序"></a>体会：第一个Mybatis程序</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol><li><p>搭建数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create database <span class="keyword">if</span> not exists mybatis </span><br><span class="line"></span><br><span class="line">use mybatis</span><br><span class="line"></span><br><span class="line"><span class="function">create table <span class="title">user</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">id <span class="keyword">int</span> primary key auto_increment,</span></span></span><br><span class="line"><span class="function"><span class="params">name VARCHAR(<span class="number">10</span>)</span> not <span class="keyword">null</span>,</span></span><br><span class="line"><span class="function">password <span class="keyword">int</span> not <span class="keyword">null</span></span></span><br><span class="line"><span class="function">)engine </span>= innodb <span class="keyword">default</span> charset=utf8;</span><br><span class="line"></span><br><span class="line"><span class="function">insert into <span class="title">user</span><span class="params">(name,password)</span> VALUES</span></span><br><span class="line"><span class="function"><span class="params">(<span class="string">'张三'</span>,<span class="number">123</span>)</span>,</span></span><br><span class="line"><span class="function"><span class="params">(<span class="string">'李四'</span>,<span class="number">456</span>)</span></span></span><br></pre></td></tr></table></figure></li><li><p>新建一个maven项目，然后把src文件夹删除(这样就可以把这个工程当做父工程)，然后导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个模块(这里就不需要在pom.xml那里导依赖了，因为这个模块是子项目，可以继承父工程的依赖)</p></li><li><p>在resources文件夹里创建名为mybatis-config.xml配置文件(名字其实可以随意，只是官方推荐这个)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"6666"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--这段代码暂时注释，后面会解释--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意这里不是用. 而是用 /--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mappers&gt;</span></span><br><span class="line"><span class="comment">        &lt;mapper resource="com/hbp/dao/UserMapper.xml"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mappers&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个工具类(目的是构建 SqlSessionFactory，用来生产SqlSession，这里的SqlSession相当于之前JDBC写的preparedStatement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用mybatis第一步，获取sqlsessionFactory对象</span></span><br><span class="line">            <span class="comment">// 如果配置文件是创建在了resources中，就不用写路径了</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生产sqlsession</span></span><br><span class="line">    <span class="comment">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">// org.apache.ibatis.session.SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlsession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2、编写代码"><a href="#2-2、编写代码" class="headerlink" title="2.2、编写代码"></a>2.2、编写代码</h3><ol><li><p>User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> password;</span><br><span class="line">    <span class="comment">//构造器和getter setter略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>接口实现类：UserMapper.xml（之前是UserDaoImpl类）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/mapper接口，以后都把dao叫mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hbp.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是那个接口里的方法名--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--返回的结果只需要记住2个，第一个是：resultMap;第二个是：resultType--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--返回值：所有的集合都写泛型里面的东西，不要去写集合，并且要写全限定名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.hbp.pojo.User"</span> &gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="junit测试"><a href="#junit测试" class="headerlink" title="junit测试"></a>junit测试</h3><blockquote><p>这里的测试规范来说：测试的包跟开发的包要一 一对应</p></blockquote></li></ol><p><img src="https://mybatisimages.oss-cn-guangzhou.aliyuncs.com/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%84.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里运行会出错，下面有解决方案</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SqlSession对象</span></span><br><span class="line">        SqlSession sqlsession = MybatisUtils.getSqlsession();</span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        UserDao userDao = sqlsession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlsession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出现需要解决的问题"><a href="#出现需要解决的问题" class="headerlink" title="出现需要解决的问题"></a>出现需要解决的问题</h4><blockquote><ol><li>org.apache.ibatis.binding.BindingException: Type interface com.hbp.dao.UserDao is not known to the MapperRegistry.</li></ol><p><strong>MapperRegistry是什么？</strong></p><p>需要在mybatis-config.xml核心配置文件中注册mappers</p><p>即：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!--注意这里不是用. 而是用 /--&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/hbp/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="2"><li>The error may exist in com/hbp/dao/UserMapper.xml</li></ol><p><img src="https://mybatisimages.oss-cn-guangzhou.aliyuncs.com/taget%E6%96%87%E4%BB%B6.png" alt></p><p>我们可以看到在生成的clas文件中没有找到UserMapper.xml配置文件，说明这个配置文件没有导出或生效。</p><p>因为maven约定大于配置，所以我们之后可能会遇到我们写的配置文件，无法被导出或者生效的问题，因为maven项目默认的资源配置文件得放在resources目录下，但是我们现在把UserMapper.xml放在了java目录下了，那里是导不出来的，所以我们需要手动配置资源过滤</p><p>解决方法：在父工程和子工程的pom.xml中加入如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">&gt;            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">&gt;                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">&gt;                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">&gt;            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">&gt;            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">&gt;                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">&gt;                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">&gt;                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">&gt;            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>id：就是对应namespace中的方法名，也就是接口里的方法</p><p>resultType：sql语句执行后的返回值类型</p><p>parameterType：传参的类型</p><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据ID查询用户</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写接口对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.hbp.pojo.User"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByIdTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlsession = MybatisUtils.getSqlsession();</span><br><span class="line">    UserMapper mapper = sqlsession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlsession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实体对象中的属性可以直接取出来，前提得跟pojo里定义属性名一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.hbp.pojo.User"</span>&gt;</span></span><br><span class="line">    insert into user(name,password) values (#&#123;name&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.hbp.pojo.User"</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125;,password=#&#123;password&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意事项：增删改需要手动提交事务</strong></li></ul><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>方法一：java代码执行的时候，传递通配符% %</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">"%李%"</span>);</span><br></pre></td></tr></table></figure><p>方法二：在sql拼接中使用通配符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name like "%"#&#123;value&#125;"%";</span><br></pre></td></tr></table></figure><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><ul><li><p>mybatis-config.xml 这个名字可以随便取，但官方推荐此名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">☆properties（属性）</span><br><span class="line">☆settings（设置）</span><br><span class="line">☆typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">☆environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li></ul><h3 id="环境配置-environments"><a href="#环境配置-environments" class="headerlink" title="环境配置(environments)"></a>环境配置(environments)</h3><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>Mybatis默认的事务管理器就是JDBC ，使用了连接池pooled</p><h3 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置【db.properties】</p><ul><li>编写一个【database.properties】配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span><br><span class="line">username=root</span><br><span class="line">password=6666</span><br></pre></td></tr></table></figure><ul><li><p>在mybatis-config.xml 核心配置文件中引入【<strong>注意引入的位置顺序问题，不然会报错</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"6666"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有3种方法引入：</p><ol><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件的</li></ol></li></ul><h3 id="类型别名-typeAliases"><a href="#类型别名-typeAliases" class="headerlink" title="类型别名(typeAliases)"></a>类型别名(typeAliases)</h3><ul><li><p>类型别名是为java类型设置一个短的名字</p></li><li><p>存在的意义仅在于类完全限定名的冗余</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：在核心配置文件中给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.hbp.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名，mybatis会在包下面搜索需要的Java Bean，比如：</p><p>扫描实体类的包，它的默认别名就为这个类的类名，首字母小写！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：在核心配置文件中扫描实体包下的所有javaBean，默认别名为首字母小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.hbp.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用法：</p><ul><li><p>在实体类较少的时候，使用第一种</p></li><li><p>在实体类十分多，建议使用第二种</p></li><li><p>第一种可以DIY，第二种则不行，如果非要改，需要在实体类上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="映射器-mappers"><a href="#映射器-mappers" class="headerlink" title="映射器(mappers)"></a>映射器(mappers)</h3><p>前面我们遇到的错误：MapperRegistry：注册绑定我们的Mapper文件</p><p>方法一：【推荐】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意这里不是用. 而是用 /--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/hbp/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.hbp.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>接口和他的Mapper配置文件必须同名</li><li>接口和他的Mapper配置文件必须在同一个包下</li></ul><p>方式三：使用扫描包进行绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.hbp.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名</li><li>接口和他的Mapper配置文件必须在同一个包下</li></ul><h3 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h3><p><img src="https://mybatisimages.oss-cn-guangzhou.aliyuncs.com/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt></p><p>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>最佳作用域是局部变量</li></ul><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><ul><li>可以想象成数据库连接池</li><li>一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li><li>最佳作用域是应用(全局)作用域</li><li><strong>最简单的就是使用单例模式或者静态单例模式</strong></li></ul><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><ul><li>连接到连接池的一个请求</li><li>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，最佳的作用域是请求或方法作用域。</li><li>用完之后赶紧关闭，否则资源被占用</li></ul><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><h3 id="解决属性名和字段名不一致问题"><a href="#解决属性名和字段名不一致问题" class="headerlink" title="解决属性名和字段名不一致问题"></a>解决属性名和字段名不一致问题</h3><p>数据库中的字段：</p><p><img src="https://mybatisimages.oss-cn-guangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5.png" alt></p><p>实体类的属性名：</p><p><img src="https://mybatisimages.oss-cn-guangzhou.aliyuncs.com/%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AD%97%E6%AE%B5.png" alt></p><p>测试中出现的问题：</p><p><img src="https://mybatisimages.oss-cn-guangzhou.aliyuncs.com/%E6%B5%8B%E8%AF%95%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98.png" alt></p><p>解决方法：</p><ul><li><p><strong>法一：在sql中给字段起别名</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name,password as pwd from mybatis.user where id = #&#123;id&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>法二：resultMap</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--简单的结果集映射--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id要对应要调用的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段；property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"pwd"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>默认情况下，mybatis会在幕后自动创建的一个resultMap，再基于属性名来映射到JavaBean的属性上。所以说我们平时不用写resultMap的映射，只要属性名和字段名保持一致即可</li><li>但对于不一致的属性名，只需要需要他们关系即可，相同的属性名不需要显式用到他们</li></ul></li></ul><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>简单情景：多个学生关联一个老师</p><p><strong>环境搭建</strong></p><ol><li>数据库：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">10</span>) primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(<span class="keyword">id</span>,<span class="string">`name`</span>) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'黄老师'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">10</span>) primary <span class="keyword">key</span>, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>)<span class="keyword">DEFAULT</span> <span class="literal">NULL</span>, </span><br><span class="line">    tid <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>, </span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (tid) <span class="keyword">REFERENCES</span> teacher(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,tid)<span class="keyword">VALUES</span>(<span class="string">'1'</span>,<span class="string">'小明'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,tid)<span class="keyword">VALUES</span>(<span class="string">'2'</span>,<span class="string">'小红'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,tid)<span class="keyword">VALUES</span>(<span class="string">'3'</span>,<span class="string">'小张'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,tid)<span class="keyword">VALUES</span>(<span class="string">'4'</span>,<span class="string">'小李'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,tid)<span class="keyword">VALUES</span>(<span class="string">'5'</span>,<span class="string">'小王'</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>学生类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//通过组合的方式,学生关联一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>教师类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>StudengMapper.xml：按结果嵌套处理</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"studentTeacher"</span> <span class="attr">type</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象：association 集合：collection--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultMap</span>=<span class="string">"studentTeacher"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>简单情景：一个老师对应多个学生</p><p>环境搭建跟刚才一样</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>教师类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TeacherMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象：association 集合：collection</span></span><br><span class="line"><span class="comment">        javaType 指定属性的类型</span></span><br><span class="line"><span class="comment">        集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ol><li>关联-association【多对一】</li><li>集合-collection【一对多】</li><li>javaType &amp; ofType<ol><li>javaType 用来指定实体类中属性的类型</li><li>ofType用来指定映射到List或者集合中的pojo类型，泛型中的约束类型</li></ol></li></ol><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p><strong>注解的本质：利用反射机制</strong></p><ol><li><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法存在多个参数，所有参数前面必须加上@Param("") 注解</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型，不需要加@Param("")</span></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user(id,name,password) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.hbp.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动开启事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlsession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> sqlSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><p><strong>关于@Param()注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上</li><li>sql中引用的就是@param(“”)中设定的属性名</li></ul><p>关于#{}和${}区别：</p><ul><li>#{}相当于PreparedStatement一样，可以防止sql注入</li><li>${}相当于Statement，会sql注入</li></ul><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p><strong>什么是动态sql：动态sql就是根据不同的条件生成不同的sql语句</strong></p><p><strong>总结：所谓的动态sql，本质还是sql语句，只是我们可以在sql层面，去执行一个逻辑代码</strong></p><h3 id="搭建环境-1"><a href="#搭建环境-1" class="headerlink" title="搭建环境"></a><strong>搭建环境</strong></h3><p>数据库文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> blog(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">varchar</span>(<span class="number">50</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span><span class="string">'博客id'</span>,</span><br><span class="line">title <span class="built_in">varchar</span>(<span class="number">100</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span><span class="string">'博客标题'</span>,</span><br><span class="line">author <span class="built_in">varchar</span>(<span class="number">30</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span><span class="string">'博客作者'</span>,</span><br><span class="line">create_time datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span><span class="string">'创建时间'</span>,</span><br><span class="line">views <span class="built_in">int</span>(<span class="number">30</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span><span class="string">'浏览量'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="comment">--这一次换个方法来插入数据</span></span><br><span class="line"><span class="comment">--见如下java代码</span></span><br></pre></td></tr></table></figure><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//java.util下的date，并且这里属性名和字段不一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写实体类对应的mapper接口和mapper.xml文件来插入数据</p><p>BlobMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addBlob</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><p>BlobMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    insert into blog(id,title,author,create_Time,views)</span><br><span class="line">    values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session= MybatisUtils.getSqlsession();</span><br><span class="line">    BlogMapper mapper=session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Blog blog=<span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setId(IDUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">"Mybatis如此简单"</span>);</span><br><span class="line">    blog.setAuthor(<span class="string">"hbp"</span>);</span><br><span class="line">    blog.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    blog.setViews(<span class="number">9999</span>);</span><br><span class="line">    mapper.addBlob(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">"Java如此简单"</span>);</span><br><span class="line">    mapper.addBlob(blog);</span><br><span class="line">    blog.setId(IDUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">"Spring如此简单"</span>);</span><br><span class="line">    mapper.addBlob(blog);</span><br><span class="line">    blog.setId(IDUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">"微服务如此简单"</span>);</span><br><span class="line">    mapper.addBlob(blog);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession= MybatisUtils.getSqlsession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">//map.put("title","Java如此简单");</span></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>where元素只会在至少有一个子元素的条件返回SQL子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，where元素也会将它们去除。</p><p>拿上述IF中的代码改进</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里如果title为null，则拼接第二个if里的内容，并且由于<where>的作用，可以智能地直接把开头的and去掉；如果title不为null，并且author也不为null，则and保留</where></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：上述的逗号可以自动去掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"title"</span>,<span class="string">"Js如此简单"</span>);</span><br><span class="line">map.put(<span class="string">"id"</span>,<span class="string">"884e6215a6924da0b5c83903459051d4"</span>);</span><br><span class="line">mapper.updateBlog(map);</span><br></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>其实就是where 和 set的一个结合吧，感觉没必要使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prefix：前缀为where  则把"AND"|"OR"去掉  ----相当于where标签</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">suffix：后缀为set，则把多余的,去掉  ----相当于set标签</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h3><p>这里的choose跟java中的开关语句switch相似，只要满足一个<when>条件，便不会往下执行剩余的</when></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：这里虽然有3个参数，但是只会执行一个when标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session= MybatisUtils.getSqlsession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"Java如此简单"</span>);</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"hbp"</span>);</span><br><span class="line">    map.put(<span class="string">"views"</span>,<span class="string">"9999"</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>作用是把共有的sql代码提取出来，进行代码复用，理解成封装</p><ol><li><p>使用sql标签提取公共的部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在需要使用的地方使用include标签引用即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>注意事项：</p><ul><li>最好基于单表来定义sql片段</li><li>不要存在where标签</li></ul><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>动态sql的另外一个常用的操作是对一个集合进行遍历，通常是在构建in条件语句的时候</p><!--官方例子--><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectBlogIn"</span> resultType=<span class="string">"blog"</span>&gt;</span><br><span class="line">select * </span><br><span class="line">    from blog </span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach item=<span class="string">"item"</span> index=<span class="string">"index"</span> collection=<span class="string">"list"</span></span><br><span class="line">             open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>item表示集合list中的每一项</li><li>index表示下标(相当于数组)，一般不需要这个属性</li><li>collection表示所要遍历的集合名</li><li>open、separator、close、#item：表示 (item,item,item,…)</li><li>即：select *  from blog   where id in(item,item,item,item)</li></ul><p>举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询id为1、2、3的blog信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blog <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogIn"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">select * </span><br><span class="line">    from blog </span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">collection</span>=<span class="string">"ids"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>Q：什么样的数据能使用缓存？</p><p>A：经常查询并且不经常改变的数据</p><p>mybatis有分三级缓存，默认是一级缓存，即在sqlSession作用域中有效</p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="2021/02/05/SpringMVC/"/>
      <url>2021/02/05/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h2><p>首先MVC不是一种设计模式，MVC是一种架构模式，一种软件设计规范，是将业务逻辑、数据、显示分离的方法来组织代码</p><ul><li>Model(模型)：数据模型，提供要展示的数据，因此包含数据（dao）和行为（service）</li><li>View(视图)：负责进行模型的展示，一般就是我们看到的用户界面，用户想看的东西</li><li>Controller(控制器)：负责接收用户的请求，接收后委托给模型进行处理，处理完毕后把返回的模型数据            返回给视图，由视图负责展示，也就是说控制器做了一个调度的工作而已</li></ul><p>经典的MVC就是JSP + servlet + javabean的模式</p><h2 id="2、第一个SpringMVC程序"><a href="#2、第一个SpringMVC程序" class="headerlink" title="2、第一个SpringMVC程序"></a>2、第一个SpringMVC程序</h2><ol><li><p>新建一个moudle，添加web的支持</p></li><li><p>导入springMVC的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置web.xml，注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在配置DispatchServlet：这个是SpringMVC的核心：请求分发器，前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--DispatcherSerlvet要绑定Spring的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别：1：服务器已启动，这个也跟着启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在springMVC中： / 和 /*区别</span></span><br><span class="line"><span class="comment">    /：只匹配所有的请求，不会去匹配jsp页面</span></span><br><span class="line"><span class="comment">    /*：匹配所有的请求，包括jsp页面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截--&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写springmvc的配置文件。名称为springmvc-serlvet.xml：这个是官方推荐的名字而已</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemalocation</span>=<span class="string">"http://www. springframework. org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www. springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加处理映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加处理器适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写我们要操作业务Controller，要么实现Controller接口，要么增加注解；需要返回一个ModeAndView，装数据，封视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="comment">//这里先实现controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//modelAndView 模型和视图</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务代码</span></span><br><span class="line">        String result = <span class="string">"helloSpringMvc"</span>;</span><br><span class="line">        <span class="comment">//封装对象，放在modelAndView中</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"msg"</span>,result);</span><br><span class="line">        <span class="comment">//视图跳转</span></span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在modelAndView中</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"test"</span>);<span class="comment">// /WEB-INF/jsp/hello.jsp</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--BeanNameUrlHandlerMapping：bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.hbp.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写要跳转的jsp页面，显示modelAndView存放的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>可能会遇到的问题：访问出现404</strong></p><ol><li><p>在IDEA的项目发布中，添加lib依赖，然后重启tomcat</p><p><img src="https://springmvcimages.oss-cn-guangzhou.aliyuncs.com/lib%E4%BE%9D%E8%B5%96.png?versionId=CAEQCRiBgIDRiPTBvRciIDI1ZGNhMDEwMTljZDQyY2E4YjIyODE5MDUwNzU1N2Ni" alt></p></li></ol><p>但现实开发中，我们不会用这种方式去实现，上面的接口版本只是为了方便去理解原理和运行的流程，在真实开发中是会用注解方式去实现，这才是精髓所在</p><p><strong>注解版：</strong></p><ol><li><p>新建moudle，添加web支持，建立包结构com.hbp.controller</p></li><li><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在pom.xml文件引入相关依赖，不过在父依赖中已经引入了，这个moudle可以不引入</p></li><li><p>添加项目的lib依赖 ，上面有描述，如果不添加，会404</p></li><li><p>配置web.xml</p><ul><li>注意web.xml版本问题，要最新版</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为/【不要用/* ， 会404】</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在配置DispatchServlet：这个是SpringMVC的核心：请求分发器，前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--DispatcherSerlvet要绑定Spring的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别：1：服务器已启动，这个也跟着启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在springMVC中： / 和 /*区别</span></span><br><span class="line"><span class="comment">    /：只匹配所有的请求，不会去匹配jsp页面</span></span><br><span class="line"><span class="comment">    /*：匹配所有的请求，包括jsp页面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建SpringMVC配置文件：在resources目录下新建 springmvc-config.xml</p><ul><li>让IOC的注解生效</li><li>静态资源过滤</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自动扫包，让指定包下的注解生效，由IOC容器统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hbp.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--让lSpring MVC不处理静态资源  .css .js .html .mp3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandLerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandLerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建controller：编写一个java控制类：com.hbp.controller.HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/HelloController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址：项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装数据；想模型中添加属性msg与值，可以在jsp页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"helloSpring"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;<span class="comment">//会被视图解析器处理: /WEB/INF/hello.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描和注册，代表这个类会被Spring接管，被这个注解的类中的所有方法，如果返回值是String，并且有具体页面可以跳转，那么就会被视图解析器解析</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所有访问时应该是/HelloController/hello</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成了WEB-INF/jsp/hello.jsp</li></ul></li><li><p>创建视图层：</p><p>在WEB-INF/jsp目录中创建hello.jsp，视图可以直接取出并展示从Controller带回的信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>运行tomcat，访问地址：localhost:8080/项目名/hello</p></li></ol><h2 id="2、跳转方式"><a href="#2、跳转方式" class="headerlink" title="2、跳转方式"></a>2、跳转方式</h2><p><strong>ModelAndView</strong></p><p>设置ModelAndView对象，根据view的名称和视图解析器跳到指定的页面</p><p>页面：{视图解析器前缀} + viewName + {视图解析器后缀}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//modelAndView 模型和视图</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//业务代码</span></span><br><span class="line">        String result = <span class="string">"helloSpringMvc"</span>;</span><br><span class="line">        <span class="comment">//封装对象，放在modelAndView中</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"msg"</span>,result);</span><br><span class="line">        <span class="comment">//视图跳转</span></span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在modelAndView中</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"test"</span>);<span class="comment">// /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原生的ServletAPI</strong></p><p>通过设置ServletAPI，不需要视图解析器</p><ol><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        resp.getWriter().println(<span class="string">"Hello,Spring BY servlet API"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        resp.sendRedirect(<span class="string">"/index.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        req.setAttribute(<span class="string">"msg"</span>, <span class="string">"/result/t3"</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/hello.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC</strong></p><p>通过SpringMVC来实现转发和重定向，无需视图解析器</p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/h1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"modelTest"</span>);</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF/jsp/hello.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/h2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"modelTest"</span>);</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/jsp/hello.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/h3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"modelTest"</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向，有视图解析器</strong></p><p>重定向，不需要视图解析器，本质就是重新请求一个新地方，所以注意路径问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/h1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"modelTest"</span>);</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/h2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"modelTest"</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、处理提交数据"><a href="#3、处理提交数据" class="headerlink" title="3、处理提交数据"></a>3、处理提交数据</h2><h3 id="3-1、提交的名称和处理方法的参数名一致"><a href="#3-1、提交的名称和处理方法的参数名一致" class="headerlink" title="3.1、提交的名称和处理方法的参数名一致"></a>3.1、提交的名称和处理方法的参数名一致</h3><p>提交数据：<code>localhost:8080/hello?name=hbp</code></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name, Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//接收前端的参数</span></span><br><span class="line">        System.out.println(<span class="string">"接收到前端的参数为："</span> + name);</span><br><span class="line">        <span class="comment">//将返回的结果传递给前端 通过model</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, name);</span><br><span class="line">        <span class="comment">//视图跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：url中的name参数名要和方法中的name参数名要保持一致</p><h3 id="3-2、提交的名称和处理方法的参数名不一致"><a href="#3-2、提交的名称和处理方法的参数名不一致" class="headerlink" title="3.2、提交的名称和处理方法的参数名不一致"></a>3.2、提交的名称和处理方法的参数名不一致</h3><p>提交数据：<code>localhost:8080/hello?username=hbp</code></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestParam("username"): username提交的域的名称</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name, Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//接收前端的参数</span></span><br><span class="line">        System.out.println(<span class="string">"接收到前端的参数为："</span> + name);</span><br><span class="line">        <span class="comment">//将返回的结果传递给前端 通过model</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, name);</span><br><span class="line">        <span class="comment">//视图跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、提交的是一个对象"><a href="#3-3、提交的是一个对象" class="headerlink" title="3.3、提交的是一个对象"></a>3.3、提交的是一个对象</h3><p>要求提交的表单域和对象的属性名保持一致，参数使用对象即可</p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交数据：localhost:8080/user/t2?name=hbp&amp;id=1&amp;age=22</p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端接收的是一个对象： id，name，age</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/t2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、数据显示到前端"><a href="#4、数据显示到前端" class="headerlink" title="4、数据显示到前端"></a>4、数据显示到前端</h2><h3 id="4-1、通过ModeAndView"><a href="#4-1、通过ModeAndView" class="headerlink" title="4.1、通过ModeAndView"></a>4.1、通过ModeAndView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//modelAndView 模型和视图</span></span><br><span class="line">  ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">  modelAndView.addObject(<span class="string">"msg"</span>,<span class="string">"helloSpringMVC"</span>);</span><br><span class="line">  modelAndView.setViewName(<span class="string">"test"</span>);<span class="comment">// /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">  <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、通过ModeMap"><a href="#4-2、通过ModeMap" class="headerlink" title="4.2、通过ModeMap"></a>4.2、通过ModeMap</h3><h3 id="4-3、通过Mode"><a href="#4-3、通过Mode" class="headerlink" title="4.3、通过Mode"></a>4.3、通过Mode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name, Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//将返回的结果传递给前端 通过model</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>区别：</p><ul><li>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</li><li>ModelMap继承了LinkedMap，除了实现了自身的一些方法，同样继承了LinkedMap的方法和特征</li><li>Model 精简版，大部分情况下使用model就够了</li></ul><h2 id="5、乱码问题"><a href="#5、乱码问题" class="headerlink" title="5、乱码问题"></a>5、乱码问题</h2><ol><li><p>编写一个提交的表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/e/t1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>后台编写对应的处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/e/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试出乱码</p></li></ol><p><strong>解决方案1：</strong></p><ol><li>通过自定义的过滤器解决</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置web.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.hbp.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案2：</strong></p><p>web.xml：即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、JSON"><a href="#6、JSON" class="headerlink" title="6、JSON"></a>6、JSON</h2><p><strong>FastJson：</strong></p><p>fastjson.jar是阿里开发的一款专门用于java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换</p><ol><li>pom.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//即不经过视图解析器</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/j1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList&lt;User&gt; usersList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"hbp1"</span>, <span class="number">22</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"hbp2"</span>, <span class="number">23</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"hbp3"</span>, <span class="number">24</span>);</span><br><span class="line">        usersList.add(user1);</span><br><span class="line">        usersList.add(user2);</span><br><span class="line">        usersList.add(user3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java对象转json字符串</span></span><br><span class="line">        String strList = JSON.toJSONString(usersList);</span><br><span class="line">        System.out.println(strList);</span><br><span class="line">        System.out.println(<span class="string">"================================================="</span>);</span><br><span class="line">        String str = JSON.toJSONString(user1);</span><br><span class="line">        <span class="comment">//json字符串转java对象</span></span><br><span class="line">        User user = JSON.parseObject(str, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(<span class="string">"================================================="</span>);</span><br><span class="line">        <span class="comment">//java对象转json对象</span></span><br><span class="line">        JSONObject jsonObject = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">        System.out.println(<span class="string">"================================================="</span>);</span><br><span class="line">        <span class="comment">//JSON对象转java对象</span></span><br><span class="line">        User userJava = JSON.toJavaObject(jsonObject, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userJava);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7、Ajax"><a href="#7、Ajax" class="headerlink" title="7、Ajax"></a>7、Ajax</h2><h3 id="7-1简介："><a href="#7-1简介：" class="headerlink" title="7.1简介："></a>7.1简介：</h3><ul><li>AJAX = Asynchronous JavaScript And XML（异步的JavaScript和XML）</li><li>AJAX是一种无需重新加载整个页面的情况下，能够部分刷新网页的技术，它不是一种新的编程语言，而是一种更快更好以及交互性更强的Web应用程序的技术</li><li>例子：当你在百度的搜索框输入关键字时，JS会把这些字符发送到服务器，然后服务器返回一个搜索建议的列表</li></ul><h3 id="7-3、AJAX初体验"><a href="#7-3、AJAX初体验" class="headerlink" title="7.3、AJAX初体验"></a>7.3、AJAX初体验</h3><p>我们可以使用前端的一个标签来体验一个ajax的样子：iframe标签</p><ol><li><p>新建一个module，并导入web支持（项目可以自行搭建）</p></li><li><p>编写一个ajax-frame.html使用iframe测试，感受效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iframe测试体验页面无刷新<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> url = <span class="built_in">document</span>.getElementById(<span class="string">"url"</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"iframe01"</span>).src=url;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入地址：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">onclick</span>=<span class="string">"fun()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe01"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 500px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>利用ajax可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否存在</li><li>登陆时，提示用户名密码错误</li><li>删除数据行，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除</li><li>…</li></ul><h3 id="7-4、JQuery-ajax"><a href="#7-4、JQuery-ajax" class="headerlink" title="7.4、JQuery.ajax"></a>7.4、JQuery.ajax</h3><ul><li><p>Ajax的核心是XMLHttpRequest对象(xhr)</p></li><li><p>这里不使用JS原生XMLHttpRequest，直接使用jquery提供的</p></li><li><p>Jquery本质就是一个库；js的大量函数，提供多个与AJAX有关的方法</p></li><li><p>通过Jquery ajax方法，能够使用HTTP Get 和 HTTP Post从远程服务器上请求文本</p></li><li><p>Jquery Ajax本质就是XMLHttpRequest，对他进行了封装，方便调用</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">部分常用参数：</span><br><span class="line">url:请求地址</span><br><span class="line">   type:请求方式(GET、POST) 1.9.0之后用method</span><br><span class="line">     data:要发送的数据</span><br><span class="line">success:成功之后执行的回调函数(全局)</span><br><span class="line">  error:失败之后执行的回调函数(全局)</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><h4 id="7-4-1、方式一：使用最原始的HttpServletResponse处理，最简单，最通用"><a href="#7-4-1、方式一：使用最原始的HttpServletResponse处理，最简单，最通用" class="headerlink" title="7.4.1、方式一：使用最原始的HttpServletResponse处理，最简单，最通用"></a>7.4.1、方式一：使用最原始的HttpServletResponse处理，最简单，最通用</h4><ol><li><p>配置web.xml 和Springmvc的配置文件，复制上面案例即可【记得静态资源过滤和注解驱动放上去】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自动扫包，让指定包下的注解生效，由IOC容器统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hbp.controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个AjaxController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/a1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a1</span><span class="params">(String name, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"hbp"</span>.equals(name))&#123;</span><br><span class="line">            response.getWriter().print(<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().print(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入jquery，可以使用在线的CDN，也可以下载导入；这里使用下载导入的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.4.1.js"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;script src="$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.4.1.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="function">function <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/a1"</span>,</span><br><span class="line">            data:&#123;<span class="string">"name"</span>: $(<span class="string">"#username"</span>).val()&#125;,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;%--失去焦点时，发起一个请求(携带信息)到后台--%&gt;</span><br><span class="line">  用户名：&lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span> onblur=<span class="string">"a()"</span>&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="7-4-2、SpringMVC实现"><a href="#7-4-2、SpringMVC实现" class="headerlink" title="7.4.2、SpringMVC实现"></a>7.4.2、SpringMVC实现</h4><ol><li><p>解决json乱码问题配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSON乱码问题配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src="$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.4.1.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function">function <span class="title">a1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/a3"</span>,</span><br><span class="line">                data:&#123;<span class="string">"name"</span> : $(<span class="string">"#name"</span>).val()&#125;,</span><br><span class="line">                success:function (data) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.toString() == <span class="string">'ok'</span>)&#123;</span><br><span class="line">                        $(<span class="string">"#userInfo"</span>).css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">"#userInfo"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">"#userInfo"</span>).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">function <span class="title">a2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/a3"</span>,</span><br><span class="line">                data:&#123;<span class="string">"pwd"</span> : $(<span class="string">"#pwdInfo"</span>).val()&#125;,</span><br><span class="line">                success:function (data) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.toString() == <span class="string">'ok'</span>)&#123;</span><br><span class="line">                        $(<span class="string">"#pwdInfo"</span>).css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">"#pwdInfo"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">"#pwdInfo"</span>).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> id=<span class="string">"name"</span> onblur=<span class="string">"a1()"</span>&gt;</span><br><span class="line">    &lt;span id="userInfo"&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> id=<span class="string">"pwd"</span> onblur=<span class="string">"a2()"</span>&gt;</span><br><span class="line">    &lt;span id="pwdInfo"&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>AjaxController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/a3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">a3</span><span class="params">(String name, String pwd)</span></span>&#123;</span><br><span class="line">    String msg = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(name != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//admin 这个数据应该是在数据库里头查</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(name)) &#123;</span><br><span class="line">            msg = <span class="string">"ok"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">"用户名错误"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pwd != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//123 这个数据应该是在数据库里头查</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"123"</span>.equals(pwd))&#123;</span><br><span class="line">            msg = <span class="string">"ok"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">"密码有误"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="8、拦截器"><a href="#8、拦截器" class="headerlink" title="8、拦截器"></a>8、拦截器</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理，开发者可以自定义一些拦截器来实现特定的功能</p><p>过滤器和拦截器的区别：拦截器是AOP思想的具体应用</p><p><strong>过滤器</strong></p><ul><li>serlvet规范中的一部分，任何javaweb工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p>拦截器</p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法，如果访问的是jsp、html、css、image、js是不会拦截的</li></ul><h3 id="8-1、自定义拦截器"><a href="#8-1、自定义拦截器" class="headerlink" title="8.1、自定义拦截器"></a>8.1、自定义拦截器</h3><p>想要自定义拦截器，必须实现HandlerInterceptor接口</p><ol><li><p>新建一个Moudle，添加web支持</p></li><li><p>配置web.xml和springmvc-servlet.xml文件</p></li><li><p>编写一个拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//return:true 放行  一般只用这个方法即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包括这个请求下的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.hbp.config.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="8-2、例子"><a href="#8-2、例子" class="headerlink" title="8.2、例子"></a>8.2、例子</h3><ol><li><p>在jsp文件夹下新建login.jsp和main.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--在web-inf下的所有页面或者资源，只能通过controller，或者servlet访问--%&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h1&gt;</span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/user/goLogin"&gt;登录页面&lt;/a&gt;</span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/user/main"&gt;首页&lt;/a&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>LoginController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//跳转到首页</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/main"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转到登录页面</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/goLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//把用户的信息存在session中</span></span><br><span class="line">        session.setAttribute(<span class="string">"userLoginInfo"</span>, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义登录拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//放行1：判断什么情况下登录了：登录页面</span></span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().contains(<span class="string">"Login"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一次登录要放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().contains(<span class="string">"login"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行2：判断什么情况下登录了：session</span></span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"userLoginInfo"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断什么情况下没有登录：session</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包括这个请求下的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定自定义的拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.hbp.config.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="2021/02/02/spring5/"/>
      <url>2021/02/02/spring5/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>2002，首次推出了Spring框架的雏形：interface21框架</li><li>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日发布1.0正式版</li><li>Spring的目的：解决企业应用开发的复杂性，使开发变得更简单</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>Spring是一个开源免费的框架(容器)</li><li>Spring是一个轻量级，非入侵式（在原来的项目集成spring后，不会对原来项目产生影响）的框架</li><li><strong>控制反转(IOC)，面向切面编程(AOP)</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入mvc依赖，导入这个依赖，则相关的依赖也会跟着导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>发展太久之后，违背了原先的理念，配置十分繁琐，人称”配置地狱”hhh</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><blockquote><p>现在的java开发，说白了就是基于Spring的开发！</p></blockquote><ul><li>Spring Boot<ul><li>一个快速开发的脚手架(只需要一些简单的配置，就可以开发一个网站)。</li><li>基于SpringBoot可以快速地开发单个微服务(一个个的小模块)</li><li>约定大于配置(学起来轻松，你只需要了解它的一些规定就好了)</li></ul></li><li>Spring Cloud<ul><li>Spring Cloud是基于SpringBoot实现的</li></ul></li></ul><blockquote><p>学习建议：学习SpringBoot的前提，需要完全掌握Spring及SpringMVC，学好这两个，对于学习SpringBoot就会如鱼得水</p></blockquote><h2 id="两大特点讲解"><a href="#两大特点讲解" class="headerlink" title="两大特点讲解"></a>两大特点讲解</h2><h3 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h3><p>过去的javaWeb开发</p><ol><li><p>先写UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再UserDaoImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后写UserService业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserServiceImpl业务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 客户端实际上调用的是业务层，dao层他们不需要接触</span></span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    userService.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上是我们原来的开发方式，那我们现在修改一下</p></blockquote><ul><li>在Impl文件中，新建一个业务实现类 UserDaoMysqlImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMysqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mysql获取用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>紧接着如果我们要使用Mysql的话，我们就需要去UserServiceImpl里面修改对应的实例化对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoMysqlImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果我们继续添加Dao层的实现，又需要去service实现类里面修改对应的实例化对象，假设我们的这种需求非常大，那这种办法工作量就会非常大，每次变动，都需要修改大量的代码，这种设计的耦合性太高</p></li></ol><p><strong>那我们改如何去解决</strong></p><p>我们可以在需要用到他的地方，不去实现它，而是留出一个set接口，我们去代码里修改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao；</span><br><span class="line">    <span class="comment">// 利用set进行动态实现值的注入！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 客户端实际上调用的是业务层，dao层他们不需要接触</span></span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    <span class="comment">// 这样用户只需要传入所需要的实现对象，就可以实现把控制权交给用户了，而我们就不必修改业务层的代码</span></span><br><span class="line">    ((UserServiceImpl) userService).setUserDao(<span class="keyword">new</span> UserDaoMysqlImpl());</span><br><span class="line">    userService.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现了区别没有？可能你觉得没啥区别.但是实际上已经发生了根本性的变化，很多地方都不一样了。你品，你细品[狗头]。</p><ul><li>之前，程序是主动创建对象，控制权在程序员手上</li><li>现在使用了set注入后，程序不再具有主动性，它只负责提供一个接口，变成了被动的接收对象，而用户则掌握主动权，需要什么就传个参数给接口即可，我们程序员不再去管理对象的创建了。</li></ul><p>这种思想，从本质上解决了问题，我们程序员不再去管理对象的创建了，系统的耦合性大大降低~，更多的去关注业务的实现.耦合性大大降低.这也就是IOC的原型！</p><p><strong>图解</strong>：</p><p><img src="https://springimages.oss-cn-guangzhou.aliyuncs.com/ioc%E5%9B%BE%E8%A7%A3.png" alt></p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><strong>控制反转(IOC)是一个设计思想，而DI(依赖注入)是实现IOC的一种方法。</strong>在没有IOC的程序中，我们使用的是面向对象编程，对象的创建与对象间的依赖关系完全写死在程序中，对象的创建由程序自己控制。而有了IOC，控制反转后将对象的创建转移给第三方。简单点来说：控制反转就是获得依赖对象的方式反转了。</p><p>IOC是Spring框架的核心内容，使用多种方式完美的实现IOC：</p><ul><li>方式一：xml配置</li><li>方式二：注解</li><li>方式三：新版Spring可以零配置实现IOC(自动装配)</li></ul><p><strong>Spring工作原理视图</strong></p><p>Spring容器在初始化时先读取配置文件，根据配置文件和元数据创建与组织对象存入容器中，程序使用时再从IOC容器中取出需要的对象</p><p><img src="https://springimages.oss-cn-guangzhou.aliyuncs.com/spring%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt></p><p>采用xml方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p>控制反转IOC是一种通过描述(XML或注解)并通过第三方去生产或获取特定对象的方式。</p><p>在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入DI。</p><p>实例</p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Person实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写我们的applicationContext.xml配置文件，这个命名可以随意，但官方命名推荐applicationContext</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        使用spring来创建对象，在spring中这些都称为Bean</span><br><span class="line">        传统的创建对象格式：</span><br><span class="line">        类 对象名 = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span>()</span>;</span><br><span class="line">        </span><br><span class="line">        这里的bean=对象  即<span class="keyword">new</span> <span class="class"><span class="keyword">class</span>()</span></span><br><span class="line"><span class="class">        <span class="title">id</span></span>=对象名</span><br><span class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="keyword">new</span>的对象</span><br><span class="line">        property给对象中的属性设值</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.hbp.entity.Person"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"name"</span> value=<span class="string">"姓名"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 解析applicationContext.xml文件，生成管理响应的Bean对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span>  ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// getBean：参数即为spring配置文件中bean的id</span></span><br><span class="line">        Person person = context.getBean(<span class="string">"person"</span>,Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>person对象是由Spring容器中创建的</li><li>person对象的属性是由Spring容器设置的</li></ul><p>这个过程就叫控制反转。</p><p>控制：谁来控制对象的创建？在传统的应用程序的对象是由程序本身控制创建的，使用spring后，对象是由spring来创建的。</p><p>反转：程序本身不创建对象，而是变成被动的接收对象</p><p>依赖注入：就是利用set方法来进行注入的（如果你把上面person类的set方法去掉，会报错）</p><p>IOC是一种编程思想，由主动的编程变成了被动的接收</p><p>因此，我们彻底不再用程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改。</p><p>所谓的IOC ，一句话搞定：对象由spring来创建，管理，装配</p></blockquote></li></ol><h3 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h3><p>【环境搭建】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>使用无参构造创建对象(默认方式)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果把上述的无参构造去掉，那么这里会报错；id没有赋值，默认为0--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"姓名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用有参构造创建对象</p><p>2.2 下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据参数的位置--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"1111"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"姓名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.2 通过类型创建，不建议使用这种，因为如果有2个及以上的类型一致，那就无法使用了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"姓名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.3 通过参数名来设置(推荐)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"姓名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</strong></p></li></ol><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ol><li><p><strong>构造器注入（上面就是构造器注入）</strong></p></li><li><p><strong>Set方式注入【重点掌握】</strong></p></li><li><p><strong>属性注入</strong></p><p>【环境搭建】 </p><p>1.复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   2.真实测试对象</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter/setter方法自己写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   3.applicationContext.xml</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.Address"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.普通值注入 value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"姓名"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.Bean注入 ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--3.数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--4.list--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>6<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--5.map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"身份证"</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"银行卡"</span> <span class="attr">value</span>=<span class="string">"321"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--6.Set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"game"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>A<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>B<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>C<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--7.null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--8.properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driver"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>fff<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   4.测试</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Student student = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(student.toString());</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>拓展方式注入</strong></li></ol><p>我们可以使用p命名和c命名空间进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：相当于property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span> <span class="attr">p:name</span>=<span class="string">"hbp"</span> <span class="attr">p:age</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间注入，通过构造器注入：construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span> <span class="attr">c:name</span>=<span class="string">"hbp2"</span> <span class="attr">c:age</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：p命名和c命名空间不能直接使用，需要导入xml约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span><br></pre></td></tr></table></figure><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><ol><li><p>单例模式（spring默认机制）：即全局共享一个对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span> <span class="attr">p:name</span>=<span class="string">"hbp"</span> <span class="attr">p:age</span>=<span class="string">"22"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>原型模式：每次从容器中get的时候，都会产生一个新的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hbp.entity.User"</span> <span class="attr">p:name</span>=<span class="string">"hbp"</span> <span class="attr">p:age</span>=<span class="string">"22"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h3><ul><li>自动装配值Spring满足bean依赖的一种方式</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性</li></ul><p>在Spring中有三种装配的方式</p><ol><li>在xml中显式的配置【上述所用的方式便是这种】</li><li>在java中显式的配置</li><li>隐式的自动装配bean【重要】</li></ol><p><strong>示例：</strong></p><p>环境搭建：</p><ol><li>分别建3个实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫叫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗叫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>applicationContext.xml：当前是在xml中显式装配</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Cat"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"hbp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><h4 id="ByName自动装配"><a href="#ByName自动装配" class="headerlink" title="ByName自动装配"></a>ByName自动装配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Cat"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byName：会自动在容器上下文中查找和自己对象set方法后的值对应的beanid</span></span><br><span class="line"><span class="comment">需要保证所有bean的id唯一</span></span><br><span class="line"><span class="comment">        set方法后面的值的首字母会自动变成小写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Person"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"hbp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ByType自动装配"><a href="#ByType自动装配" class="headerlink" title="ByType自动装配"></a>ByType自动装配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Cat"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byType：会自动在容器上下文中查找和自己对象属性类型相同的bean</span></span><br><span class="line"><span class="comment">        上面的beanid可以不跟set方法后面的值保持一致，甚至可以省略，因为是按属性自动装配的</span></span><br><span class="line"><span class="comment">需要保证所有bean的class唯一</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Person"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"hbp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用注解实现自动装配方法一"><a href="#使用注解实现自动装配方法一" class="headerlink" title="使用注解实现自动装配方法一"></a>使用注解实现自动装配方法一</h4><p>使用注解前先导入约束和配置注解的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.hbp.pojo.Person"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>person实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>@Autowired</strong></p><p>直接在属性上使用即可，也可以在set方式上使用</p><p>使用Autowired我们可以不用编写set方法了，前提是你这个自动装配的属性在IOC(Spring)容器中存在，且符合名字byType</p><p>如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value=”xxx”)</p><p><strong>@Resource</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"dog1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><p>@Resource和@Autowired的区别</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired 默认通过byType的方式实现【常用】，有多人名字时，需另外加注解@Qualifier(value=”xxx”)来标识</li><li>@Resource默认先通过byName的方式实现，如果找不到名字，则通过byType实现。如果两个都找不到的情况下，就报错【常用】</li></ul><h4 id="使用注解实现自动装配方法二【推荐】"><a href="#使用注解实现自动装配方法二【推荐】" class="headerlink" title="使用注解实现自动装配方法二【推荐】"></a>使用注解实现自动装配方法二【推荐】</h4><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hbp.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于 &lt;bean id="user" class="com.hbp.pojo.User"/&gt;，使用了扫描注解的方式，就可以免去在xml配置&lt;bean&gt;的步骤</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Value属性注入：相当于&lt;property name="name" value="hbp"&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"hbp"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意区分context:component-scan标签和context:annotation-config标签</strong></p><ul><li>这两个标签有一样的作用，此外context:component-scan标签还可以扫描指定包下的类，将拥有注解的它们注册到Spring中</li><li>也就是说，如果用 <code>&lt;context:annotation-config/&gt;</code> ，我们还需要配置xml注册Bean，而使用 <code>&lt;context:component-scan /&gt;</code> 的话，注册的步骤都免了。</li><li>如果同时使用两个配置的话， <code>&lt;context:annotation-config/&gt;</code> 会被忽略掉。</li></ul><p><strong>@component衍生注解</strong></p><p>@component有几个衍生注解，我们在web开发中，会按照mvc架构分层</p><ul><li><p>dao【@Repository】</p></li><li><p>service【@Service】</p></li><li><p>controller【@Controller】</p><p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</p></li></ul><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式主要有两种：静态代理和动态代理</p><p>代理模式是SpringAOP的底层</p><p><img src="https://springimages.oss-cn-guangzhou.aliyuncs.com/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%9B%BE%E8%A7%A3.png" alt></p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>那么这里有个问题就是如果真实角色有很多方法，代理类应该也有这么多方法，这时代理角色和真实角色应该要有一种约定，所以代理类和真实角色类都应该实现同一个接口</p><p>代码步骤：</p><ol><li><p>接口(抽象角色)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        host.rent();</span><br><span class="line">        seeHost();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 附加操作：看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHost</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介带你去看房"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 房东要租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">// 代理，中介帮房东租房子，但是呢，代理角色一般会有一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line">        <span class="comment">// 你不用面对房东，直接找中介即可</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代理模式的好处：</p><ul><li>可以使真实对象的操作更加纯粹，不用去关注一些公共的业务</li><li>公共的业务就交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色；真实角色和代理角色都需要实现一样的接口，一旦接口增加方法，真实对象和代理对象都需要维护，导致代码量会翻倍，开发效率会变低。</li></ul><h4 id="静态代理加深理解"><a href="#静态代理加深理解" class="headerlink" title="静态代理加深理解"></a>静态代理加深理解</h4><p>搭建环境：</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>现在公司需要增加一个业务：在每个任务的前面给他增加一个日志。</p><p>做法是：</p><p>新增一个UserServiceProxy代理类去实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理角色：代理真实角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给userService真实对象代理</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"add"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"delete"</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"update"</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"query"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//日志方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用了"</span>+msg+<span class="string">"方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有人可能会说：直接在UserServiceImpl里的每一个方法中加一个输出语句不就行了吗？为什么要这么麻烦多加一个类</p><p>原因是：改动原来的代码在公司中是大忌！因为有可能本来好好的代码，给你改崩了，如果你使用了代理模式，则可以在不改动原来业务代码的情况下，新增新的业务，职责单一原则</p><p><img src="https://springimages.oss-cn-guangzhou.aliyuncs.com/AOP%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.png" alt></p><p>项目上线之后就会按照左边的流程跑，但是现在因为业务量增加，在原来项目的功能里增加一个日志功能，那么此时不能修改原来的代码，因为万一你一修改，原来的项目跑不动就完了。此时我们只要加一个代理就完事了，既能在不改动原有代码的情况下，新增一个功能。</p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>解决静态代理代理缺点的办法：使用动态代理。其实动态代理和静态代理的思想是不变的，动态代理和静态代理的区别就是，动态代理不用我们去手编写代理类，在运行时，通过反射机制动态的创建生成代理类。</p><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成，不是我们直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口—JDK动态代理【我们在使用】</li><li>基于类：cglib</li><li>java字节码实现：javassist</li></ul></li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h4><p>aop意为：面向切面编程。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>Spring AOP 编程的实现原理就是动态代理。使用的是JDK代理和cglib代理，比如Spring的事务使用的是aop技术，当真实对象没有实现接口时候，会使用cglib代理，实现了接口默认使用JDK代理。</p><p><img src="https://springimages.oss-cn-guangzhou.aliyuncs.com/Spring.png" alt></p><h4 id="使用Spring实现AOP"><a href="#使用Spring实现AOP" class="headerlink" title="使用Spring实现AOP"></a>使用Spring实现AOP</h4><p>【重点】使用AOP织入，需要导入一个依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式一：使用Spring的API接口</strong></p><ol><li><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detele</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实对象：service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"新增了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detele</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了一个用户"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>日志文件(新增的业务)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeLog</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//method：要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args：参数</span></span><br><span class="line">    <span class="comment">//target：目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">"的"</span> + method.getName() + <span class="string">"被执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//returnValue：返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了"</span>+method.getName()+<span class="string">"方法，返回结果为："</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>applicationContext中注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.hbp.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beforeLog"</span> <span class="attr">class</span>=<span class="string">"com.hbp.log.BeforeLog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.hbp.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop，需要导入aop约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        切入点：在切入点出进行新增方法</span></span><br><span class="line"><span class="comment">        expression：表达式</span></span><br><span class="line"><span class="comment">        execution(要切入的位置)：给com.hbp.service.UserServiceImpl插入一些方法 ..表示方法中任意的参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hbp.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增强：具体怎么执行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"beforeLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//动态代理 代理的是接口</span></span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>方式二：自定义来实现AOP【主要是切面定义】</strong></p><ol><li><p>自定义需要新增的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPonintCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------方法执行前--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------方法执行后--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>applicationContext中注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diy"</span> <span class="attr">class</span>=<span class="string">"com.hbp.diy.DiyPonintCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面，ref要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hbp.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知：即方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><p><strong>方式三：使用注解实现</strong></p><ol><li>注册bean和开启注解</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"annotationPointCut"</span> <span class="attr">class</span>=<span class="string">"com.hbp.diy.AnnotationPointCut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>自定义切面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标注这个类为一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.hbp.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"===方法执行前==="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.hbp.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"===方法执行后==="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><h2 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h2><ol><li><p>编写数据源配置</p></li><li><p>sqlSessionFactory</p></li><li><p>sqlSessionTemplate【都写在spring-dao.xml中，mybatis-config.xml最好不要省略】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource:使用Spring的数据源替换Mybatis的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"6666"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mysql配置文件:即与mybatis-config.xml连接起来了。在mybatis-config.xml中定义的东西，可以省略，因为在这里也能干--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以在这里绑定mapper了--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="mapperLocations" value="classpath:com/hbp/mapper/*.xml"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate：就是我们使用的sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>需要给接口加实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我们的所有操作，在原来都是用sqlSession来执行，现在都是用SqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将自己写的实现类，注入到Spring中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.hbp.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-dao.xml"</span>);</span><br><span class="line">    UserMapper mapper = context.getBean(<span class="string">"userMapper"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUsers();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结合A0P实现事务的织入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务通知：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给那些方法配置事务--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的传播特件：new propagation= 默认方式为REQUIRED--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hbp.mapper.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="2021/01/28/Git/"/>
      <url>2021/01/28/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Git 是一个免费的、开源的<strong>分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种项目。</p><p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><p>也就是我们开发过程要经历的‘版本迭代’ ，每一次更新都会有一个新的版本，那么新的版本和旧的版本之间要有个权衡，要保留新的版本，但是旧的版本又不能直接delete掉。这个时候我们就希望有个版本管理器来帮助我们管理每一次的版本迭代</p><p>简单说就是用于管理多人协同开发项目的技术。</p><h3 id="为什么要使用版本控制"><a href="#为什么要使用版本控制" class="headerlink" title="为什么要使用版本控制"></a>为什么要使用版本控制</h3><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>比如：你们工作还是学习过程中，都会经历的以下阶段，一般我们是不基于当前版本进行修改，而是会复制一份副本进行修改，因为我们不能确定我们修改的版本是越改越好的，说不定你改的还不如上一版。</p><table><thead><tr><th>名称</th></tr></thead><tbody><tr><td>项目解决方案</td></tr><tr><td>项目解决方案改01</td></tr><tr><td>项目解决方案改02</td></tr><tr><td>项目解决方案完成版01</td></tr><tr><td>项目解决方案完成版02</td></tr><tr><td>项目解决方案最终版01</td></tr><tr><td>项目解决方案最终版02</td></tr><tr><td>项目解决方案最最终版01</td></tr><tr><td>项目解决方案最最最终版01</td></tr><tr><td>项目解决方案最最最终版绝不修改版01</td></tr><tr><td>项目解决方案最最最终版绝不修改版修改就辍学版01</td></tr><tr><td>遗书</td></tr></tbody></table><p>因此 ，多人开发必须使用版本控制！</p><h3 id="常见版本控制工具"><a href="#常见版本控制工具" class="headerlink" title="常见版本控制工具"></a>常见版本控制工具</h3><ol><li><p>集中式版本控制 </p><p>CVS、SVN、VSS</p><p>所有的版本数据都保存在一个主服务器上，协同开发者从主服务器上同步更新或上传自己的修改。那么这时候就会有个问题：所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。</p><p><img src="https://gitimagess.oss-cn-guangzhou.aliyuncs.com/%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png" alt></p></li><li><p>分布式版本控制</p><p> Git</p><p>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交(commit)，切换分支。只需在连网时推送(push)到相应的服务器或其他用户那里。由于每个用户基本上都具有主服务器的完整备份，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:</p><ol><li><p>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</p></li><li><p>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</p></li></ol><p><img src="https://gitimagess.oss-cn-guangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png" alt></p></li></ol><h2 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h2><p>Git拥有两套版本库，本地库和远程库</p><h3 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h3><p>Git本地有三个工作区域：工作目录或叫工作区（Working Directory）、暂存区(Stage/Index)、资源库或叫本地库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="https://gitimagess.oss-cn-guangzhou.aliyuncs.com/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.jpg" alt></p><ul><li>Workspace：工作区，就是你平时存放项目代码的磁盘位置，一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</li><li>Index / Stage：暂存区，或者叫待提交更新区，用于临时存放你的改动，在提交进入repo之前，我们可以把所有的更新放在暂存区。事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Local Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote Repository：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>Git基本工作流程：</p><ul><li>git clone：将远程的Master分支代码克隆到本地仓库</li><li>git checkout：切出分支出来开发</li><li>git add：将文件加入库跟踪区</li><li>git commit：将库跟踪区改变的代码提交到本地代码库中</li><li>git push：将本地仓库中的代码提交到远程仓库</li></ul><h3 id="Git-和代码托管中心"><a href="#Git-和代码托管中心" class="headerlink" title="Git 和代码托管中心"></a>Git 和代码托管中心</h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。 </p><p><strong>局域网：</strong>GitLab</p><p><strong>互联网：</strong>GitHub（外网）、Gitee 码云（国内网站）</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>Git的工作流程一般是这样的：</p><ol><li><p>在工作目录中添加、修改文件；</p></li><li><p>将需要进行版本管理的文件放入暂存区域（git add .）；</p></li><li><p>将暂存区域的文件提交到git本地仓库(git commit)。一旦提交，它就会形成历史版本，你的代码就删不掉了，除非把整个项目的目录删掉</p></li><li><p>把文件从本地仓库推送到远程仓库(git push)。</p></li></ol><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)，下面会进行详细介绍</p><h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户邮箱</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr><tr><td>#### 设置用户签名(用户名+密码)</td><td></td></tr></tbody></table><p>当你安装Git后首先要做的事情是设置你的用户名称和 E-mail 地址。</p><p>基本语法（有没有双引号也是可以的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xxxxx"</span>    <span class="comment"># 用户名称</span></span><br><span class="line">git config --global user.email <span class="string">"xxxxx"</span>   <span class="comment"># 邮箱，git不会验证这个邮箱是否存在</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。<strong>Git 首次安装必须设置一下用户签名，否则无法提交代码</strong>，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中。</p><p><strong>【注意】：</strong>这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系</p><h4 id="初始化本地库-创建本地库"><a href="#初始化本地库-创建本地库" class="headerlink" title="初始化本地库(创建本地库)"></a>初始化本地库(创建本地库)</h4><ol><li><p>创建全新的仓库</p><p>创建全新的仓库，需要用Git管理的项目的根目录执行：</p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> F:/git/git-demo/.git/</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ ll</span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ ll -a <span class="comment"># 查看隐藏文件</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 1 hbp 197121 0 5月  12 14:36 ./</span><br><span class="line">drwxr-xr-x 1 hbp 197121 0 5月  12 14:36 ../</span><br><span class="line">drwxr-xr-x 1 hbp 197121 0 5月  12 14:36 .git/</span><br></pre></td></tr></table></figure><p>此时所在的文件夹就生成一个“.git”的文件，整个文件夹就会被git所托管。</p><p>一般还会创建一个<code>.gitignore</code>文件，用来忽略项目中不需要提交的文件。</p></li><li><p>克隆远程仓库</p><p>是将远程服务器上的仓库完全镜像一份至本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure></li></ol><p>   如果这里的url时https链接，则可以直接克隆，如果时ssh链接，则需要生成公钥，与远程仓库产生联系才能克隆。</p><p>以上2种方法均可以初始化本地库</p><h4 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h4><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>示例</p><p>首次查看（工作区没有任何文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master  <span class="comment"># 当前本地库在主分支</span></span><br><span class="line"></span><br><span class="line">No commits yet  <span class="comment"># 当前还没有提交过任何东西</span></span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use <span class="string">"git add"</span> to track) <span class="comment"># 没有东西需要提交</span></span><br></pre></td></tr></table></figure><h5 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h5><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked：未跟踪, 此文件在文件夹中, 但不参与版本控制. 通过git add 把状态变为Staged.</li><li>Unmodify：文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用 git rm 移出版本库, 则成为Untracked文件</li><li>Modified：文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存(staged)状态, 使用git checkout 则丢弃修改, 返回到Unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged：暂存状态，执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h4 id="新增文件（hello-txt）"><a href="#新增文件（hello-txt）" class="headerlink" title="新增文件（hello.txt）"></a><strong>新增文件（</strong>hello.txt）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim hello.txt</span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line"><span class="comment"># vim如何复制：把光标放在第一行，yy复制  p粘贴</span></span><br></pre></td></tr></table></figure><h4 id="再次查看（检测到未追踪的文件）"><a href="#再次查看（检测到未追踪的文件）" class="headerlink" title="再次查看（检测到未追踪的文件）"></a>再次查看（检测到未追踪的文件）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files: <span class="comment"># 未被追踪的文件，即还没有加入到git库中，不参与版本控制</span></span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure><h4 id="添加暂存区"><a href="#添加暂存区" class="headerlink" title="添加暂存区"></a>添加暂存区</h4><p><strong>将工作区的文件添加到暂存区</strong></p><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名   </span><br><span class="line"><span class="comment"># 或者 git add · 表示添加所有文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt. <span class="comment">#这个不用管，只是换行符问题而已</span></span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br></pre></td></tr></table></figure><p><strong>再次查看文件状态</strong></p><p>此时检测到暂存区里有新文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage) <span class="comment"># 因为当前文件存在与暂存区，所以此时可以删除，使用此命令</span></span><br><span class="line"></span><br><span class="line">        new file:   hello.txt <span class="comment"># 当前的git已经追踪到这个文件，待提交</span></span><br></pre></td></tr></table></figure><h4 id="提交到本地库"><a href="#提交到本地库" class="headerlink" title="提交到本地库"></a>提交到本地库</h4><p>将暂存区的文件提交到本地库</p><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"日志信息"</span> 文件名</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git commit <span class="string">"第一次提交"</span> hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[master (root-commit) ea46e8e] 第一次提交</span><br><span class="line"> 1 file changed, 10 insertions(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"> </span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git reflog <span class="comment"># 查看历史记录</span></span><br><span class="line">ea46e8e (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): 第一次提交 <span class="comment">#ea46e8e为提交的版本号</span></span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git <span class="built_in">log</span> <span class="comment"># 查看详细日志信息</span></span><br><span class="line">commit ea46e8e558982a6803a2ee8483eda2d1d7ad5620 (HEAD -&gt; master) <span class="comment">#完整版本号</span></span><br><span class="line">Author: huangbp &lt;347070556@qq.com&gt;</span><br><span class="line">Date:   Wed May 12 15:14:12 2021 +0800</span><br><span class="line"></span><br><span class="line">    第一次提交</span><br></pre></td></tr></table></figure><h4 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim hello.txt</span><br><span class="line">hello git! 2222222222</span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git! </span><br><span class="line">hello git!</span><br></pre></td></tr></table></figure><h5 id="查看状态（检测到工作区有文件被修改）"><a href="#查看状态（检测到工作区有文件被修改）" class="headerlink" title="查看状态（检测到工作区有文件被修改）"></a>查看状态（检测到工作区有文件被修改）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git add .</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git commit -m <span class="string">"第二次提交"</span> hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[master fdfe7c3] 第二次提交</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git reflog</span><br><span class="line">fdfe7c3 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: 第二次提交 <span class="comment">#此时指针是指向第二个版本的</span></span><br><span class="line">ea46e8e HEAD@&#123;1&#125;: commit (initial): 第一次提交</span><br></pre></td></tr></table></figure><p>但是在文件夹中我们可以看到还只是一个文件而已。因为git控制版本不是用副本的</p><h4 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h4><p>查看历史版本</p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog <span class="comment">#查看版本信息</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看版本详细信息</span></span><br></pre></td></tr></table></figure><h4 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h4><p>想要回到以前得版本</p><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello git 22222222222</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git reflog</span><br><span class="line">fdfe7c3 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: 第二次提交</span><br><span class="line">ea46e8e HEAD@&#123;1&#125;: commit (initial): 第一次提交</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git reset --hard ea46e8e</span><br><span class="line">HEAD is now at ea46e8e 第一次提交</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git reflog</span><br><span class="line">ea46e8e (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to ea46e8e</span><br><span class="line">fdfe7c3 HEAD@&#123;1&#125;: commit: 第二次提交</span><br><span class="line">ea46e8e (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): 第一次提交</span><br></pre></td></tr></table></figure><p>我们可以打开hello.txt看里面的内容发现222…已经没有了。当然也可以变回来</p><p>还可以在.git\refs\heads中的master目前中查看当前HEAD指针指向的信息</p><p><strong>Git 切换版本，底层其实是移动 HEAD 指针</strong></p><h3 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h3><p>Git的主打特性</p><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p><h4 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h4><p>同时并行推进多个功能开发，提高开发效率。</p><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><ul><li>主分支<ul><li>master分支：存放随时可供生产环境中的部署的代码</li><li>develop分支：存放当前最新开发成果的分支，当代码足够稳定时可以合并到master分支上去。</li></ul></li><li>辅助分支<ul><li>feature分支：开发新功能使用，最终合并到develop分支或抛弃掉</li><li>release分支：做小的缺陷修正、准备发布版本所需的各项说明信息</li><li>hotfix分支：代码的紧急修复工作</li></ul></li></ul><p><img src="https://gitimagess.oss-cn-guangzhou.aliyuncs.com/%E5%88%86%E6%94%AF%E5%9B%BE.png" alt></p><h4 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h4><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch -v  或者  git branch</td><td>查看所有本地分支</td></tr><tr><td>git branch -r</td><td>查看所有远程分支</td></tr><tr><td>git branch 分支名</td><td>创建分支（但依然停留在当前分支）</td></tr><tr><td>git branch -b 分支名</td><td>新建一个分支，并切换到该分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td></tr><tr><td>git push origin –delete [branch-name]</td><td>删除远程分支</td></tr></tbody></table><h5 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h5><p>基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">* master ea46e8e 第一次提交</span><br></pre></td></tr></table></figure><h5 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h5><p>基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git branch hot-fix</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">  hot-fix ea46e8e 第一次提交 <span class="comment"># 刚创建的新的分支，并将主分支 master的内容复制了一份</span></span><br><span class="line">* master  ea46e8e 第一次提交 <span class="comment"># *代表当前所在的分区</span></span><br></pre></td></tr></table></figure><h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><p>基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">'hot-fix'</span></span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ git status</span><br><span class="line">On branch hot-fix</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ git status</span><br><span class="line">On branch hot-fix</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ git commit -m <span class="string">"hot-fix第一次提交"</span> hello.txt</span><br><span class="line">[hot-fix 06100d6] hot-fix第一次提交</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br></pre></td></tr></table></figure><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line"><span class="comment"># 在 master分支上合并 hot-fix 分支</span></span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git merge hot-fix</span><br><span class="line">Updating ea46e8e..06100d6</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br></pre></td></tr></table></figure><h5 id="合并分支-冲突合并-参照文档进行修改"><a href="#合并分支-冲突合并-参照文档进行修改" class="headerlink" title="合并分支(冲突合并) 参照文档进行修改"></a>合并分支(冲突合并) 参照文档进行修改</h5><p>冲突产生的原因：</p><p>合并分支时，两个分支在<strong>同一个文件的同一个位置</strong>有两套完全不同的修改。Git 无法替我们决定使用哪一个。必须<strong>人为决定</strong>新代码内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git master modify</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git commit -m <span class="string">"master test"</span> hello.txt</span><br><span class="line">[master fc5515c] master <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">'hot-fix'</span></span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ vim hello.txt</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git hot-fix modify</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ git commit -m <span class="string">"hot-fix test"</span> hello.txt</span><br><span class="line">[hot-fix 04ce3f3] hot-fix <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> </span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git merge hot-fix</span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master|MERGING)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">"git commit"</span>)</span><br><span class="line">  (use <span class="string">"git merge --abort"</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">        both modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master|MERGING)</span><br><span class="line">$ vim hello.txt</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  <span class="comment">#当前分支代码</span></span><br><span class="line">hello git master modify</span><br><span class="line">=======</span><br><span class="line">hello git hot-fix modify</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">在上述基础上删除代码</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git hot-fix modify</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master|MERGING)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master|MERGING)</span><br><span class="line">$ git commit -m <span class="string">"merge test"</span> hello.txt <span class="comment"># 注意：此时使用 git commit 命令时不能带文件名</span></span><br><span class="line">fatal: cannot <span class="keyword">do</span> a partial commit during a merge.</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master|MERGING)</span><br><span class="line">$ git commit -m <span class="string">"merge test"</span></span><br><span class="line">[master 8db212f] merge <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git hot-fix modify</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (master)</span><br><span class="line">$ git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">'hot-fix'</span></span><br><span class="line"></span><br><span class="line">hbp@DESKTOP-20M05UN MINGW64 /f/git/git-demo (hot-fix)</span><br><span class="line">$ cat hello.txt <span class="comment">#只会修改你分支合并的内容</span></span><br><span class="line">hello git 55555</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git hot-fix modify</span><br><span class="line">hello git</span><br></pre></td></tr></table></figure><p>master、hot-fix 其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD 决定的。所以创建分支的本质就是多创建一个指针。</p><p>HEAD 如果指向 master，那么我们现在就在 master 分支上。</p><p>HEAD 如果执行 hotfix，那么我们现在就在 hotfix 分支上。</p><p>所以切换分支的本质就是移动 HEAD 指针。</p><h3 id="本地仓库简单的运行流程"><a href="#本地仓库简单的运行流程" class="headerlink" title="本地仓库简单的运行流程"></a>本地仓库简单的运行流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">hbp@hbp-PC MINGW64 ~/Desktop/gittest</span><br><span class="line">$ git init  <span class="comment"># 创建本地仓库</span></span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> C:/Users/hbp/Desktop/gittest/.git/</span><br><span class="line">hbp@hbp-PC MINGW64 ~/Desktop/gittest (master)</span><br><span class="line">$ git status <span class="comment"># 检查文件状态，此时可以看出是Untracked状态</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br><span class="line">hbp@hbp-PC MINGW64 ~/Desktop/gittest (master)</span><br><span class="line">$ git add .  <span class="comment"># 提交到暂存区</span></span><br><span class="line"></span><br><span class="line">hbp@hbp-PC MINGW64 ~/Desktop/gittest (master)</span><br><span class="line">$ git status <span class="comment"># 此时状态为stage，即已暂存</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   hello.txt</span><br><span class="line">hbp@hbp-PC MINGW64 ~/Desktop/gittest (master)</span><br><span class="line">$ git commit -m <span class="string">"new file hello.txt"</span> <span class="comment"># 提交到本地仓库</span></span><br><span class="line">[master (root-commit) f10cdec] new file hello.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"></span><br><span class="line">hbp@hbp-PC MINGW64 ~/Desktop/gittest (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h2 id="github操作"><a href="#github操作" class="headerlink" title="github操作"></a>github操作</h2><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名  分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地，public库的克隆是不需要登录账号的。</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后会自动与当前本地分支直接合并</td></tr></tbody></table><p><strong>示例：</strong></p><p>首先在github上创建一个public的远程库，一般来说远程库的名字和本地的文件夹名保持一致最好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01</span><br><span class="line"><span class="comment"># 初始化本地仓库</span></span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> C:/Users/hbbbbbbbbp/Desktop/test01/.git/</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line"><span class="comment"># 查看当前所有远程地址别名</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line"><span class="comment"># 起别名</span></span><br><span class="line">$ git remote add test01 https://github.com/yellowbp/test01.git</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ git remote -v</span><br><span class="line">test01  https://github.com/yellowbp/test01.git (fetch)</span><br><span class="line">test01  https://github.com/yellowbp/test01.git (push)</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line">hello github!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来按照之前Git的流程来走</span></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ git commit -m <span class="string">"第一次推送到远程库"</span> .</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[master (root-commit) 6781fc5] 第一次推送到远程库</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常情况，因为有时候连接不上github</span></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ git push test01 master</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/yellowbp/test01.git/'</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ git push test01 master</span><br><span class="line">Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 252 bytes | 252.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">To https://github.com/yellowbp/test01.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时在github上刷新，就可以看到github的那个页面就会有所改变，因为有文件在里面了</span></span><br></pre></td></tr></table></figure><h4 id="拉取远程库内容"><a href="#拉取远程库内容" class="headerlink" title="拉取远程库内容"></a><strong>拉取远程库内容</strong></h4><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull 远程库地址别名 远程分支名</span><br></pre></td></tr></table></figure><p>示例：</p><p>我首先在github上对代码进行了修改，然后把远程库中的内容拉取到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库对于分支最新内容拉下来后与当前本地分支自动合并</span></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ git pull test01 master</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 659 bytes | 109.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/yellowbp/test01</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">   6781fc5..e685418  master     -&gt; test01/master</span><br><span class="line">Updating 6781fc5..e685418</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/test01 (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello github!</span><br><span class="line">我在github上手动修改的</span><br></pre></td></tr></table></figure><p>【<strong>注意点</strong>】</p><p>git clone 操作会帮我们自动做如下三件事：</p><ol><li>拉取代码</li><li>初始化本地库</li><li>创建别名，默认为origin</li></ol><h3 id="协作问题"><a href="#协作问题" class="headerlink" title="协作问题"></a>协作问题</h3><h4 id="团队内协作：邀请合作者"><a href="#团队内协作：邀请合作者" class="headerlink" title="团队内协作：邀请合作者"></a>团队内协作：邀请合作者</h4><p>如果需要往合作开发团队中的库里推送代码，就需要先把此人拉入同一个开发组，好比是一个群，只有进群才能聊天。但是clone是不需要拉组的</p><ol><li>登录github</li><li>点击Settings，选择Manage access</li><li>点击invite a collaborator，然后填入想要合作的人的github账号</li><li>复制邀请地址，并通过通讯软件等方式发送给该用户</li><li>被邀请的用户需要先登录github账号，然后把收到的邀请地址在地址栏中打开，点击接受邀请Accept invitiaton</li><li>成功之后，被邀请的用户可以在自己github账号上看到所加入的远程仓库。</li><li>这样就可以把修改的代码push到远程仓库了</li></ol><h4 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h4><p>一般是团队外的开发者对开源代码进行改进，他们要把修改的代码pull request给开源代码的原作者，原作者需要先进行审核后才能决定合并操作，操作如下：</p><ol><li>将远程仓库的地址复制发给邀请跨团队协作的人，或者在github的左上角搜索项目名，如果项目名太大众化，搜索结果会有很多，则需要精准搜索，格式：源代码作者的github账号/项目名</li><li>打开项目后，然后点击 Fork 将项目叉到自己的本地仓库。</li><li>改进完代码后，填写描述信息并点击左下角绿色按钮提交</li><li>接下来点击上方的 Pull request请求，并new一个新的请求，然后把需要的信息填之后，有绿的按钮点就完事了。</li><li>原作者的github上会看到有pull request请求，还可以在里面跟改进的作者进行技术交流</li><li>如果代码没有问题，可以点击 Merge pull reque 合并代码</li></ol><h3 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h3><p>我们可以看到远程仓库中还有一个 SSH 的地址，因此我们也可以使用 SSH 进行和HTTPS一样的操作。</p><p>初次使用需要我们配置SSH</p><p>具体操作如下：</p><ol><li><p>进入c盘用户目录下（~/用户/Users/.ssh），.ssh是一个隐藏文件，默认是没有的</p></li><li><p>右键选择“git bash”，运行以下命令生成.ssh 秘钥目录，输入完命令后按3次回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure></li><li><p>打开id_rsa.pub，把里面的内容全部复制</p></li><li><p>登录 GitHub，点击用户头像→Settings→SSH and GPG keys</p></li><li><p>title可不填，然后将复制的内容，在key里面粘贴</p></li><li><p>之后再往远程仓库 push 东西的时候使用 SSH 连接就不需要登录了</p></li></ol><h2 id="IDEA-集成-Git"><a href="#IDEA-集成-Git" class="headerlink" title="IDEA 集成 Git"></a>IDEA <strong>集成</strong> Git</h2><h3 id="配置忽略文件"><a href="#配置忽略文件" class="headerlink" title="配置忽略文件"></a>配置忽略文件</h3><blockquote><p><strong>忽略文件</strong></p></blockquote><p>在主目录下建立”.ignore”文件(不需要文件名)，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure><p><strong>问题1:为什么要忽略他们？</strong></p><p>与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之间的差异。</p><p><strong>问题 2：怎么忽略？</strong></p><ol><li><p>创建忽略规则文件 .ignore，这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用户目录下。</p><p>git.ignore 文件模版内容如下（基本在开发中中需要忽略的文件）：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">*.class</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*.lock</span><br><span class="line"></span><br><span class="line"><span class="comment">#Package Files</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"><span class="comment">#STS</span></span><br><span class="line">.apt_generated</span><br><span class="line">.factorypath</span><br><span class="line">.springBeans</span><br><span class="line"></span><br><span class="line"><span class="comment">#Inte11iJ IDEA</span></span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">.idea</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings/</span><br><span class="line">bin/</span><br><span class="line">*.1og </span><br><span class="line">tmp/</span><br><span class="line">target/</span><br><span class="line"></span><br><span class="line"><span class="comment">#rebel</span></span><br><span class="line">*rebe1.xml*</span><br></pre></td></tr></table></figure><ol start="2"><li>在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的用户目录中）,不过现在springboot会帮我们自动创建</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = xxx</span><br><span class="line">email = xxx@xxx.xxx</span><br><span class="line">[core]</span><br><span class="line">excludesfile = C:/Users/xx/git.ignore</span><br><span class="line"><span class="comment"># 注意：这里要使用“正斜线（/）”，不要使用“反斜线（\）”</span></span><br></pre></td></tr></table></figure><h3 id="IDEA定位Git"><a href="#IDEA定位Git" class="headerlink" title="IDEA定位Git"></a>IDEA定位Git</h3><ol><li>settings –&gt; Version Control –&gt; Git</li><li>选择自己git.exe安装目录，点击test</li></ol><h3 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h3><ol><li>VCS（version control setting）–&gt; Import into Version Control –&gt; Create Git Respository</li><li>选择要创建 Git 本地仓库的项目</li><li>创建完后我们可以发现文件变红了</li></ol><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><p>我们写的代码我们可以看到是<strong>红色</strong>的，表示未追踪状态，即未添加到暂存区，我们可以单单选择某个文件，右键选择git –&gt; add，此时我们看到文件的颜色就会变成<strong>绿色</strong>，表示已添加到暂存区。</p><p>当有多个文件的时候，我们可以直接在项目那里右键也是可以的。</p><p>对于显示<strong>蓝色</strong>的文件，表示他是修改的代码（之前已经提交过），此时可以直接提交到本地库</p><h3 id="提交到本地库-1"><a href="#提交到本地库-1" class="headerlink" title="提交到本地库"></a>提交到本地库</h3><p>大致操作如上，不同的是 是右键–&gt; Git –&gt; commit directory。</p><p>然后选择需要提交的文件，输入描述信息，直接commit即可</p><h3 id="切换-穿梭版本"><a href="#切换-穿梭版本" class="headerlink" title="切换/穿梭版本"></a>切换/穿梭版本</h3><ol><li>在 IDEA 的左下角，点击 Version Control，然后点击 Log 查看版本（如果是高版本的Idea则点击左下角的git –&gt; log）</li><li>右键选择要切换的版本，然后在菜单里点击 Checkout Revision</li></ol><h3 id="创建分支-1"><a href="#创建分支-1" class="headerlink" title="创建分支"></a>创建分支</h3><ol><li>在项目名称那里右键选择 Git，在 Repository里面，点击 Branches 按钮</li><li>填写分支名称，创建 hot-fix 分支即可。</li><li>我们可以在右下角查看到我们当前属于什么分支，并且我们也可以在右下角那里新建分支</li></ol><h3 id="切换分支-1"><a href="#切换分支-1" class="headerlink" title="切换分支"></a>切换分支</h3><ol><li>在 IDEA 窗口的右下角，选择要切换的分支后点击checkout，就可以切换到 master 分支</li><li>然后在 IDEA 窗口的右下角看到了 master，说明 master 分支切换成功</li></ol><h3 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h3><p>需求：将 hot-fix 分支合并到master分支</p><ol><li><p>首先需要切换到master分支进行操作</p></li><li><p>如果代码没有冲突，则选择hot-fix  –&gt;  Merge into Current即可，分支合并成功以后，代码自动提交，无需手动</p><p>提交本地库</p></li></ol><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>如果 master 分支和 hot-fix 分支都修改了同一行代码，在合并分支的时候就会发生冲突</p><ol><li>点击 Conflicts 框里的 Merge 按钮，进行手动合并代码。</li><li>手动合并完代码以后，点击右下角的 Apply 按钮。</li><li>代码冲突解决，自动提交本地库。</li></ol><h2 id="IDEA集成GitHub"><a href="#IDEA集成GitHub" class="headerlink" title="IDEA集成GitHub"></a>IDEA集成GitHub</h2><p>IDEA记得安装Github插件</p><h4 id="设置-GitHub-账号"><a href="#设置-GitHub-账号" class="headerlink" title="设置 GitHub 账号"></a>设置 GitHub 账号</h4><ol><li>settings –&gt; Version Control –&gt; GitHub</li><li>点击”+”，进行添加github账号，这里需要注意，如果用账号密码的话，是很难登录上去的，所以我们得用口令(token)进行登录<ol><li>去github上设置token</li><li>点击头像 –&gt; Settings –&gt; Developer settings –&gt; Personal access tokens –&gt; Generate new token</li><li>note的名字可以随便起，然后把下面的权限全部勾选上</li><li>点击Generate token，并且一定要先复制口令，因为一刷新就会没有，否则需要重建</li></ol></li></ol><h3 id="分享工程到github"><a href="#分享工程到github" class="headerlink" title="分享工程到github"></a>分享工程到github</h3><p>以下步骤等同于先在github里创建一个远程库，然后在idea clone这个远程库 然后在push</p><ol><li>VCS –&gt; Import into Version Control –&gt; Share Project on Github</li><li>输入仓库名（一般跟项目名保持一致）、别名（一般也跟项目名保持一致）、描述可不填</li></ol><h3 id="push-推送本地库到远程库"><a href="#push-推送本地库到远程库" class="headerlink" title="push 推送本地库到远程库"></a>push 推送本地库到远程库</h3><ol><li>右键项目名称 –&gt; git –&gt; Repository –&gt; push 。可以将当前分支的内容 push 到 GitHub 的远程仓库中。或者在VCS –&gt; Git –&gt; push</li><li>它默认的push是使用https的方式进行push，因为网络原因，最好将其进行修改使用SSH的方式进行<ol><li>复制库的SSH链接</li><li>点击左栏的别名，选择自定义别名（Define Remote），然后粘贴即可</li><li>点击push</li></ol></li></ol><p>【<strong>注意点</strong>】</p><p>push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的。也就是说，要想 push 成功，一定要保证本地库的版本要比远程库的版本高！因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别！如果本地的代码版本已经落后，<strong>切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送</strong>！</p><h3 id="pull-拉取远程库到本地库"><a href="#pull-拉取远程库到本地库" class="headerlink" title="pull 拉取远程库到本地库"></a><strong>pull</strong> <strong>拉取远程库到本地库</strong></h3><ol><li>右键点击项目，git –&gt; Repository 可以将远程仓库的内容 pull 到本地仓库。</li><li>勾选 Branches to merge，strategy一般选默认即可，下面的选项也不用勾选</li><li>点击pull</li></ol><p>【<strong>注意点</strong>】</p><p>注意：pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手动解决冲突的问题。</p><h3 id="clone-克隆远程库到本地"><a href="#clone-克隆远程库到本地" class="headerlink" title="clone 克隆远程库到本地"></a><strong>clone</strong> <strong>克隆远程库到本地</strong></h3><ol><li>VCS –&gt; Git –&gt; Clone 然后在远程库把https或ssh形式的url复制到此</li><li>然后就一直点，直到创建出项目</li><li>或者说 你本地的项目删除了，你可以在idea的欢迎界面点击”check out from Version Control“，然后填入url即可 </li></ol><h2 id="IDEA集成GitLab"><a href="#IDEA集成GitLab" class="headerlink" title="IDEA集成GitLab"></a>IDEA集成GitLab</h2><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。</p><p>GitLab和GitHub一样属于第三方基于Git开发的作品，免费且开源（基于MIT协议），与Github类似，</p><p>可以注册用户，任意提交你的代码，添加SSHKey等等。不同的是，<strong>GitLab</strong>是可以部署到自己的服务器</p><p><strong>上，数据库等一切信息都掌握在自己手上，适合团队内部协作开发</strong>，简单来说可把GitLab看作个人版的GitHub。</p><ol><li>安装gitlab插件</li><li>settings –&gt; Version Control –&gt; GitLab –&gt; Add New GitLab Server（添加Gitlab服务器，然后选Https的协议连接即可）</li></ol><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="使用Git进行版本控制"><a href="#使用Git进行版本控制" class="headerlink" title="使用Git进行版本控制"></a>使用Git进行版本控制</h3><h4 id="初始话本地仓库"><a href="#初始话本地仓库" class="headerlink" title="初始话本地仓库"></a>初始话本地仓库</h4><ol><li><p>打开项目所在的路径，右键git-bash</p></li><li><p>执行初始化本地仓库命令 <code>git init</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx@DESKTOP-20M05UN MINGW64 ~/Desktop/springcloudalibaba (master)</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> C:/Users/xxx/Desktop/springcloudalibaba/.git/</span><br></pre></td></tr></table></figure></li><li><p>在项目目录下创建文件文件<code>.gitignore</code>，写入需要忽视提交的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compiled class file</span></span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log file</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BlueJ files</span></span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mobile Tools for Java (J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line">**/.idea/**</span><br><span class="line">**/target/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**/*.iml</span><br><span class="line"></span><br><span class="line">*.iml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span></span><br><span class="line">hs_err_pid*</span><br></pre></td></tr></table></figure></li><li><p>然后把自己的项目放进去</p></li><li><p>在bash里，把文件提交到本地仓库，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"springcloudalibaba初始化"</span></span><br></pre></td></tr></table></figure><p>通常我们还会创建一个开发分支，由于只是个简单demo，这里就不建了。</p></li></ol><h4 id="初始化远程仓库"><a href="#初始化远程仓库" class="headerlink" title="初始化远程仓库"></a>初始化远程仓库</h4><p>这里选择用github</p><ol><li><p>登录github，新建一个公共仓库</p><p><img src="https://springcloudalibaba.oss-cn-guangzhou.aliyuncs.com/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.jpg" alt="创建一个公共的远程仓库"></p></li><li><p>新建仓库后，该仓库是没有东西的，我们需要与本地仓库进行关联，拷贝仓库地址，在本地仓库，使用命令关联远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/yellowbp/springcloudalibaba.git</span><br></pre></td></tr></table></figure></li><li><p>关联好之后，把本地生成的密钥(~/Users/.ssh/id_rsa.pub) 粘贴放到远程仓库中（settings –&gt; Deploy keys），因为出于安全考虑，Github 服务器和我们本地的通讯要求使用 SSH Key 来验证，如果本地没有生成则执行下述命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"填写自己的邮箱"</span></span><br></pre></td></tr></table></figure></li><li><p>使用命令推送本地提交到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></li></ol><p>这时候就可以看到我们的远程仓库有我们的代码了。</p><h3 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h3><p>如果远程仓库存在，我们可以直接通过clone初始化本地仓库。</p><p>clone默认是master分支</p><p>git clone 操作会帮我们自动做如下三件事：</p><ol><li>拉取代码</li><li>初始化本地库</li><li>创建别名，默认为origin</li></ol><p><strong>git-bash示例：</strong></p><p>git clone https链接 这种方式是不需要登录的。如果是ssh链接则需要添加公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/springcloudalibaba</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/yellowbp/springcloudalibaba.git</span><br><span class="line">Cloning into <span class="string">'springcloudalibaba'</span>...</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/yellowbp/springcloudalibaba.git/'</span>: Failed to connect to github.com port 443: Timed out</span><br><span class="line"></span><br><span class="line">hbbbbbbbbp@LAPTOP-2N2H5MU3 MINGW64 ~/Desktop/springcloudalibaba</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/yellowbp/springcloudalibaba.git</span><br><span class="line">Cloning into <span class="string">'springcloudalibaba'</span>...</span><br><span class="line">remote: Enumerating objects: 33, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (33/33), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (16/16), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 33 (delta 4), reused 33 (delta 4), pack-reused 0</span><br><span class="line">Receiving objects: 100% (33/33), 4.41 KiB | 904.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (4/4), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p><strong>通过工具直接clone也行</strong>：</p><p>url：远程仓库的地址</p><p>Directory：把远程仓库的项目存放到本地的哪个目录</p><p>【<strong>注意</strong>】</p><ol><li><p>如果出现443连接超时错误，一般有2个原因</p><ol><li>本地网络有问题，连接不上github，测试好网络后，多尝试几次。</li><li>如果1没问题，则有可能是你电脑开了代理，取消勾选代理服务器即可。</li></ol></li><li><p>如果出现<code>fatal: Authentication failed for &#39;xxxxxx&#39;</code></p><p>解决办法有2种：</p><ol><li><p>暴力clone：git clone https://账号:密码@gitlab.xxxxxxx</p></li><li><p>本地的用户名邮箱有问题，修改完之后，重新登录git <code>git config --system --unset credential.helper</code></p><p>如果提示</p><p>git error: could not lock config file C:/Program Files/Git/etc/gitconfig: Permission denie</p><p>就给etc文件夹或者gitconfig文件修改权限（针对系统的当前用户）</p></li></ol></li></ol><p>完成上述操作后，用Idea打开项目时，Idea便会自动识别到该项目被Git托管</p><p>一般我们克隆完之后，会进行切换分支，把远程仓库的分支checkout as 到本地仓库。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高IDEA启动速度</title>
      <link href="2021/01/12/%E6%8F%90%E9%AB%98IDEA%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/"/>
      <url>2021/01/12/%E6%8F%90%E9%AB%98IDEA%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="提高IDEA启动速度"><a href="#提高IDEA启动速度" class="headerlink" title="提高IDEA启动速度"></a>提高IDEA启动速度</h1><h3 id="1-法一：把IDEA安装到C盘"><a href="#1-法一：把IDEA安装到C盘" class="headerlink" title="1. 法一：把IDEA安装到C盘"></a>1. 法一：把IDEA安装到C盘</h3><h3 id="2-法二："><a href="#2-法二：" class="headerlink" title="2.法二："></a>2.法二：</h3><blockquote><p><strong><font size="4.5" color="black">这个VM配置信息一般不需要动，如果感觉运行IDEA比较慢，有点卡顿,此时可以适当调整配置</font></strong> </p></blockquote><p><img src="https://idaaimage.oss-cn-guangzhou.aliyuncs.com/idea%E7%9A%84bin%E7%9B%AE%E5%BD%95.png" alt></p><hr><blockquote><p><strong><font color="black">以下说明如何调整VM配置文件(此处是64位vm文件)</font></strong></p></blockquote><p><img src="https://idaaimage.oss-cn-guangzhou.aliyuncs.com/idea64%E4%BD%8Dvm%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt></p><ol><li>根据自己系统的位数，选择32位的VM配置文件或者64位的VM文件</li><li>如果32位操作系统内存不超过4G，所以没有多大的空间可以调整，建议不调整</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m</span><br><span class="line">设置初始的内存数，该值可以提高java程序的启动速度</span><br><span class="line"><span class="number">16</span>G内存的机子可以尝试调整为 -Xms521m</span><br><span class="line">-Xmx750m</span><br><span class="line">设置最大内存数，提高该值，可以减少内存Garage收集的频率，提高程序性能</span><br><span class="line"><span class="number">16</span>G内存的机子可以尝试调整为 -Xmx1500m</span><br><span class="line">-XX:ReservedCodeCacheSize=<span class="number">240</span>m</span><br><span class="line">保留代码占用的内存容量</span><br><span class="line"><span class="number">16</span>G内存的机子可以尝试调整为 <span class="number">500</span>m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="2020/03/15/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/"/>
      <url>2020/03/15/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><h2 id="一-算法种类介绍"><a href="#一-算法种类介绍" class="headerlink" title="(一)算法种类介绍"></a>(一)算法种类介绍</h2><p><font size="5"><strong>1.Kruskal</strong></font></p><ul><li>好理解</li><li>基于贪心的策略</li></ul><p><font size="5"><strong>2.Prim</strong></font></p><ul><li>跟Dijkstra很像</li></ul><h2 id="二-Kruskal算法的描述"><a href="#二-Kruskal算法的描述" class="headerlink" title="(二)Kruskal算法的描述"></a>(二)Kruskal算法的描述</h2><blockquote><p>要求以某个点出发，到达图上任意一个点，使得它们的花费是最少的</p><p>换句话来说：用最少的边让图连通(任意两点之间可以互相到达)，其实就是将多余的边去掉；并且边的总长度之和是最短的。显然，要让n个顶点连通，那么至少需要n-1条边。如果一个连通无向图不包含回路，那么这就是一棵树，其实这里就是求一个图的最小生成树</p><p>//分别为 点 点 边：<br>2 4 11<br>3 5 13<br>4 6 3<br>5 6 4<br>2 3 6<br>4 5 7<br>1 2 1<br>3 4 9<br>1 3 2</p></blockquote><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png" alt></p><br><p>现在的关键问题：如何选出这n-1条边，使得边的总长度之和最短？</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><blockquote><p>先对所有的边按照权值进行从小到大排序，用贪心的思想优先选取权值最小的边，并依次连接。若出现环则跳过此边（有环的意思是：他们有共同的根结点，用并查集来判断2个顶点是否连通，即判断2个顶点是否在同一集合），直到选择了n-1条边让整个图连通为止。</p></blockquote><ol><li>先将上述的所有边进行排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">9</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">11</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><ol start="2"><li>选择过程如下</li></ol><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%80%89%E6%8B%A9%E8%BF%87%E7%A8%8B1.png" alt></p><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%80%89%E6%8B%A9%E8%BF%87%E7%A8%8B2.png" alt></p><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%80%89%E6%8B%A9%E8%BF%87%E7%A8%8B3.png" alt></p><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%80%89%E6%8B%A9%E8%BF%87%E7%A8%8B4.png" alt></p><br><ol start="3"><li>代码如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> N , M ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Edge[] edges;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sum , count;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] parent , rank;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        M = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        edges = <span class="keyword">new</span> Edge[M];</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=N ; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;M ; i++) &#123;</span><br><span class="line">            Edge edge = <span class="keyword">new</span> Edge();</span><br><span class="line">            edge.u = sc.nextInt();</span><br><span class="line">            edge.v = sc.nextInt();</span><br><span class="line">            edge.w = sc.nextInt();</span><br><span class="line">            edges[i] = edge;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find_root</span> <span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[v] == v)</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">return</span> parent[v] = find_root(parent[v]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">union_set</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x_root = find_root(x);</span><br><span class="line">        <span class="keyword">int</span> y_root = find_root(y);</span><br><span class="line">        <span class="keyword">if</span> (x_root==y_root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rank[x_root] &lt; rank[y_root])&#123;</span><br><span class="line">                parent[x_root] = y_root;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rank[x_root] &gt; rank[y_root]) &#123;</span><br><span class="line">                parent[y_root] = x_root;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                parent[x_root] = y_root;</span><br><span class="line">                rank[y_root]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        initialise();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(edges , <span class="keyword">new</span> MyCom());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;M ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = edges[i].u;</span><br><span class="line">            <span class="keyword">int</span> y = edges[i].v;</span><br><span class="line">            <span class="keyword">if</span> (union_set(x , y)==<span class="keyword">true</span>) &#123;</span><br><span class="line">                sum = sum + edges[i].w;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count==N-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCom</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Edge o1, Edge o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.w - o2.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法模板</title>
      <link href="2020/03/15/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/03/15/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="常见算法的模板-java"><a href="#常见算法的模板-java" class="headerlink" title="常见算法的模板(java)"></a>常见算法的模板(java)</h1><blockquote><p>只给出核心代码</p></blockquote><h3 id="1-并查集-并查集"><a href="#1-并查集-并查集" class="headerlink" title="1.[并查集](# 并查集 )"></a>1.[并查集](# 并查集 )</h3><h3 id="2-线性筛素数-线性筛素数"><a href="#2-线性筛素数-线性筛素数" class="headerlink" title="2.[线性筛素数](# 线性筛素数)"></a>2.[线性筛素数](# 线性筛素数)</h3><h3 id="3-最小生成树-最小生成树"><a href="#3-最小生成树-最小生成树" class="headerlink" title="3.[最小生成树](# 最小生成树)"></a>3.[最小生成树](# 最小生成树)</h3><h3 id="4-单源最短路径-单源最短路径"><a href="#4-单源最短路径-单源最短路径" class="headerlink" title="4.[单源最短路径](# 单源最短路径)"></a>4.[单源最短路径](# 单源最短路径)</h3><h3 id="5-多源最短路径-多源最短路径"><a href="#5-多源最短路径-多源最短路径" class="headerlink" title="5.[多源最短路径](# 多源最短路径)"></a>5.[多源最短路径](# 多源最短路径)</h3><h3 id="6-全排列-全排列"><a href="#6-全排列-全排列" class="headerlink" title="6.[全排列](# 全排列)"></a>6.[全排列](# 全排列)</h3><br><hr><br><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>可以参考：<a href="https://www.luogu.com.cn/problem/P1551" target="_blank" rel="noopener">洛谷的P1551</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.并查集主要有2个函数构成：查询 和 合并</span></span><br><span class="line"><span class="comment">//查找：查询元素是否在同一个集合 or 判断一个图是否是连通图</span></span><br><span class="line"><span class="comment">//合并：合并2个不同的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 并查集 </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> N , M;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] parent , rank;<span class="comment">//parent:根结点  ； rank：树的深度(用来做优化用的)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        M = sc.nextInt();</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=N ; i++) &#123;</span><br><span class="line">            parent[i] = i;<span class="comment">//初试根结点是它本身</span></span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找：寻找该点所在集合的根结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find_root</span> <span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//路径压缩</span></span><br><span class="line">        <span class="comment">//如果parent的值是它本身，即找到了它的根结点</span></span><br><span class="line">        <span class="keyword">if</span> (parent[v]==v) <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">return</span> parent[v] = find_root(parent[v]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合并：把2个不同的集合合并</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">union_set</span> <span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x_root = find_root(x);<span class="comment">//查找x的根结点</span></span><br><span class="line">        <span class="keyword">int</span> y_root = find_root(y);<span class="comment">//查找y的根结点</span></span><br><span class="line">        <span class="keyword">if</span> (x_root==y_root)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//false：合并失败,因为它们已经在同一集合,不需要合并</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//rank数组也是起压缩路径的效果,存储的是树的深度,避免一种比较极端的情况：一棵树的深度太深导致树很长,浪费查找时间，缩小时间复杂度</span></span><br><span class="line">            <span class="keyword">if</span> (rank[x_root] &lt; rank[y_root]) &#123;</span><br><span class="line">                parent[x_root] = y_root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rank[x_root] &gt; rank[y_root]) &#123;</span><br><span class="line">                parent[y_root] = x_root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[x_root] = y_root;<span class="comment">//这里可以随便赋值哪个,因你而定</span></span><br><span class="line">                rank[y_root]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//合并成功</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       initialise();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=M ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y = sc.nextInt();</span><br><span class="line">            union_set(x ,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为了抽象,使模板更具多样性,我这里就不对P进行定义了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=P对亲戚 ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> x_root = find_root(x);</span><br><span class="line">            <span class="keyword">int</span> y_root = find_root(y);</span><br><span class="line">            <span class="keyword">if</span> (x_root==y_root)</span><br><span class="line">                System.out.println(<span class="string">"Yes"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <br><hr><br><h4 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 欧拉筛 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] primes = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];<span class="comment">//存储素数的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];<span class="comment">//判断是否是素数的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0 - 素数</span></span><br><span class="line">    <span class="comment">//-1 - 合数,即非素数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isPrime[<span class="number">0</span>] = isPrime[<span class="number">1</span>] = -<span class="number">1</span>;<span class="comment">//0和1既不是质数也不是合数</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//计数用的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPrime[i]==<span class="number">0</span>)</span><br><span class="line">                primes[++cnt] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=cnt &amp;&amp; i*primes[j]&lt;=n ; j++) &#123;</span><br><span class="line">                isPrime[i*primes[j]] = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//确保每个数只能被它的最大因数筛掉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> N , M ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Edge[] edges;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sum , count;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] parent , rank;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        M = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        edges = <span class="keyword">new</span> Edge[M];</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=N ; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;M ; i++) &#123;</span><br><span class="line">            Edge edge = <span class="keyword">new</span> Edge();</span><br><span class="line">            edge.u = sc.nextInt();</span><br><span class="line">            edge.v = sc.nextInt();</span><br><span class="line">            edge.w = sc.nextInt();</span><br><span class="line">            edges[i] = edge;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find_root</span> <span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[v] == v)</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">return</span> parent[v] = find_root(parent[v]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">union_set</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x_root = find_root(x);</span><br><span class="line">        <span class="keyword">int</span> y_root = find_root(y);</span><br><span class="line">        <span class="keyword">if</span> (x_root==y_root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rank[x_root] &lt; rank[y_root])&#123;</span><br><span class="line">                parent[x_root] = y_root;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rank[x_root] &gt; rank[y_root]) &#123;</span><br><span class="line">                parent[y_root] = x_root;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                parent[x_root] = y_root;</span><br><span class="line">                rank[y_root]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        initialise();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(edges , <span class="keyword">new</span> MyCom());<span class="comment">//先按权值的大小排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;M ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = edges[i].u;</span><br><span class="line">            <span class="keyword">int</span> y = edges[i].v;</span><br><span class="line">            <span class="keyword">if</span> (union_set(x , y)==<span class="keyword">true</span>) &#123;<span class="comment">//如果不连通，则把两边连上</span></span><br><span class="line">                sum = sum + edges[i].w;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count==N-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCom</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Edge o1, Edge o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.w - o2.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h4 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 迪达斯科算法进阶版 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> inf = <span class="number">99999999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dis , visted;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n , m , s;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Edge&gt;[] E;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        s = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        dis = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        visted = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        E = <span class="keyword">new</span> ArrayList[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(dis , inf);</span><br><span class="line">        Arrays.fill(visted , <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            E[i] = <span class="keyword">new</span> ArrayList&lt;Edge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> w = sc.nextInt();</span><br><span class="line">            E[u].add(<span class="keyword">new</span> Edge(v , w));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;Edge&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Edge&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Edge(s , <span class="number">0</span>));</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>( !queue.isEmpty() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = queue.poll().to;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (visted[u]==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visted[u] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;E[u].size() ; i++) &#123;</span><br><span class="line">                Edge temp = E[u].get(i);</span><br><span class="line">                <span class="keyword">if</span> (dis[temp.to] &gt; (dis[u] + temp.w))&#123;</span><br><span class="line">                    dis[temp.to] = (dis[u] + temp.w);</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> Edge(temp.to , dis[temp.to]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        initialise();</span><br><span class="line">        Dijkstra();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            System.out.print(dis[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> to , <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.to = to;</span><br><span class="line">        <span class="keyword">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.w - o.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h4 id="多源最短路径"><a href="#多源最短路径" class="headerlink" title="多源最短路径"></a>多源最短路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 多源最短路径 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> inf = <span class="number">99999999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i==j) map[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> map[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> w = sc.nextInt();</span><br><span class="line">            map[u][v] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        initialise();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span> ; k&lt;=n ; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (map[i][j] &gt; (map[i][k] + map[k][j])) &#123;</span><br><span class="line">                        map[i][j] = (map[i][k] + map[k][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++) &#123;</span><br><span class="line">                System.out.print(String.format(<span class="string">"%3d"</span> , map[i][j]));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4><blockquote><p>因为java中没有生成全排列的api，所以需要自己动手打，这也是个模板，到了竞赛时可以直接用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 全排列 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里以123的全排列为例，到时自行修改数组的值</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        full(arr , <span class="number">0</span>);<span class="comment">//表示从第一位开始</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//确认某一个排列的第k位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">full</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//这里可以打印出来看，比赛时，一般是在这里进行修改</span></span><br><span class="line">            <span class="comment">//实际上是一个滚动数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//选定第k位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; arr.length; i++) &#123;</span><br><span class="line">           <span class="comment">//将第i位和第k位交换</span></span><br><span class="line">           <span class="comment">//为什么要交换？</span></span><br><span class="line">           <span class="comment">//比如 ：前面已经确定了 2314 + k(5,6,7,8,9);现在要确认第k位,拿后面的数去替换</span></span><br><span class="line">   <span class="keyword">int</span> temp = arr[k];</span><br><span class="line">           arr[k] = arr[i];</span><br><span class="line">           arr[i] = temp;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//移交下一层去确认第k+1位</span></span><br><span class="line">            full(arr, k+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            temp = arr[k];</span><br><span class="line">            arr[k] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径算法</title>
      <link href="2020/03/06/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/"/>
      <url>2020/03/06/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h1><h2 id="（一）种类介绍"><a href="#（一）种类介绍" class="headerlink" title="（一）种类介绍"></a>（一）种类介绍</h2><p><font size="5"><strong>1.Floyd</strong></font></p><ul><li>弗洛伊德算法 O(n^3)</li><li>基于动态规划的思想</li><li>用于解决多源最短路径的问题，即任意两个点之间的最短路径</li><li>只有5行的核心代码</li></ul><p><font size="5"><strong>2.Dijkstra</strong></font></p><ul><li>中文译名有很多 O(nlogn)</li><li>是基于贪心的策略</li><li>不能解决负权边的问题，即权值为负数</li><li>用于解决单源最短路径的问题，即从一个点出发到各个点的最短路径</li></ul><p><font size="5"><strong>3.SPFA</strong></font></p><ul><li>不会哈哈哈</li><li>只知道是Bellman-Ford（O(nm)）算法的改进版本，一般也很少用这个算法</li></ul><h2 id="（二）-代码实现-java"><a href="#（二）-代码实现-java" class="headerlink" title="（二） 代码实现(java)"></a>（二） 代码实现(java)</h2><blockquote><p>有兴趣的小伙胖可以浏览<a href="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95%E4%B9%A6%E7%B1%8D/%5B%E5%95%8A%E5%93%88%EF%BC%81%E7%AE%97%E6%B3%95%5D.%E5%95%8A%E5%93%88%E7%A3%8A.%E6%89%AB%E6%8F%8F%E7%89%88.pdf" target="_blank" rel="noopener">啊哈算法</a>这本算法书，图文并茂且易懂</p></blockquote><h3 id="1-Floyd"><a href="#1-Floyd" class="headerlink" title="1.Floyd"></a>1.Floyd</h3><p><font size="4">具体思路：将所有节点的距离都存在一个二维数组里，由于要枚举所有的两两组合以及每一个组合的“中转点”，再进行松弛操作，所以在求单源最短路径的时候就会浪费许多空间，但在求多源最短路时，复杂度仍是O(n^3)使用很广</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folyd</span>佛洛依德算法 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> inf = <span class="number">99999999</span>;<span class="comment">//无穷大</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] E;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二维数组的初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        E = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i==j) E[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> E[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> w = sc.nextInt();</span><br><span class="line">            E[u][v] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        initialise();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过顶点k来中转，顶点k是[1,n]中1个或者多个中转点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span> ; k&lt;=n ; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (E[i][j] &gt; E[i][k] + E[k][j])</span><br><span class="line">                        E[i][j] = E[i][k] + E[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++) &#123;</span><br><span class="line">                System.out.print(String.format(<span class="string">"%4d"</span> , E[i][j]));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入：</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">12</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="number">0</span>   <span class="number">2</span>   <span class="number">5</span>   <span class="number">4</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line"><span class="number">6</span>   <span class="number">8</span>   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line"><span class="number">5</span>   <span class="number">7</span>  <span class="number">10</span>   <span class="number">0</span></span><br></pre></td></tr></table></figure><br><br><h3 id="2-Dijkstra"><a href="#2-Dijkstra" class="headerlink" title="2.Dijkstra"></a>2.Dijkstra</h3><p>具体思路（普通算法，无优化）：</p><ol><li>首先用数组dis记录源点到每个结点的最短路径，再用一个数组visted保存已经找到最短路径的点</li><li>然后，遍历dis数组选择最小值，则该值就是源点s到该值对应的顶点的最短路径，并且把该点记为已经找到最短路</li><li>此时完成一个顶点，再看这个点能否到达其它点（记为u），将dis[v]的值进行更新</li><li>不断重复上述2~3动作，将所有的点都更新到最短路径</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span>算法 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> inf = <span class="number">99999999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n , m ,s;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dis , visted;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] E;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        s = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        E = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        dis = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        visted = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i==j) E[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> E[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> w = sc.nextInt();</span><br><span class="line">            E[u][v] = w;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++)</span><br><span class="line">            dis[i] = E[s][i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            visted[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visted[s] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        initialise();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//注意这里是遍历到n-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n-<span class="number">1</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = inf;</span><br><span class="line">            <span class="comment">//每次都遍历整个数组寻找最小值,因为那个点已经是被确定是最短的点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=n ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (visted[j]==<span class="number">0</span> &amp;&amp; dis[j]&lt;min) &#123;</span><br><span class="line">                    min = dis[j];</span><br><span class="line">                    u = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        visted[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//从u这个点扩展开来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span> ; v&lt;=n ; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (E[u][v] &lt; inf) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt; dis[u] + E[u][v])</span><br><span class="line">                    dis[v] = dis[u] + E[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++ ) &#123;</span><br><span class="line">            System.out.print(dis[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入：</span></span><br><span class="line"><span class="number">6</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">12</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">9</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">13</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">15</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">8</span> <span class="number">4</span> <span class="number">13</span> <span class="number">17</span></span><br><span class="line">（意思是：从<span class="number">1</span>这个点出发 到各个点的最短距离）</span><br></pre></td></tr></table></figure><br><br><p>优化版本：</p><p>我们发现在dis数组中选择最小值时，我们可以用一些数据结构来进行优化：优先队列(即堆结构)<br>因为堆的一个妙妙的性质就是可以在nlogn的时限内满足堆顶是堆内元素的最大（小）值，之不正是我们要的嘛？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 优化版<span class="title">Dijkstra</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n , m , s;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dis , visted;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Edge&gt;[] E;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        s = sc.nextInt();</span><br><span class="line">        </span><br><span class="line">        dis = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        visted = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        E = <span class="keyword">new</span> ArrayList[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(dis , inf);</span><br><span class="line">        Arrays.fill(visted , <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">            E[i] = <span class="keyword">new</span> ArrayList&lt;Edge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> w = sc.nextInt();</span><br><span class="line">            E[u].add(<span class="keyword">new</span> Edge(v,w));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Edge&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Edge&gt;();</span><br><span class="line"></span><br><span class="line">        queue.offer(<span class="keyword">new</span> Edge(s,<span class="number">0</span>));</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> u = queue.poll().to;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (visted[u]==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visted[u] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;E[u].size() ; i++) &#123;</span><br><span class="line">                Edge temp = E[u].get(i);</span><br><span class="line">                <span class="keyword">if</span> (dis[temp.to] &gt; dis[u] + temp.w) &#123;</span><br><span class="line">                    dis[temp.to] = dis[u] + temp.w;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> Edge(temp.to , dis[temp.to]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        initialise();</span><br><span class="line"></span><br><span class="line">        dijkstra();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            System.out.print(dis[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span> <span class="params">(<span class="keyword">int</span> to , <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.to = to;</span><br><span class="line">        <span class="keyword">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.w &gt; o.w)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>当然这还不是最快的 ，还可以在输入的时候优化，不然也有可能会卡（下面只在输入时候做的优化）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 最短路径;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.StreamTokenizer;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 优化版<span class="title">Dijkstra</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StreamTokenizer st = <span class="keyword">new</span> StreamTokenizer(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n , m , s;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dis , visted;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Edge&gt;[] E;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        st.nextToken();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)st.nval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        n = nextInt();</span><br><span class="line">        m = nextInt();</span><br><span class="line">        s = nextInt();</span><br><span class="line">        </span><br><span class="line">        dis = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        visted = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        E = <span class="keyword">new</span> ArrayList[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(dis , inf);</span><br><span class="line">        Arrays.fill(visted , <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">            E[i] = <span class="keyword">new</span> ArrayList&lt;Edge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = nextInt();</span><br><span class="line">            <span class="keyword">int</span> w = nextInt();</span><br><span class="line">            E[u].add(<span class="keyword">new</span> Edge(v,w));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Edge&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Edge&gt;();</span><br><span class="line"></span><br><span class="line">        queue.offer(<span class="keyword">new</span> Edge(s,<span class="number">0</span>));</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> u = queue.poll().to;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (visted[u]==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visted[u] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;E[u].size() ; i++) &#123;</span><br><span class="line">                Edge temp = E[u].get(i);</span><br><span class="line">                <span class="keyword">if</span> (dis[temp.to] &gt; dis[u] + temp.w) &#123;</span><br><span class="line">                    dis[temp.to] = dis[u] + temp.w;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> Edge(temp.to , dis[temp.to]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        initialise();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        n = sc.nextInt();</span></span><br><span class="line"><span class="comment">//        m = sc.nextInt();</span></span><br><span class="line"><span class="comment">//        s = sc.nextInt();</span></span><br><span class="line"><span class="comment">//        initialise();</span></span><br><span class="line"><span class="comment">//        for (int i = 1 ; i&lt;=m ; i++) &#123;</span></span><br><span class="line"><span class="comment">//            int u = sc.nextInt();</span></span><br><span class="line"><span class="comment">//            int v = sc.nextInt();</span></span><br><span class="line"><span class="comment">//            int w = sc.nextInt();</span></span><br><span class="line"><span class="comment">//            E[u].add(new Edge(v,w));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        dijkstra();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++) &#123;</span><br><span class="line">            System.out.print(dis[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span> <span class="params">(<span class="keyword">int</span> to , <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.to = to;</span><br><span class="line">        <span class="keyword">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.w &gt; o.w)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记本选购指南</title>
      <link href="2019/12/16/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/"/>
      <url>2019/12/16/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记本电脑选购指南"><a href="#笔记本电脑选购指南" class="headerlink" title="笔记本电脑选购指南"></a>笔记本电脑选购指南</h1><blockquote><p><strong>这里主要讲解笔记本的主要参数：方便你自己能看懂参数，选择一款适合你自己的电脑</strong></p></blockquote><p>笔记本的参数有很多，我们把它系统化分为8个部分</p><ol><li>CPU</li><li>显卡</li><li>屏幕</li><li>内存</li><li>硬盘</li><li>接口</li><li>散热</li><li>售后</li></ol><br><h2 id="1-CPU"><a href="#1-CPU" class="headerlink" title="1.CPU"></a>1.CPU</h2><blockquote><p>简单概述：负责计算机最主要的运算</p></blockquote><p>CPU目前分为2个厂家：Intel(主导)和AMD(笔记本端很少),这里讲得是intel</p><p>目前英特尔主要也就 i3、i5、i7、i9 ，基本上来说，越高性能越强，当然新款的i5是有可能比旧款的i7要强的，所以我们还要i几看后面的参数，一般会跟有4个数字一个字母，见下图：</p><p><img src="https://laptopimage.oss-cn-beijing.aliyuncs.com/cpu%E7%B1%BB%E5%9E%8B%E8%A7%A3%E9%87%8A.png" alt></p><ul><li><p>第一位代表的是代数如果是9代表是最新的</p></li><li><p>后三位的数值，如果是在同代当中，数值越大，性能就越强，比如i7-8709G要比i7-8706G强</p></li><li><p>最后一个 字母代表他们的不同分类，后缀的不同也会影响性能：</p><ul><li>M、U、Y的后缀用于普通的办公本或轻薄本，</li><li>X、Q、H、K、HQ常用于游戏本</li><li>M、U、Y的性能虽然不强，但需要的电量少，发热少，这样一来也就不需要太大的体积散热或特别大的电源，在合适轻薄本不过了，而X、Q、H、K、HQ则相反，体积大，发热大，重量也就上去了，所以选购笔记本不是要买性能最强的，而是买最适合自己的</li><li>若想看更详细的CPU性能的对比，可以看<a href="https://laptopimage.oss-cn-beijing.aliyuncs.com/cpu%E7%B1%BB%E5%9E%8B%E8%A7%A3%E9%87%8A.png" target="_blank" rel="noopener">CPU的天梯图</a>，比如你想玩一款游戏，然后网上搜索它的最低配置要求，我们就去图上找，找到你所找的cpu以上的就能满足你那款游戏的需求了</li></ul></li></ul><br><h2 id="2-显卡"><a href="#2-显卡" class="headerlink" title="2.显卡"></a>2.显卡</h2><blockquote><p>简单概述：负责图像的处理</p></blockquote><p>显卡分为：</p><ul><li>核心(集成)显卡：<ul><li>集成在CPU上，看个视频，做个ppt，玩个lol之类的足以，还省电，轻薄本一般是集成显卡</li></ul></li><li>独立显卡<ul><li>独立出一块芯片专门负责图像处理，更好的性能。适用于玩大型游戏，动画渲染</li></ul></li></ul><p>目前来说，以英伟达的显卡为主流（Nvidia，也称N卡）。英伟达的显卡，也有着和Intel家CPU类似的命名方式，比如GTX 980，GTX970，GTX1080Ti，这里的9，代表显卡的第几代，9就是第九代，而10就是第十代。没有11代，10代的下一代是20代。而后面的8，代表性能等级，后面数字越大，性能越好。至于那个Ti，指的是显卡的性能加强版。</p><p>轻薄本常用的是MX系列：mx150或mx250：不费电，发热小，还能把体积做小，性能比大多数核显强多了；型号命令同GTX系列一样。</p><p>跟CPU一样，这里给出<a href="https://laptopimage.oss-cn-beijing.aliyuncs.com/%E6%98%BE%E5%8D%A1%E5%A4%A9%E6%A2%AF%E5%9B%BE.jpg" target="_blank" rel="noopener">显卡天梯图</a></p><br><h2 id="3-屏幕"><a href="#3-屏幕" class="headerlink" title="3.屏幕"></a>3.屏幕</h2><blockquote><p>简单概述：屏幕同样重要，因为一个多厉害的配置如果输出画面的时候屏幕不给力，体验也会很差</p></blockquote><p>屏幕有分：</p><ol><li><strong>面饭材质(推荐IPS)：</strong></li></ol><ul><li>TN：可视角度差(视觉正面才能有最好的观看效果，斜看会偏色)，色彩还原不准确</li><li>IPS：广视角屏(正侧观看效果也很好)，色彩还原准确</li></ul><ol start="2"><li><strong>色域(即色彩空间：色域低，笔记本可能只显示10中红色；而色域高的，则会显示20中红色)：</strong></li></ol><ul><li><p>DCI-P3</p></li><li><p>sRGB</p></li><li><p>NTSC（主流）</p><ul><li>45%NTSC属于比较垃圾的屏幕</li><li>72%NTSC属于不错的屏幕</li><li>90%NTSC属于不错的屏幕</li></ul></li><li><p>AdobeRGB</p></li></ul><p>他们只是不同标准而已</p><ol start="3"><li><strong>刷新率(每秒显示多少张图片)：</strong></li></ol><ul><li>最低也有60hz：看个电影，电视剧足以</li><li>120hz甚至更高（打游戏体验更好）</li></ul><ol start="4"><li><strong>分辨率(单位尺寸内像素数量)：</strong></li></ol><ul><li>1080p（1980*1080）：最低要求，因为在笔记本这么小的屏幕很难看出差别</li><li>2k(2560*1440)</li><li>4k</li></ul><ol start="5"><li><strong>屏幕的大小和尺寸</strong></li></ol><ul><li>轻薄本基本是14寸以内的</li><li>游戏本则15.6寸左右</li></ul><br><h2 id="4-内存"><a href="#4-内存" class="headerlink" title="4.内存"></a>4.内存</h2><blockquote><p>简单概述：这里的内存，不是通常所说的能装多少东西，而是有多少内存用于等待接收指令运行，内存大同时开很多程序都不会卡</p></blockquote><p>内存有分：</p><ul><li>ddr3</li><li>ddr4：（推荐）</li></ul><p>内存大小：</p><ul><li>4G ：看个视频，做个ppt足以</li><li>8G：目前主流，能保证在未来三年内不用升级也能完成这个需求</li><li>16G：大型游戏，视频后期剪辑之类的，建议16G</li></ul><p>内存是可以自行更换的，但要注意是不是板载内存：焊死在主板上的不能自行拆卸更换，一般轻薄本都这样干</p><br><h2 id="5-硬盘"><a href="#5-硬盘" class="headerlink" title="5.硬盘"></a>5.硬盘</h2><p><strong>5.1、硬盘分有2中：</strong></p><ul><li><p>固态硬盘(SSD)：</p><ul><li>优点：由于是内存颗粒加主控构成的，所以没有磁头，体积特小，速度特快</li><li>缺点：价格贵</li></ul></li><li><p>机械硬盘(HHD)</p><ul><li>优点：价格便宜</li><li>缺点：体积大，读取速度慢，承受撞击容易造成数据损坏</li></ul></li></ul><p><strong>5.2、优劣：SSD vs HDD</strong></p><ul><li>SSD比HDD更快。</li><li>SSD更不容易坏，因为HDD内部是机械结构，装机晃动都有可能损坏它。</li><li>HDD价格更便宜。</li><li>SSD更安静，更省电；因为HDD的机械机构，导致它的声音更大，发热更大。</li><li>HDD更适合冷存储存；SSD长时间不通电，存储信息的最小单元电子会丢失，导致数据丢失，一般建议每年至少通一次电。而HDD可以不通电时间更长，但最终结果还是会丢失。</li></ul><p><strong>5.3、闪存颗粒</strong></p><p>很多朋友买固态只看容量和速度，很容易就踩到了闪存颗粒这个坑</p><p>闪存颗粒不断升级迭代，依次是：SLC、MLC、TLC、QLC；    QLC是最新技术，但是最差</p><ul><li>SLC(single-levle cell)：单级单元，也就是每个晶体管放一个数据单元。所以它密度低，所以容量都比较小，但速度最快，并且使用寿命非常长，但是因为太贵了，现在基本只用在企业级存储。</li><li>MLC(multi-level cell)：多层单元，也就是每个晶体管放2个数据单元。MLC 是折中选项，它虽然一些方面不如 SLC ，但综合考虑价格、容量、寿命、速度后属于<strong>最适合个人消费者</strong>的产品，做系统盘或者大文件处理。</li><li>TLC(trinary-level cell)：三级单元，也就是每个晶体管放3个数据单元。TLC 密度更高，虽然使用了缓存技术，但速度依然不如前两个，并且寿命比前两者少了2-10倍。适合需求普通消费者，用来做系统盘、游戏盘、临时盘（U盘、移动硬盘等）都没问题。</li><li>QLC(quad-level cell)：四级单元，也就是每个晶体管放4个数据单元。个人选购时<strong>不推荐</strong>用这种闪存颗粒。QLC的闪存颗粒拥有比TLC更高的存数密度，同时成本也比TLC更低，所以它的优势便是容量更大和价格更便宜，但是稳定性差，速度最慢，也有用户称之为技术倒退，但对于厂商来说，是个挣钱的好机会。也可能是未来的趋势，固态硬盘走向大容量廉价时代。</li></ul><p><strong>5.4、颗粒品质</strong></p><p>目前出名质量有保证的厂商有：三星、海力士、东芝（闪迪）、镁光、因特尔</p><p><strong>5.5、选购建议</strong></p><p>一般来说，选用固态+机械的组合，系统和常用的软件放进固态，文件啥的放机械；但一些轻薄本为了体积考虑，都不配备机械硬盘</p><br><h2 id="6-接口"><a href="#6-接口" class="headerlink" title="6.接口"></a>6.接口</h2><p>接口有分4大类：</p><ul><li>充电接口</li><li>数据传输接口<ul><li>USB 要问清楚是usb几的接口，因为会影响读写速度，至少要3.0</li><li>SD读卡器(不是必需)：读相机的照片方便一些，就不需要外接读卡器了</li></ul></li><li>视频传输接口(与显示屏的连接线)<ul><li>HDMI(主流)：用的是数字信号，画面还原度高，只会有2中情况，要么无信号，要么清晰度高</li><li>VGA(老式)：用的是模拟信号，会出现画面拖尾，画面不清晰的情况</li><li>DP：专业人士才需要的接口</li></ul></li><li>音频接口</li></ul><h2 id="7-散热"><a href="#7-散热" class="headerlink" title="7.散热"></a>7.散热</h2><p>判断一款笔记本散热是否优异还是得去网上去找对应机型的消费者用户的真是反馈</p><br><h2 id="8-售后"><a href="#8-售后" class="headerlink" title="8.售后"></a>8.售后</h2><blockquote><p>很多人觉得笔记本配置好就够了，其实并不为然，对于不太会电脑的人来说，售后是一大问题，你买的不仅是笔记本，而包括一系列的售后服务，所以你买电脑也要看一下品牌的线上线下网点服务</p></blockquote><br><h2 id="9-选购参考"><a href="#9-选购参考" class="headerlink" title="9.选购参考"></a>9.选购参考</h2><blockquote><p>当然你具备了以上的基本知识，自己选购笔记本足以，</p><p>这里要注意的是：</p><ol><li>没有最好的笔记本，只有最合适自己的</li><li>性能与轻薄不能得兼，必需要有所牺牲</li><li>如果有充足的预算，那还不如买一台 台式+轻薄</li></ol></blockquote><p>神舟品牌，性价比高，但是前几年的产品大量出现故障，近些年好多了。</p><p>联想和华硕，电脑老牌厂家，价钱不便宜，但是相对可靠，故障不多。</p><p>惠普和戴尔，价钱不低，但是电脑整体完成度高，故障较少。</p><p>小米和华为，新晋电脑出品者，性价比高，工艺尚可，不过产品以轻薄和办公为主。</p><p>还有一些没说到的，就是各方面都还不错的品牌。比如，微软，宏碁，LG，都可以考虑。</p><p>苹果的话，看你预算了</p>]]></content>
      
      
      <categories>
          
          <category> 电脑硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记本选购 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序支付(前后端)</title>
      <link href="2019/12/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98/"/>
      <url>2019/12/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序支付"><a href="#微信小程序支付" class="headerlink" title="微信小程序支付"></a>微信小程序支付</h1><blockquote><p>在讲微信小程序支付之前，要说明的一点就是：小程序需要先<strong>上线</strong>了，才能去申请的。</p></blockquote><p><strong>在开发微信小程序支付的功能前，先熟悉下微信小程序支付的业务流程图：(这里的商户系统，你可以理解成你java的后台)</strong></p><p><img src="https://wxpayimage.oss-cn-shenzhen.aliyuncs.com/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg" alt></p><blockquote><p><strong>想了解详细的流程的还是要详细阅读一下</strong><a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_10&index=1" target="_blank" rel="noopener">微信官方的开发文档 </a></p></blockquote><br><blockquote><p><font size="4"><strong>那我简单讲一下小程序的支付流程:</strong></font></p><ol><li>小程序调用登录接口(wx.login)，获取到用户的openid</li><li>小程序调用java后台的支付统一下单接口后，后台会进行2次的签名并返回支付所需要的参数<ul><li>nonceStr</li><li>package</li><li>timeStamp</li><li>signType</li><li>paySign</li></ul></li><li>小程序端发起最终支付，调用微信付款wx.requestPayment(把上述的5个参数传进去)</li><li>付完款之后，便<strong>自动</strong>回调方法，返回支付结果（也就是我们平时看到的支付记录）</li></ol></blockquote><br><h2 id="一、准备需要申请的固定参数"><a href="#一、准备需要申请的固定参数" class="headerlink" title="一、准备需要申请的固定参数"></a>一、准备需要申请的固定参数</h2><ol><li>mch_id          //小程序已关联的商户号</li><li>key                 //商户密钥(需要自行<a href="https://pay.weixin.qq.com/index.php/core/home/login?return_url=%2F" target="_blank" rel="noopener">登录商户平台</a>自行设置)</li></ol><br><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><p>1小程序端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取openId</span></span><br><span class="line">   getOpenId: function(code) &#123;</span><br><span class="line">     <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">     wx.request(&#123;</span><br><span class="line">       url: <span class="string">"https://xxxx/getOpenId"</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">         code: code</span><br><span class="line">       &#125;,</span><br><span class="line">       header: &#123;</span><br><span class="line">         <span class="string">"content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">       &#125;,</span><br><span class="line">       success: function(res) &#123;</span><br><span class="line">         console.log(res)</span><br><span class="line"></span><br><span class="line">         that.setData(&#123;</span><br><span class="line">           openid: res.data.data.openid,</span><br><span class="line">           session_key: res.data.data.session_key</span><br><span class="line">         &#125;)</span><br><span class="line">         that.generateOrder(res.data.data.openid)</span><br><span class="line">       &#125;,</span><br><span class="line">       fail: function() &#123;</span><br><span class="line">         <span class="comment">// fail</span></span><br><span class="line">       &#125;,</span><br><span class="line">       complete: function() &#123;</span><br><span class="line">         <span class="comment">// complete</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><br><h4 id="1-获取openid"><a href="#1-获取openid" class="headerlink" title="1.获取openid"></a>1.获取openid</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过小程序凭证(code)进而换取用户登录态信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ApiOperation</span>(value = <span class="string">"openid"</span>, notes = <span class="string">"获取openId和sessionKey的接口"</span>)</span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/getOpenId"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getOpenId</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       String url = <span class="string">"https://api.weixin.qq.com/sns/jscode2session?appid="</span> + WxConstant.appid + <span class="string">"&amp;secret="</span> + WxConstant.secret + <span class="string">"&amp;js_code="</span> + code + <span class="string">"&amp;grant_type=authorization_code"</span>;</span><br><span class="line"></span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       String data = WxHttpUtil.sendGet(url, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       JSONObject jo = JSON.parseObject(data);</span><br><span class="line"></span><br><span class="line">       map.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">       map.put(<span class="string">"data"</span>, jo);</span><br><span class="line">       map.put(<span class="string">"msg"</span>, <span class="string">"调用成功"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br><ol start="2"><li>小程序端代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用java后台的统一下单接口。生成预订单</span></span><br><span class="line"> generateOrder: function(openid) &#123;</span><br><span class="line">   <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">   wx.request(&#123;</span><br><span class="line">     url: <span class="string">'https:/xxxxxxx/wxPay'</span>, <span class="comment">//后台请求地址</span></span><br><span class="line">     method: <span class="string">'POST'</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       openid: openid</span><br><span class="line">     &#125;,</span><br><span class="line">     header:&#123;</span><br><span class="line">       <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     success: function(res) &#123;</span><br><span class="line">       console.log(res)</span><br><span class="line">       <span class="keyword">var</span> param = &#123;</span><br><span class="line">         <span class="string">"timeStamp"</span>: res.data.timeStamp,</span><br><span class="line">         <span class="string">"package"</span>: res.data.<span class="keyword">package</span>,</span><br><span class="line">         <span class="string">"paySign"</span>: res.data.paySign,</span><br><span class="line">         <span class="string">"signType"</span>: <span class="string">"MD5"</span>,</span><br><span class="line">         <span class="string">"nonceStr"</span>: res.data.nonceStr</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//发起支付</span></span><br><span class="line">       that.pay(param);</span><br><span class="line">     &#125;,</span><br><span class="line">     fail: function(res) &#123;&#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><br><h4 id="2-小程序要调用的统一下单接口（两次的签名都在此方法中完成）"><a href="#2-小程序要调用的统一下单接口（两次的签名都在此方法中完成）" class="headerlink" title="2.小程序要调用的统一下单接口（两次的签名都在此方法中完成）"></a>2.小程序要调用的统一下单接口（两次的签名都在此方法中完成）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发起微信支付，统一下单接口，生成预订单</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> openid</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> money </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/wxPay"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">wxPay</span><span class="params">(String openid , <span class="keyword">double</span> money , HttpServletRequest request)</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//生成的32位随机字符串</span></span><br><span class="line">          String nonce_str = StringUtil.getRandomStringByLength(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//商品名称(可自拟)</span></span><br><span class="line">          String body = <span class="string">"餐价"</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//商户订单号</span></span><br><span class="line">          String out_trade_no = StringUtil.getOrderIdByUUId();</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO 这里的标价金额的单位为分！！ 比如如果price为1的话，表示1分钱，而不是1元</span></span><br><span class="line">          <span class="comment">//TODO 并且是要int类型的（微信开发文档有说明），因为下方签名的时候需要转成String类型，所以我提前转了，并截取小数点之后的位数</span></span><br><span class="line">          String price  = String.valueOf((money*<span class="number">100</span>)).substring(<span class="number">0</span>,String.valueOf((money*<span class="number">100</span>)).indexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line">          <span class="comment">//组装参数，用户生成统一下单接口的签名</span></span><br><span class="line">          Map&lt;String, String&gt; packageParams = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">          packageParams.put(<span class="string">"appid"</span>, WxConstant.appid);</span><br><span class="line">          packageParams.put(<span class="string">"body"</span>, body);</span><br><span class="line">          packageParams.put(<span class="string">"mch_id"</span>, WxConstant.mch_id);</span><br><span class="line">          packageParams.put(<span class="string">"nonce_str"</span>, nonce_str);</span><br><span class="line">          packageParams.put(<span class="string">"out_trade_no"</span>, out_trade_no);<span class="comment">//订单号</span></span><br><span class="line">          packageParams.put(<span class="string">"total_fee"</span>, price);<span class="comment">//TODO 支付金额，这边需要转成字符串类型，否则后面的签名会失败</span></span><br><span class="line">          packageParams.put(<span class="string">"spbill_create_ip"</span>, WxConstant.spbill_create_ip);</span><br><span class="line">          packageParams.put(<span class="string">"notify_url"</span>, WxConstant.notify_url);<span class="comment">//支付成功后的回调地址,用户成功支付之后，便会自动根据这个url自动回调，小程序不需要调用这个方法</span></span><br><span class="line">          packageParams.put(<span class="string">"trade_type"</span>, WxConstant.TRADETYPE);<span class="comment">//支付类型</span></span><br><span class="line">          packageParams.put(<span class="string">"openid"</span>, openid);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 把数组所有元素，按照“参数=参数值”的模式用“&amp;”字符拼接成字符串</span></span><br><span class="line">          String prestr = PayUtil.createLinkString(packageParams);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//MD5运算生成签名，这里是第一次签名，用于调用统一下单接口</span></span><br><span class="line">          String mysign = PayUtil.sign(prestr, WxConstant.key, <span class="string">"utf-8"</span>).toUpperCase();</span><br><span class="line"></span><br><span class="line">          <span class="comment">//拼接统一下单接口使用的xml数据，要将上一步生成的签名一起拼接进去</span></span><br><span class="line">          String xml = <span class="string">"&lt;xml&gt;"</span> + <span class="string">"&lt;appid&gt;"</span> + WxConstant.appid + <span class="string">"&lt;/appid&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;body&gt;"</span> + body + <span class="string">"&lt;/body&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;mch_id&gt;"</span> + WxConstant.mch_id + <span class="string">"&lt;/mch_id&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;nonce_str&gt;"</span> + nonce_str + <span class="string">"&lt;/nonce_str&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;notify_url&gt;"</span> + WxConstant.notify_url + <span class="string">"&lt;/notify_url&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;openid&gt;"</span> + openid + <span class="string">"&lt;/openid&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;out_trade_no&gt;"</span> + out_trade_no + <span class="string">"&lt;/out_trade_no&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;spbill_create_ip&gt;"</span> + WxConstant.spbill_create_ip + <span class="string">"&lt;/spbill_create_ip&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;total_fee&gt;"</span> + price + <span class="string">"&lt;/total_fee&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;trade_type&gt;"</span> + WxConstant.TRADETYPE + <span class="string">"&lt;/trade_type&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;sign&gt;"</span> + mysign + <span class="string">"&lt;/sign&gt;"</span></span><br><span class="line">                  + <span class="string">"&lt;/xml&gt;"</span>;</span><br><span class="line"></span><br><span class="line">          System.out.println(<span class="string">"调试模式_统一下单接口 请求XML数据："</span> + xml);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//调用统一下单接口，并接受返回的结果</span></span><br><span class="line">          String result = PayUtil.httpRequest(WxConstant.pay_url, <span class="string">"POST"</span>, xml);</span><br><span class="line"></span><br><span class="line">          System.out.println(<span class="string">"调试模式_统一下单接口 返回XML数据："</span> + result);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 将解析结果存储在HashMap中</span></span><br><span class="line">          Map map = PayUtil.doXMLParse(result);</span><br><span class="line"></span><br><span class="line">          String return_code = (String) map.get(<span class="string">"return_code"</span>);<span class="comment">//返回状态码</span></span><br><span class="line"></span><br><span class="line">          Map&lt;String, Object&gt; response = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();<span class="comment">//返回给小程序端需要的参数</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(return_code.equals(<span class="string">"SUCCESS"</span>))&#123;</span><br><span class="line">              String prepay_id = (String) map.get(<span class="string">"prepay_id"</span>);<span class="comment">//返回的预付单信息</span></span><br><span class="line">              response.put(<span class="string">"nonceStr"</span>, nonce_str);</span><br><span class="line">              response.put(<span class="string">"package"</span>, <span class="string">"prepay_id="</span> + prepay_id);</span><br><span class="line">              Long timeStamp = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">              response.put(<span class="string">"timeStamp"</span>, timeStamp + <span class="string">""</span>);<span class="comment">//这边要将返回的时间戳转化成字符串，不然小程序端调用wx.requestPayment方法会报签名错误</span></span><br><span class="line">              <span class="comment">//拼接签名需要的参数</span></span><br><span class="line">              String stringSignTemp = <span class="string">"appId="</span> + WxConstant.appid + <span class="string">"&amp;nonceStr="</span> + nonce_str + <span class="string">"&amp;package=prepay_id="</span> + prepay_id+ <span class="string">"&amp;signType=MD5&amp;timeStamp="</span> + timeStamp;</span><br><span class="line">              <span class="comment">//再次签名，这个签名用于小程序端调用wx.requesetPayment方法</span></span><br><span class="line">              String paySign = PayUtil.sign(stringSignTemp, WxConstant.key, <span class="string">"utf-8"</span>).toUpperCase();</span><br><span class="line"></span><br><span class="line">              response.put(<span class="string">"paySign"</span>, paySign);</span><br><span class="line">          &#125;</span><br><span class="line">          response.put(<span class="string">"signType"</span>, <span class="string">"MD5"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="3-WxConstantUtil工具类"><a href="#3-WxConstantUtil工具类" class="headerlink" title="3.WxConstantUtil工具类"></a>3.WxConstantUtil工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxConstant</span> </span>&#123;</span><br><span class="line"><span class="comment">//小程序appid</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String appid = <span class="string">"xxxxxxxxxxxxxxx"</span>;</span><br><span class="line">        <span class="comment">//小程序私钥</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String secret = <span class="string">"xxxxxxxxxxxxxxx"</span>;</span><br><span class="line">        <span class="comment">//微信支付的商户id</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String mch_id = <span class="string">"xxxxxxxxxxxxxxx"</span>;</span><br><span class="line">        <span class="comment">//微信支付的商户密钥</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String key = <span class="string">"xxxxxxxxxxxxxxx"</span>;</span><br><span class="line">        <span class="comment">//支付成功后的服务器回调url TODO 这个地方的url需要根据你实际情况来：是写你回调的接口方法的url（如我的第6点）</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String notify_url = <span class="string">"https://www.xxx.xx/xxxx/xxxx/wxNotify"</span>;</span><br><span class="line">        <span class="comment">//交易类型，小程序支付的固定值为JSAPI</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TRADETYPE = <span class="string">"JSAPI"</span>;</span><br><span class="line">        <span class="comment">//微信统一下单接口地址</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String pay_url = <span class="string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span>;</span><br><span class="line">        <span class="comment">//终端服务器公网ip地址</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String spbill_create_ip = <span class="string">"xxx.xx.xxx.xxx"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>StringUtil工具类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一定长度的随机字符串，范围0-9，a-z</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length：指定字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一定长度的随机字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandomStringByLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        String base = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> number = random.nextInt(base.length());</span><br><span class="line">            sb.append(base.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来生成不重复的订单号,一共是11位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOrderIdByUUId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> machineId = <span class="number">1</span>;<span class="comment">//最大支持1-9个集群机器部署</span></span><br><span class="line">        <span class="keyword">int</span> hashCodev = UUID.randomUUID().toString().hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hashCodev &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//有可能是负数</span></span><br><span class="line">            hashCodev = -hashCodev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//"%010d"的意思：0代表不足位数的补0，这样可以确保相同的位数，10是位数也就是要得到到的字符串长度是11，d代表数字。</span></span><br><span class="line">        <span class="keyword">return</span> machineId + String.format(<span class="string">"%010d"</span>, hashCodev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-PayUtil工具类"><a href="#4-PayUtil工具类" class="headerlink" title="4.PayUtil工具类"></a>4.PayUtil工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.SignatureException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.jdom.Document;</span><br><span class="line"><span class="keyword">import</span> org.jdom.Element;</span><br><span class="line"><span class="keyword">import</span> org.jdom.JDOMException;</span><br><span class="line"><span class="keyword">import</span> org.jdom.input.SAXBuilder;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.XMLConstants;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 需要签名的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input_charset 编码格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 签名结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String text, String key, String input_charset)</span> </span>&#123;</span><br><span class="line">        text = text + <span class="string">"&amp;key="</span> + key;</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5Hex(getContentBytes(text, input_charset));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getContentBytes(String content, String charset) &#123;</span><br><span class="line">        <span class="keyword">if</span> (charset == <span class="keyword">null</span> || <span class="string">""</span>.equals(charset)) &#123;</span><br><span class="line">            <span class="keyword">return</span> content.getBytes();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> content.getBytes(charset);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"MD5签名过程中出现错误,指定的编码集不对,您目前指定的编码集是:"</span> + charset);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 除去数组中的空值和签名参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sArray 签名参数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 去掉空值与签名参数后的新签名参数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">paraFilter</span><span class="params">(Map&lt;String, String&gt; sArray)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">if</span> (sArray == <span class="keyword">null</span> || sArray.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String key : sArray.keySet()) &#123;</span><br><span class="line">            String value = sArray.get(key);</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.equals(<span class="string">""</span>) || key.equalsIgnoreCase(<span class="string">"sign"</span>)</span><br><span class="line">                    || key.equalsIgnoreCase(<span class="string">"sign_type"</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把数组所有元素排序，并按照“参数=参数值”的模式用“&amp;”字符拼接成字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 需要排序并参与字符拼接的参数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拼接后字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createLinkString</span><span class="params">(Map&lt;String, String&gt; params)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;String&gt;(params.keySet());</span><br><span class="line">        Collections.sort(keys);</span><br><span class="line">        String prestr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keys.size(); i++) &#123;</span><br><span class="line">            String key = keys.get(i);</span><br><span class="line">            String value = params.get(key);</span><br><span class="line">            <span class="keyword">if</span> (i == keys.size() - <span class="number">1</span>) &#123;<span class="comment">// 拼接时，不包括最后一个&amp;字符</span></span><br><span class="line">                prestr = prestr + key + <span class="string">"="</span> + value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prestr = prestr + key + <span class="string">"="</span> + value + <span class="string">"&amp;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prestr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestUrl 请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMethod 请求方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStr 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpRequest</span><span class="params">(String requestUrl,String requestMethod,String outputStr)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建SSLContext</span></span><br><span class="line">        StringBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(requestUrl);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setRequestMethod(requestMethod);</span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            conn.connect();</span><br><span class="line">            <span class="comment">//往服务器端写内容</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> !=outputStr)&#123;</span><br><span class="line">                OutputStream os=conn.getOutputStream();</span><br><span class="line">                os.write(outputStr.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">                os.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 读取服务器端返回的内容</span></span><br><span class="line">            InputStream is = conn.getInputStream();</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is, <span class="string">"utf-8"</span>);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buffer.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">urlEncodeUTF8</span><span class="params">(String source)</span></span>&#123;</span><br><span class="line">        String result=source;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result=java.net.URLEncoder.encode(source, <span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析xml,返回第一级元素键值对。如果第一级元素有子节点，则此节点的值是子节点的xml数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strxml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JDOMException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">doXMLParse</span><span class="params">(String strxml)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == strxml || <span class="string">""</span>.equals(strxml)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*=============  !!!!注意，修复了微信官方反馈的漏洞，更新于2018-10-16  ===========*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            <span class="comment">// TODO 在这里更换</span></span><br><span class="line">            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            documentBuilderFactory.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            documentBuilderFactory.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            documentBuilderFactory.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            documentBuilderFactory.setFeature(<span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>, <span class="keyword">false</span>);</span><br><span class="line">            documentBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, <span class="keyword">true</span>);</span><br><span class="line">            documentBuilderFactory.setXIncludeAware(<span class="keyword">false</span>);</span><br><span class="line">            documentBuilderFactory.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            InputStream stream = <span class="keyword">new</span> ByteArrayInputStream(strxml.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            org.w3c.dom.Document doc = documentBuilderFactory.newDocumentBuilder().parse(stream);</span><br><span class="line">            doc.getDocumentElement().normalize();</span><br><span class="line">            NodeList nodeList = doc.getDocumentElement().getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; nodeList.getLength(); ++idx) &#123;</span><br><span class="line">                Node node = nodeList.item(idx);</span><br><span class="line">                <span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                    org.w3c.dom.Element element = (org.w3c.dom.Element) node;</span><br><span class="line">                    data.put(element.getNodeName(), element.getTextContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="comment">// do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取子结点的xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> children</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChildrenText</span><span class="params">(List children)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">if</span>(!children.isEmpty()) &#123;</span><br><span class="line">            Iterator it = children.iterator();</span><br><span class="line">            <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">                Element e = (Element) it.next();</span><br><span class="line">                String name = e.getName();</span><br><span class="line">                String value = e.getTextNormalize();</span><br><span class="line">                List list = e.getChildren();</span><br><span class="line">                sb.append(<span class="string">"&lt;"</span> + name + <span class="string">"&gt;"</span>);</span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty()) &#123;</span><br><span class="line">                    sb.append(getChildrenText(list));</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(value);</span><br><span class="line">                sb.append(<span class="string">"&lt;/"</span> + name + <span class="string">"&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">String2Inputstream</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(str.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ol start="3"><li>小程序发起最终支付，调用微信支付</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pay: function(param) &#123;</span><br><span class="line">     <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">     wx.requestPayment(&#123;</span><br><span class="line">       timeStamp: param.timeStamp,</span><br><span class="line">       nonceStr: param.nonceStr,</span><br><span class="line">       <span class="keyword">package</span>: param.<span class="keyword">package</span>,</span><br><span class="line">       signType: param.signType,</span><br><span class="line">       paySign: param.paySign,</span><br><span class="line">       success: function(res) &#123;</span><br><span class="line">         console.log(<span class="string">"success"</span>);</span><br><span class="line">         console.log(res);</span><br><span class="line">       &#125;,</span><br><span class="line">       fail: function(res) &#123;</span><br><span class="line">         console.log(<span class="string">"fail"</span>)</span><br><span class="line">         console.log(res);</span><br><span class="line">       &#125;,</span><br><span class="line">       complete: function(res) &#123;</span><br><span class="line">         console.log(<span class="string">"complete"</span>);</span><br><span class="line">         console.log(res)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br><h4 id="5-java的回调方法（这一步小程序不需要调用，用户支付成功之后，便会自动调用）"><a href="#5-java的回调方法（这一步小程序不需要调用，用户支付成功之后，便会自动调用）" class="headerlink" title="5.java的回调方法（这一步小程序不需要调用，用户支付成功之后，便会自动调用）"></a>5.java的回调方法（这一步小程序不需要调用，用户支付成功之后，便会自动调用）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 回调微信支付的报文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/wxNotify"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wxNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader((ServletInputStream)request.getInputStream()));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            sb.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//sb为微信返回的xml</span></span><br><span class="line">        String notityXml = sb.toString();</span><br><span class="line">        String resXml = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//        System.out.println("接收到的报文：" + notityXml);</span></span><br><span class="line"></span><br><span class="line">        Map map = PayUtil.doXMLParse(notityXml);</span><br><span class="line"></span><br><span class="line">        String returnCode = (String) map.get(<span class="string">"return_code"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"SUCCESS"</span>.equals(returnCode))&#123;</span><br><span class="line">            <span class="comment">//验证签名是否正确</span></span><br><span class="line">            Map&lt;String, String&gt; validParams = PayUtil.paraFilter(map);  <span class="comment">//回调验签时需要去除sign和空值参数</span></span><br><span class="line">            String validStr = PayUtil.createLinkString(validParams);<span class="comment">//把数组所有元素，按照“参数=参数值”的模式用“&amp;”字符拼接成字符串</span></span><br><span class="line">            String sign = PayUtil.sign(validStr, WxConstant.key, <span class="string">"utf-8"</span>).toUpperCase();<span class="comment">//拼装生成服务器端验证的签名</span></span><br><span class="line">            <span class="comment">//根据微信官网的介绍，此处不仅对回调的参数进行验签，还需要对返回的金额与系统订单的金额进行比对等</span></span><br><span class="line">            <span class="keyword">if</span>(sign.equals(map.get(<span class="string">"sign"</span>)))&#123;</span><br><span class="line">                <span class="comment">/**此处添加自己的业务逻辑代码start**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">/**此处添加自己的业务逻辑代码end**/</span></span><br><span class="line">                <span class="comment">//通知微信服务器已经支付成功</span></span><br><span class="line">                resXml = <span class="string">"&lt;xml&gt;"</span> + <span class="string">"&lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;"</span></span><br><span class="line">                        + <span class="string">"&lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;"</span> + <span class="string">"&lt;/xml&gt; "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resXml = <span class="string">"&lt;xml&gt;"</span> + <span class="string">"&lt;return_code&gt;&lt;![CDATA[FAIL]]&gt;&lt;/return_code&gt;"</span></span><br><span class="line">                    + <span class="string">"&lt;return_msg&gt;&lt;![CDATA[报文为空]]&gt;&lt;/return_msg&gt;"</span> + <span class="string">"&lt;/xml&gt; "</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(resXml);</span></span><br><span class="line"><span class="comment">//        System.out.println("微信支付回调数据结束");</span></span><br><span class="line"></span><br><span class="line">        BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(</span><br><span class="line">                response.getOutputStream());</span><br><span class="line">        out.write(resXml.getBytes());</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><blockquote><p><strong><font color="blue">微信支付就这样愉快地完成辽</font></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="2019/11/26/%E9%80%92%E5%BD%92/"/>
      <url>2019/11/26/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h3 id="困难之处："><a href="#困难之处：" class="headerlink" title="困难之处："></a>困难之处：</h3><p>递归是很多人学习编程的一个难坎，因为他与我们平常的思维方式有点不太一样，所以有点不太好理解；而递归也是后面深度优先搜索(dfs)的基础</p><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>我们知道，一个函数是可以调用一个函数的</p><p>作为特例，如果函数自己调用了自己这种情况，我们称之为递归</p><blockquote><p>在程序运行的时候，调用函是有代价的，那就是，要占用一片叫做栈(stack)的内存空间</p><p>当调用函数时，都必须要放一些数据到栈里</p><p>当函数运行结束时，这些数据会从栈里取出</p><p>因此，如果调用了很多函数，但是这些函数都不返回，栈就被塞满了，称为栈溢出(StackOverFlow)</p></blockquote><br><h3 id="怎么写递归："><a href="#怎么写递归：" class="headerlink" title="怎么写递归："></a>怎么写递归：</h3><ul><li>找重复(子问题)—-&gt;子问题(规模更小)和原问题具有相同的形式，但它的规模更小</li><li>找重复中的变化量—-&gt;作为函数的参数</li><li>找参数变化趋势—–&gt;作为递归的出口(作用是：避免栈溢出)</li></ul><p><font color="blue">注意：做递归的题目，千万不要进去，否则你会被绕晕，你只需要知道，这个递归函数是干什么的就行了，里面具体是怎么做，不需要你管——–很重要</font></p><br><h3 id="递归基础练习："><a href="#递归基础练习：" class="headerlink" title="递归基础练习："></a>递归基础练习：</h3><h4 id="1-求阶乘"><a href="#1-求阶乘" class="headerlink" title="1.求阶乘"></a>1.求阶乘</h4><h4 id="2-打印i-j"><a href="#2-打印i-j" class="headerlink" title="2.打印i-j"></a>2.打印i-j</h4><h4 id="3-数组求和"><a href="#3-数组求和" class="headerlink" title="3.数组求和"></a>3.数组求和</h4><h4 id="4-翻转字符串"><a href="#4-翻转字符串" class="headerlink" title="4.翻转字符串"></a>4.翻转字符串</h4><h4 id="5-斐波那契数列"><a href="#5-斐波那契数列" class="headerlink" title="5.斐波那契数列"></a>5.斐波那契数列</h4><h4 id="6-求最大公约数"><a href="#6-求最大公约数" class="headerlink" title="6.求最大公约数"></a>6.求最大公约数</h4><br><h5 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">recursion</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Factorial(<span class="number">5</span>));<span class="comment">//5*4*3*2*1</span></span><br><span class="line"></span><br><span class="line">    print_i_to_j(<span class="number">2</span>,<span class="number">6</span>);<span class="comment">//打印2~6</span></span><br><span class="line">    </span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    System.out.println(sumArr(arr,<span class="number">0</span>));<span class="comment">//数组求和:15</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(reverse(<span class="string">"abc"</span>,<span class="number">2</span>));<span class="comment">//翻转字符串:cba</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(fib(<span class="number">4</span>));<span class="comment">//斐波那契数列：3</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(gcd(<span class="number">16</span>,<span class="number">4</span>));<span class="comment">//最大公约数</span></span><br><span class="line">        </span><br><span class="line">        printHanoiTower(<span class="number">3</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>);<span class="comment">//汉诺塔问题：要求从A柱移到B柱</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求n的阶乘</span></span><br><span class="line"><span class="comment"> * 找重复：n*(n-1)的阶乘，求n-1的阶乘是原问题的重复(规模更小)---子问题</span></span><br><span class="line"><span class="comment"> * 找变化(作为参数)：n一直在变小</span></span><br><span class="line"><span class="comment"> * 找边界(递归出口)：当n等于1时，就结束递归</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line"><span class="keyword">if</span>( n==<span class="number">1</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//因为Factorial(n)是求n的阶乘，那么Factorial(n-1)就是求n-1的阶乘</span></span><br><span class="line"><span class="comment">//你不需要管它里层是怎么求的，你只需要知道它的功能是干嘛的就好</span></span><br><span class="line"><span class="keyword">return</span> n * Factorial(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印i-j</span></span><br><span class="line"><span class="comment"> * 找重复：我打印一部分，剩下的部分交给别人去处理，但规模更小</span></span><br><span class="line"><span class="comment"> * 找变化(作为参数)：i一直向j逼近</span></span><br><span class="line"><span class="comment"> * 找边界(递归出口)：当i==j时</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_i_to_j</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我自己做一部分</span></span><br><span class="line">System.out.print(i);</span><br><span class="line"><span class="comment">//剩下的部分交给其他人处理</span></span><br><span class="line">print_i_to_j(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对arr数组的所有元素求和</span></span><br><span class="line"><span class="comment"> * 找重复：我求一部分和，剩下的部分交给别人去处理，但规模更小</span></span><br><span class="line"><span class="comment"> * 找变化(作为参数)：数组的下标</span></span><br><span class="line"><span class="comment"> * 找边界(递归出口)：i == 数组长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumArr</span><span class="params">(<span class="keyword">int</span>[] arr , <span class="keyword">int</span> i )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==arr.length)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> arr[i]+sumArr(arr,i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 翻转字符串</span></span><br><span class="line"><span class="comment"> * 找重复：我先输出末尾的一部分，剩下的部分交给别人去处理，但规模更小</span></span><br><span class="line"><span class="comment"> * 找变化(作为参数)：数组的下标</span></span><br><span class="line"><span class="comment"> * 找边界(递归出口)：end &lt; 0 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String str,<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(end&lt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>+str.charAt(end)+reverse(str,end-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span> || i==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line"><span class="comment">//第三项的值为前两项之和，记住不要进去</span></span><br><span class="line"><span class="keyword">return</span> fib(i-<span class="number">1</span>) + fib(i-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大公约数：辗转相除法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m%n==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> gcd(m,m%n);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先把n-1个盘子以B作为辅助，移到C柱</span></span><br><span class="line"><span class="comment"> * 把n移到B柱</span></span><br><span class="line"><span class="comment"> * 再把n-1个盘子以A为辅助，移到B柱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> help</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHanoiTower</span><span class="params">(<span class="keyword">int</span> n , String from , String to , String help)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"move "</span> + n + <span class="string">" from"</span> + <span class="string">" to "</span>+to);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">printHanoiTower(n-<span class="number">1</span>,from,help,to);</span><br><span class="line">System.out.println(<span class="string">"move "</span> + n + <span class="string">" from"</span> + <span class="string">" to "</span>+to);</span><br><span class="line">printHanoiTower(n-<span class="number">1</span>,help,to,from);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><blockquote><p>先理解好递归的问题，做深搜的题目才能得心应手</p></blockquote><h3 id="深搜的经典例题："><a href="#深搜的经典例题：" class="headerlink" title="深搜的经典例题："></a>深搜的经典例题：</h3><h4 id="1-N皇后"><a href="#1-N皇后" class="headerlink" title="1.N皇后"></a>1.N皇后</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">queen</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] rec;<span class="comment">//用一维数组存即可，下标代表行号，下标所对应的的值为列号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">n = sc.nextInt();</span><br><span class="line">rec = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归出口：表示已经有一种方案了</span></span><br><span class="line"><span class="keyword">if</span>(row==n+<span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每一行都从第一列开始遍历，看能不能放</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">1</span> ; col&lt;=n ; col++) &#123;</span><br><span class="line"><span class="keyword">if</span>(check(row,col)) &#123;</span><br><span class="line">rec[row] = col;</span><br><span class="line">dfs(row+<span class="number">1</span>);</span><br><span class="line">rec[row] = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查能不能放</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;row ; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( rec[i] == col )</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>( (row - col)==i-rec[i] )<span class="comment">//正对角线(如下图解释)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>( (row + col)==i+rec[i] )<span class="comment">//副对角线(如下图解释)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以数组坐标(3，2)为例，它的正对角线的规律是（行-列）相等，而它的副对角线的规律是(列+行)相等</p></blockquote><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/n%E7%9A%87%E5%90%8E.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="2019/11/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2019/11/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划-Dynamic-Programming"><a href="#动态规划-Dynamic-Programming" class="headerlink" title="动态规划(Dynamic Programming)"></a>动态规划(Dynamic Programming)</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><ul><li>没有概念</li><li>没有概念</li><li>没有概念</li></ul><blockquote><p><strong>这里是通过讲解例题来理解dp的解题思路—选与不选</strong></p><p><font color="blue">动态规划里一类非常经典的题目：求最优解or最大值，对于这一类题目有一种很好用的方法叫：选or不选；</font></p><p><font color="blue">而代码方法的话，通常是递推求解，递归也可以，只是用得少；</font></p><p><font color="blue">1.如果是用递推(正推)求解，则是从前往后推，最终答案就是最后一个下标所对应的的值</font></p><p><font color="blue">2.如果是递归(倒推)求解，则是从后往前推</font></p></blockquote><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><h3 id="题目描述：在一个数组arr中，找出一组不相邻的数字，使得最后的和最大。"><a href="#题目描述：在一个数组arr中，找出一组不相邻的数字，使得最后的和最大。" class="headerlink" title="题目描述：在一个数组arr中，找出一组不相邻的数字，使得最后的和最大。"></a>题目描述：在一个数组arr中，找出一组不相邻的数字，使得最后的和最大。</h3><h4 id="输入输出案例"><a href="#输入输出案例" class="headerlink" title="输入输出案例"></a>输入输出案例</h4><p>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><br><p><font size="5"><strong>题解分析:</strong></font></p><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/dp%E4%BE%8B%E9%A2%981.jpg" alt></p><br><p><font size="5"><strong>java代码:</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sumMax_dp</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一：递归</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rec_opt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归出口</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) <span class="keyword">return</span> Math.max(arr[<span class="number">0</span>], arr[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//max(选,不选)</span></span><br><span class="line"><span class="keyword">int</span> value1 = rec_opt(i-<span class="number">2</span>) + arr[i];</span><br><span class="line"><span class="keyword">int</span> value2 = rec_opt(i-<span class="number">1</span>) ;</span><br><span class="line"><span class="keyword">return</span> Math.max(value1, value2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：递推</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">opt_dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] opt = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">opt[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line">opt[<span class="number">1</span>] = Math.max(arr[<span class="number">0</span>], arr[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i&lt;arr.length ; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> value1 = opt[i-<span class="number">2</span>] + arr[i];</span><br><span class="line"><span class="keyword">int</span> value2 = opt[i-<span class="number">1</span>];</span><br><span class="line">opt[i] = Math.max(value1, value2);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(opt[arr.length-<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归求解：最后一个数往前推</span></span><br><span class="line">System.out.println(rec_opt(<span class="number">4</span>));</span><br><span class="line">opt_dp();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><h4 id="题目描述：给定一个正整数s-判断一个数组arr中，是否有一组数字加起来等于s"><a href="#题目描述：给定一个正整数s-判断一个数组arr中，是否有一组数字加起来等于s" class="headerlink" title="题目描述：给定一个正整数s, 判断一个数组arr中，是否有一组数字加起来等于s"></a>题目描述：给定一个正整数s, 判断一个数组arr中，是否有一组数字加起来等于s</h4><h4 id="输入输出案列："><a href="#输入输出案列：" class="headerlink" title="输入输出案列："></a>输入输出案列：</h4><p>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><br><p><font size="5"><strong>题解分析:</strong></font></p><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/dp%E4%BE%8B%E9%A2%982.jpg" alt></p><br><br><p><font size="5"><strong>java代码:</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSet</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">9</span>;</span><br><span class="line">System.out.println(rec_subset(arr.length-<span class="number">1</span> , s));</span><br><span class="line">subset_dp(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递推</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">subset_dp</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[][] subset = <span class="keyword">new</span> <span class="keyword">boolean</span>[arr.length][s+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;arr.length ; i++) subset[i][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;=s ; i++) subset[<span class="number">0</span>][i] = <span class="keyword">false</span>;</span><br><span class="line">subset[<span class="number">0</span>][arr[<span class="number">0</span>]] = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//一排一排填过去</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;arr.length ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=s ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &gt; j) &#123;</span><br><span class="line">subset[i][j] = subset[i-<span class="number">1</span>][j];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> value1 = subset[i-<span class="number">1</span>][j-arr[i]];</span><br><span class="line"><span class="keyword">boolean</span> value2 = subset[i-<span class="number">1</span>][j];</span><br><span class="line">subset[i][j] = value1 || value2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(subset[arr.length-<span class="number">1</span>][s]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">rec_subset</span><span class="params">(<span class="keyword">int</span> i , <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> arr[<span class="number">0</span>] == s;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;s) <span class="keyword">return</span> rec_subset(i-<span class="number">1</span> , s);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> value1 = rec_subset(i-<span class="number">1</span> , s-arr[i]);</span><br><span class="line"><span class="keyword">boolean</span> value2 = rec_subset(i-<span class="number">1</span> , s);</span><br><span class="line"><span class="keyword">return</span> value1 || value2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h3 id="3、0-1背包"><a href="#3、0-1背包" class="headerlink" title="3、0-1背包"></a>3、0-1背包</h3><h4 id="题目描述：0-1背包问题：有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？"><a href="#题目描述：0-1背包问题：有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？" class="headerlink" title="题目描述：0/1背包问题：有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？"></a>题目描述：0/1背包问题：<strong>有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？</strong></h4><h4 id="输入输出案列：-1"><a href="#输入输出案列：-1" class="headerlink" title="输入输出案列："></a>输入输出案列：</h4><p>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">20</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure><p><font size="5"><strong>题解分析:</strong></font></p><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/dp_01%E8%83%8C%E5%8C%85.jpg" alt></p><p>下面是递推形式的解法：</p><ul><li>第一行和第一列均为0；<ul><li>第一行为0：当没有商品的时候，无论你背包多大，都没有商品可以装进去；</li><li>第一列为0：当背包装不下商品的时候，无论你的商品多轻，也是装不进去的</li></ul></li></ul><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/01%E8%83%8C%E5%8C%85%E4%BA%8C%E7%BB%B4%E8%A1%A8.jpg" alt></p><br><br><p><font size="5"><strong>java代码:</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 01背包问题 </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] w = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] v = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> cap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rec_knapsack</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> curCap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==-<span class="number">1</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//当第k件装不下时</span></span><br><span class="line"><span class="keyword">if</span>(w[i] &gt; curCap) &#123;</span><br><span class="line"><span class="keyword">return</span> rec_knapsack(i-<span class="number">1</span>,curCap);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//选or不选</span></span><br><span class="line"><span class="keyword">int</span> value1 = rec_knapsack(i-<span class="number">1</span>,curCap-w[i]) + v[i];</span><br><span class="line"><span class="keyword">int</span> value2 = rec_knapsack(i-<span class="number">1</span>,curCap);</span><br><span class="line"><span class="keyword">return</span> Math.max(value1, value2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递推</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">knapsack_dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//注意这里需要加个0</span></span><br><span class="line">    <span class="keyword">int</span>[] ww = &#123; <span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] vv =  &#123; <span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span> &#125;;</span><br><span class="line">        <span class="comment">//new完之后默认填充0</span></span><br><span class="line"><span class="keyword">int</span>[][] B = <span class="keyword">new</span> <span class="keyword">int</span>[ww.length][cap+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//从[1,1]这个位置开始填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;ww.length ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=cap ; j++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(ww[i] &gt; j) &#123;</span><br><span class="line">                     <span class="comment">//当第k件装不下时</span></span><br><span class="line"> B[i][j] = B[i-<span class="number">1</span>][j];</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">int</span> value1 = B[i-<span class="number">1</span>][j-ww[i]]+vv[i];</span><br><span class="line"> <span class="keyword">int</span> value2 = B[i-<span class="number">1</span>][j];</span><br><span class="line"> B[i][j] = Math.max(value1, value2);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(B[ww.length-<span class="number">1</span>][cap]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">cap = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//从后往前推</span></span><br><span class="line">System.out.println(rec_knapsack(w.length-<span class="number">1</span>,cap));</span><br><span class="line"><span class="comment">//从前往后推</span></span><br><span class="line">knapsack_dp();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是比较常规的做法，也是最好理解的做法，我们可以对其进行一个优化，我们看到上面开的数组是一个二维数据，那么我们能不能将其优化为一维数组呢(<strong>滚动数组优化</strong>) ？答案是可以的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 01背包问题滚动数组优化 </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] w = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span> &#125;;<span class="comment">//价格</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[]  v = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span> &#125;;<span class="comment">//价值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> cap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//滚动数组优化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">knapsack_dp1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[cap+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;w.length ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = cap ; j&gt;=w[i] ; j--) &#123;<span class="comment">//逆向枚举</span></span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i]) &#123;</span><br><span class="line">f[j] = Math.max(f[j], f[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(f[cap]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">cap = <span class="number">20</span>;</span><br><span class="line">knapsack_dp1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color="blue">总结：做01dp的题首先分析问题，先从最后一个数据往前推导公式(选or不选)，接下来就是根据公式写代码了</font></strong></p></blockquote><br><h3 id="4、依赖背包"><a href="#4、依赖背包" class="headerlink" title="4、依赖背包"></a>4、依赖背包</h3><h4 id="题目描述：金明的预算方案"><a href="#题目描述：金明的预算方案" class="headerlink" title="题目描述：金明的预算方案"></a>题目描述：<a href="https://www.luogu.com.cn/problem/P1064" target="_blank" rel="noopener">金明的预算方案</a></h4><p><font size="5"><strong>题解分析:</strong></font></p><p>带有附件的背包问题，它属于01背包的变式—依赖背包。</p><p>这题还好，每一个物品最多只有两个附件，那么我们在对主件进行背包的时候，决策就不再是两个了，而是五个。</p><p>还记得01背包的决策是什么吗？</p><p>1.不选，然后去考虑下一个</p><p>2.选，背包容量减掉那个重量，总值加上那个价值。</p><br><p>这个题的决策是五个，分别是：</p><p>1.不选，然后去考虑下一个</p><p>2.选且只选这个主件</p><p>3.选这个主件，并且选附件1</p><p>4.选这个主件，并且选附件2</p><p>5.选这个主件，并且选附件1和附件2.</p><br><p>我们知道，01背包的状态转移方程（已使用滚动数组优化）是f[j] = max(f[j],f[j-w[i]]+c[i])，那么，这道题的转移方程也就不难写出了。</p><p>等等，你得先判断某个选附件的决策是不是可行的，如果当前的容量还够放第一个，或第二个，或两个都选的附件，那么才能考虑转移。</p><p>我们令mainItemV数组表示某个主件的费用，而mainItemP数组表示某个主件的价值。</p><p>同样的，用二维数组annexItemV表示某个附件的费用，annexItemP表示某个附件的价值，第二维只需要0,1,2这三个数，其中第二维是0的场合表示这个主件i的附件数量，它只能等于0或1或2。第二维是1或者是2的值代表以i为主件的附件1或者附件2的相关信息（费用 价值）。这些数组的信息应该在读入时处理好，具体详见代码。</p><br><p>不选附件或只选主件的①：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] ] + mainItemP[i]*mainItemV[i]);</span><br></pre></td></tr></table></figure><p>只选附件1的②：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] -  annexItemV[i][<span class="number">1</span>] ] + mainItemP[i]*mainItemV[i]+annexItemV[i][<span class="number">1</span>]*annexItemP[i][<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>只选附件2的③：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] -  annexItemV[i][<span class="number">2</span>] ] + mainItemP[i]*mainItemV[i]+annexItemV[i][<span class="number">2</span>]*annexItemP[i][<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>选附件1和附件2的④：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] -  annexItemV[i][<span class="number">1</span>] - annexItemV[i][<span class="number">2</span>] ] + mainItemP[i]*mainItemV[i]+annexItemV[i][<span class="number">1</span>]*annexItemP[i][<span class="number">1</span>] + annexItemV[i][<span class="number">2</span>]*annexItemP[i][<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><br><h4 id="java代码"><a href="#java代码" class="headerlink" title="java代码:"></a><font size="5"><strong>java代码:</strong></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P1064</span>金明的预算方案 </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mainItemV;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mainItemP;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] annexItemV;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] annexItemP;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">N = sc.nextInt();</span><br><span class="line">m = sc.nextInt();</span><br><span class="line">mainItemV = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>];</span><br><span class="line">mainItemP = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>];</span><br><span class="line">annexItemV = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">annexItemP = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">f = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> p = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> q = sc.nextInt();</span><br><span class="line"><span class="keyword">if</span>(q==<span class="number">0</span>) &#123;</span><br><span class="line">mainItemV[i] = v;</span><br><span class="line">mainItemP[i] = p;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">annexItemV[q][<span class="number">0</span>]++;</span><br><span class="line">annexItemV[q][annexItemV[q][<span class="number">0</span>]] = v;</span><br><span class="line">annexItemP[q][annexItemV[q][<span class="number">0</span>]] = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=m ; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = N ; j&gt;=mainItemV[i] ; j--) &#123;</span><br><span class="line"><span class="comment">//不选或只选主件</span></span><br><span class="line"><span class="keyword">if</span>(j&gt;=mainItemV[i]) &#123;</span><br><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] ] + mainItemP[i]*mainItemV[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只选附件1</span></span><br><span class="line"><span class="keyword">if</span>(j&gt;=(mainItemV[i] + annexItemV[i][<span class="number">1</span>])) &#123;</span><br><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] -  annexItemV[i][<span class="number">1</span>] ] + mainItemP[i]*mainItemV[i]+annexItemV[i][<span class="number">1</span>]*annexItemP[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只选附件2</span></span><br><span class="line"><span class="keyword">if</span>(j&gt;=(mainItemV[i] + annexItemV[i][<span class="number">2</span>])) &#123;</span><br><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] -  annexItemV[i][<span class="number">2</span>] ] + mainItemP[i]*mainItemV[i]+annexItemV[i][<span class="number">2</span>]*annexItemP[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//附件1+附件2</span></span><br><span class="line"><span class="keyword">if</span>(j&gt;=(mainItemV[i] + annexItemV[i][<span class="number">1</span>] + annexItemV[i][<span class="number">2</span>])) &#123;</span><br><span class="line">f[j] = Math.max(f[j], f[ j - mainItemV[i] -  annexItemV[i][<span class="number">1</span>] - annexItemV[i][<span class="number">2</span>] ] + mainItemP[i]*mainItemV[i]+annexItemV[i][<span class="number">1</span>]*annexItemP[i][<span class="number">1</span>] + annexItemV[i][<span class="number">2</span>]*annexItemP[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(f[N]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论</title>
      <link href="2019/11/21/%E6%95%B0%E8%AE%BA/"/>
      <url>2019/11/21/%E6%95%B0%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><blockquote><p>快速幂就是快速算底数的n次幂。它是一种优化，降低计算的次数（适用于计算范围很大的数）–=二分的思想</p><p>如何减少次数？如下图：</p></blockquote><p>每一次计算我都是算它的一半，算出该结果后，我直接平方（相当于只有一次乘法）或者平方+1就完事了，这样我减少了接近一半的次数</p><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E5%BF%AB%E9%80%9F%E5%B9%821.jpg" alt></p><p><font size="4"><strong>下面讲讲常用的实现方法：用位运算来实现</strong></font></p><blockquote><p><strong>首先将幂次做一个二进制分解，举个栗子，如下图：</strong></p></blockquote><ol><li>将幂次做二进制分解</li><li>然后看二进制位所对应的值（这里以2为底作为例子，所以会出现1，2，4，8……）</li><li>先得到所有幂次，然后将有用的幂次组合起来（指：二进制当中为1的那个位为有用，0为没用）</li></ol><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E5%BF%AB%E9%80%9F%E5%B9%822.jpg" alt></p><br><blockquote><p><strong>那么问题来了 ：怎么得到有用的幂</strong></p></blockquote><ol start="4"><li>二进制一开始是一次幂，也就是二进制末尾的那一位，然后通过移位运算，把数字整个右移一位（相当于还是最后一位），然后把有用的幂次用变量ans存起来</li></ol><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E5%BF%AB%E9%80%9F%E5%B9%823.jpg" alt></p><ol start="5"><li>补充一个乘法求余的数论知识：</li></ol><ul><li>（axb）% c = （(a%c) x (b%c)）% c</li></ul><ol start="6"><li>看代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速幂取余(quick power mod)模板：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//按位与：取n二进制的最低位，判断和1是否相同，相同返回1，否则返回0，可用于判断奇偶</span></span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>&gt;<span class="number">0</span>) ans = (ans * a )%m;</span><br><span class="line">a = (a * a)%m;</span><br><span class="line">n&gt;&gt;<span class="number">1</span>;<span class="comment">//右移：//把n的二进制右移一位，即去掉其二进制位的最低位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><blockquote><p>素数又称质数。所谓素数是指除了 1 和它本身以外,不能被任何整数整除的数（1和0既非素数也非合数）</p></blockquote><ul><li>如何判断n是否是素数（2种方法）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 方法1：</span><br><span class="line"># 按照正常思路：用n去除[2,n-1],如果能够整除，说明不是素数（可优化）</span><br><span class="line"># 优化版：n不必去除[2,n-1]，只需除 [2 ~根号n]之间的每一个整数就可以了</span><br><span class="line"># 因为如果 m 能被 [2,m-1]之间任一整数整除，其二个因子必定有一个&lt;=根号n ，另一个&gt;=根号n </span><br><span class="line"># 这种办法如果用来求n以内的素数有哪些的话，那个它的时间复杂度为：O(n√n)</span><br><span class="line"># 代码：</span><br><span class="line">public static boolean isPrime(int n) &#123;</span><br><span class="line">for(int i = 2 ; i*i&lt;=n ; i++) &#123;//循环条件或者可以写成i&lt;=Math.sqrt(n)</span><br><span class="line">if(n%i==0)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 方法2：</span><br><span class="line"># 埃氏筛法（如下图解释）</span><br><span class="line"># 时间复杂度：O(NloglogN)</span><br><span class="line"># 原理：如果一个数是质数，那么它的倍数肯定不是质数，利用事先定义的线性表以打表方式标记非质，则剩下的        数就是素数。</span><br><span class="line"># 给出要筛数值的范围n，找出以内的素数。先用2去筛，即把2留下，把2的倍数剔除掉；再用下一个质数，也就是3筛，</span><br><span class="line"># 把3留下，把3的倍数剔除掉；接下去用下一个质数5筛，把5留下，把5的倍数剔除掉；不断重复下去......。</span><br><span class="line"># 美中不足的地方：一个数可能会被筛多次，比如18 同时被2和3筛</span><br><span class="line">public static void isPrime() &#123;</span><br><span class="line">visted[0] = visted[1] = -1;</span><br><span class="line">for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">if(visted[i]==-1)</span><br><span class="line">continue;</span><br><span class="line">for(int j=2*i ; j&lt;n ; j+=i)</span><br><span class="line">visted[j]=-1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E5%9F%83%E6%B0%8F%E7%AD%9B%E6%B3%95.png" alt></p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 方法3(最好的素数筛法)：</span><br><span class="line"># 欧拉筛法 ， 又名线性筛（如下表解释）</span><br><span class="line"># 时间复杂度：O(N)</span><br><span class="line"># 原理：最小质因数 × 最大因数（非自己） = 一个合数 即 合数/最大因数=最小质因数 </span><br><span class="line">       比如 <span class="number">12</span> = <span class="number">2</span>*<span class="number">6</span> 而不是<span class="number">3</span>*<span class="number">4</span> 即<span class="number">12</span>应该被<span class="number">6</span>筛掉，而不是被<span class="number">4</span>筛掉</span><br><span class="line">   欧拉筛法的关键：每个合数只被它最大的非自身的因数筛掉  </span><br><span class="line"># 这是埃氏筛法的改进，使得每个质数只被筛一次，复杂度变为 O(n)</span><br><span class="line"># 以12不被4筛掉而被6筛掉 为例：</span><br><span class="line"># 当 i 循环执行到i=4时：</span><br><span class="line"># 素数表prime中已有两个素数：2和3。</span><br><span class="line"># 此时在isPrime数组中已经被标记为-1的数（合数）是：4、6、9。</span><br><span class="line"># 因为i=4已经被标记为-1，所以我们不将4添加进素数表prime</span><br><span class="line"># 此时执行j循环：</span><br><span class="line"># 因为素数表prime中有2和3，所以预计将要被筛掉的数是4×2=8 和 4×3=12。</span><br><span class="line"># 当4×2=8 被筛掉以后，经过 i % prime[j]=0判断可以知道4 % 2=0， 此时应结束j 循环</span><br><span class="line"># 不再筛 4×3=12。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getPrime</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    isPrime = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];<span class="comment">//判断是否是质数</span></span><br><span class="line">prime = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];<span class="comment">//存质数的</span></span><br><span class="line"><span class="comment">//  0 - 是素数</span></span><br><span class="line"><span class="comment">// -1 - 非素数</span></span><br><span class="line">isPrime[<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//计数；记录prime数组中质数的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i&lt;=n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> (isPrime[i]==<span class="number">0</span>) prime[++cnt] = i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//i*prime[j]：合数</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=cnt &amp;&amp; i*prime[j]&lt;=n ; j++ ) &#123;</span><br><span class="line"><span class="comment">//把合数(不是质数)都值为-1</span></span><br><span class="line">isPrime[i*prime[j]] = -<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//关键！作用是把每个数要除以它的最大因数</span></span><br><span class="line">                <span class="comment">//比如下表中的12 </span></span><br><span class="line">                <span class="comment">//如果没有下面这句话 则12早就被4给筛掉了,本应该是给6(最大因数)给除</span></span><br><span class="line">                <span class="comment">//这样就失去了欧拉筛的优势，即与埃氏筛等价</span></span><br><span class="line">                <span class="comment">//模拟过程如上述文字</span></span><br><span class="line"><span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><em>i</em> 的值</th><th align="left">质数表(prime)</th><th align="left">筛去的数(isPrime)</th></tr></thead><tbody><tr><td align="left">2</td><td align="left">2</td><td align="left">4</td></tr><tr><td align="left">3</td><td align="left">2, 3</td><td align="left">6, 9</td></tr><tr><td align="left">4</td><td align="left">2, 3</td><td align="left">8</td></tr><tr><td align="left">5</td><td align="left">2, 3, 5</td><td align="left">10, 15, 25</td></tr><tr><td align="left">6</td><td align="left">2, 3, 5</td><td align="left">12</td></tr><tr><td align="left">7</td><td align="left">2, 3, 5, 7</td><td align="left">14, 21, 28, 35</td></tr></tbody></table><br><h3 id="最大公约数与最小公倍数"><a href="#最大公约数与最小公倍数" class="headerlink" title="最大公约数与最小公倍数"></a>最大公约数与最小公倍数</h3><blockquote><p>几个整数中公有的约数，叫做这几个数的公约数,其中最大的一个，叫做这几个数的最大公约数(辗转相除法)</p><p>几个自然数公有的倍数，叫做这几个数的公倍数，最小的一个自然数，叫做这几个数的最小公倍数（两个数的乘积/最大公约数）</p><p>规律：最大公约数*最小公倍数==原两数的乘积</p></blockquote><ul><li><p>最大公约数求解：欧几里得算法，也叫辗转相除法(如下图)</p><p>当i为0时，此时的n即为最大公约数</p></li></ul><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 最大公约数求解：</span><br><span class="line"><span class="comment">//方法一：递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m%n==<span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">return</span> gcd(n,m%n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二：迭代</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd1</span><span class="params">(<span class="keyword">int</span> m , <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m % n;</span><br><span class="line">        <span class="keyword">while</span>( i != <span class="number">0</span> )&#123;</span><br><span class="line">            m = n;</span><br><span class="line">            n = r;</span><br><span class="line">            i = m % n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># 最小公倍数求解：</span><br><span class="line">System.out.println(m*n/gcd(m,n));</span><br></pre></td></tr></table></figure><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚本实现mysql自动备份</title>
      <link href="2019/11/16/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
      <url>2019/11/16/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="脚本实现mysql自动备份"><a href="#脚本实现mysql自动备份" class="headerlink" title="脚本实现mysql自动备份"></a>脚本实现mysql自动备份</h1><h2 id="一-实现技术："><a href="#一-实现技术：" class="headerlink" title="一.实现技术："></a>一.实现技术：</h2><ul><li>windows定时任务</li><li>脚本文件(.bat)</li><li>结合winRAR压缩.sql文件</li></ul><br><h2 id="二-准备家当"><a href="#二-准备家当" class="headerlink" title="二.准备家当"></a>二.准备家当</h2><ul><li>windows服务器</li><li>mysql</li><li>winRAR</li></ul><h2 id="三-如何实现"><a href="#三-如何实现" class="headerlink" title="三.如何实现"></a>三.如何实现</h2><h4 id="1-编写备份脚本文件"><a href="#1-编写备份脚本文件" class="headerlink" title="1.编写备份脚本文件"></a>1.编写备份脚本文件</h4><blockquote><p><strong>直接把下面的命令复制到记事本上，再慢慢修改</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rem auther:根据你自己的需要取名字</span><br><span class="line">rem date:xxxx</span><br><span class="line">rem ******MySQL backup start********</span><br><span class="line"><span class="meta">@echo</span> off</span><br><span class="line">forfiles /p <span class="string">"I:\mysql backup"</span> /m backup_*.sql -d -<span class="number">1</span> /c <span class="string">"cmd /c del /f @path"</span></span><br><span class="line">    </span><br><span class="line">set <span class="string">"Ymd=%date:~0,4%%date:~5,2%%date:~8,2%0%time:~1,1%%time:~3,2%%time:~6,2%"</span></span><br><span class="line">    </span><br><span class="line"><span class="string">"H:\MySQL\MySQL Server 5.5\bin\mysqldump"</span> --opt --single-transaction=TRUE --user=你mysql用户名 --password=你mysql的密码 --host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --protocol=tcp --port=<span class="number">3306</span> --<span class="keyword">default</span>-character-set=utf8 --single-transaction=TRUE --routines --events <span class="string">"test"</span> &gt; <span class="string">"I:\mysql backup\backup_%Ymd%.sql"</span></span><br><span class="line">    </span><br><span class="line">rem <span class="string">"E:\winRAR\WinRAR.exe"</span> a -ep1 -r -o+ -m5 -df <span class="string">"I:\mysql backup\backup_%Ymd%.rar"</span> <span class="string">"I:\mysql backup\backup_%Ymd%.sql"</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@echo</span> on</span><br><span class="line">rem ******MySQL backup end********s</span><br></pre></td></tr></table></figure><br><blockquote><p>接下来解释上述代码的作用**</p></blockquote><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">forfiles /p <span class="string">"I:\mysql backup"</span> /m backup_*.sql -d -<span class="number">1</span> /c <span class="string">"cmd /c del /f @path"</span> </span><br><span class="line">    </span><br><span class="line">命令解释：</span><br><span class="line">forfiles 用来对备份目录下的过期备份进行删除。“I:\mysql backup”是备份文件所在的路径，可以自行修改。“backup_*.sql”指的是该路径下所有以“backup_”开头，以“.sql”作为后缀名的备份文件。而后面的数字“<span class="number">1</span>”表示<span class="number">1</span>天过期。</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set <span class="string">"Ymd=%date:~0,4%%date:~5,2%%date:~8,2%0%time:~1,1%%time:~3,2%%time:~6,2%"</span></span><br><span class="line">    </span><br><span class="line">命令解释：</span><br><span class="line">使用set命令来定义一个名为“Ymd”的变量，这个变量的值就是后面的一大串规则，简单说就是当前的日期和时间</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"H:\MySQL\MySQL Server 5.5\bin\mysqldump"</span> --opt --single-transaction=TRUE --user=你mysql用户名 --password=你mysql的密码 --host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --protocol=tcp --port=<span class="number">3306</span> --<span class="keyword">default</span>-character-set=utf8 --single-transaction=TRUE --routines --events <span class="string">"test"</span> &gt; <span class="string">"I:\mysql backup\backup_%Ymd%.sql"</span></span><br><span class="line">    </span><br><span class="line">命令解释：</span><br><span class="line"><span class="string">"H:\MySQL\MySQL Server 5.5\bin\mysqldump"</span>作用是调用mysql自带的备份工具；注意这个路径必须写成你自己的“mysqldump.exe”所在的路径，一般都是在MySQL安装路径的/bin目录下。而这一行命令后面紧跟着一大串的参数，我挑几个重点的解释：</span><br><span class="line">--user=xxx   --password=xxx 连接MySQL数据库服务的账户和密码，通常该账户必须具备数据库备份操作的权限。</span><br><span class="line">--host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  数据库服务所在的服务器ip地址</span><br><span class="line">--port=<span class="number">3306</span>  数据库服务所在的服务器的端口号</span><br><span class="line">--events <span class="string">"test"</span> &gt; <span class="string">"I:\mysql backup\backup_%Ymd%.sql"</span> events参数即实现了将数据库备份到一个指定的文件这一操作。<span class="string">"test"</span>是需要做备份的数据库，而大于号“&gt;”右边的就是我们的备份文件所保存的服务器目录和文件名了。</span><br></pre></td></tr></table></figure><blockquote><p>到这里你可以把上面的命令保存为 backup.bat 并右键已管理员身份运行！！（不然会出现拒绝访问的字眼，我给这里坑惨了），双击运行脚本文件，试试效果</p></blockquote></li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E4%BF%9D%E5%AD%98%E7%9A%84sql%E6%96%87%E4%BB%B6.png" alt></p><blockquote><p><strong>接下来就是对备份文件内存大小的优化了</strong></p><p><strong>备份数据前用WinRAR压缩一下是个不错的注意，这样做至少有以下优点：</strong></p><p>1.节省空间。</p><p>2.保密。可以利用压缩密码来对文件进行加密。（=下你就知道了）</p></blockquote><br><ol start="4"><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">rem <span class="string">"E:\winRAR\WinRAR.exe"</span> a -ep1 -r -o+ -m5 -df <span class="string">"I:\mysql backup\backup_%Ymd%.rar"</span> <span class="string">"I:\mysql backup\backup_%Ymd%.sql"</span> </span><br><span class="line">    </span><br><span class="line">注意：这里的rem可以把它去掉了 ，这个只是个注释；</span><br><span class="line"></span><br><span class="line">命令解释：</span><br><span class="line">这条命令的作用使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。（也就是把前面新建的sql压缩成rar文件，然后把那sql文件给删除掉）</span><br><span class="line"><span class="string">"I:\mysql backup\backup_%Ymd%.rar"</span>：压缩文件后的名字</span><br><span class="line"><span class="string">"I:\mysql backup\backup_%Ymd%.sql"</span>：所要压缩的文件，压缩完后进行删除</span><br><span class="line"></span><br><span class="line">参数解释：</span><br><span class="line">a   --添加文件到压缩文件，反正你要压缩的话就把a带上</span><br><span class="line">ep1 --排除基准文件夹，不然压缩包会包含待压缩文件夹所在的完整路径</span><br><span class="line">o+  --覆盖已经存在的文件</span><br><span class="line">m5 --存储方式： <span class="number">0</span>存储、<span class="number">1</span>最快、<span class="number">2</span>快速、<span class="number">3</span>标准、<span class="number">4</span>较好、<span class="number">5</span>最优</span><br><span class="line">df --压缩完后删除文件 </span><br><span class="line"></span><br><span class="line">P.S. 如果你需要用到第四点的压缩功能，你需要把下面这句修改一下：</span><br><span class="line">forfiles /p <span class="string">"I:\mysql backup"</span> /m backup_*.sql -d -<span class="number">1</span> /c <span class="string">"cmd /c del /f @path"</span></span><br><span class="line">    改成</span><br><span class="line">forfiles /p <span class="string">"I:\mysql backup"</span> /m backup_*.rar -d -<span class="number">1</span> /c <span class="string">"cmd /c del /f @path"</span></span><br><span class="line">不改的话，删除不了之前的.rar文件。</span><br></pre></td></tr></table></figure></li></ol><br><h2 id="四-设置windows定时任务"><a href="#四-设置windows定时任务" class="headerlink" title="四.设置windows定时任务"></a>四.设置windows定时任务</h2><blockquote><p>完成上述步骤之后，我们需要把bat文件添加到windows定时任务计划当中（以下展示Windows Server2012）版本的，除了第一点任务计划程序的位置不一样之后，其他是一样的</p></blockquote><ol><li>打开服务管理器</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E6%89%93%E5%BC%80%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.png" alt></p><br><ol start="2"><li>点击右侧的“创建基本任务”</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E5%88%9B%E5%BB%BA%E5%9F%BA%E6%9C%AC%E4%BB%BB%E5%8A%A1.png" alt></p><ol start="3"><li>填写任务的名称(必填)，以及描述信息(选填)：</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E5%88%9B%E5%BB%BA%E5%9F%BA%E6%9C%AC%E4%BB%BB%E5%8A%A1%E5%90%91%E5%AF%BC.png" alt></p><ol start="4"><li>设定任务的执行频率，我选择的是“每天”</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E4%BB%BB%E5%8A%A1%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt></p><ol start="5"><li>设置任务执行的时间(通常是夜深人静的一两点)：</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F.png" alt></p><ol start="6"><li>添加脚本</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E6%B7%BB%E5%8A%A0%E8%84%9A%E6%9C%AC.png" alt></p><ol start="7"><li>检查信息</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E6%A3%80%E6%9F%A5%E4%B8%80%E9%81%8D.png" alt></p><ol start="8"><li>查看Windows的任务列表</li></ol><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E6%9F%A5%E7%9C%8B%E4%BB%BB%E5%8A%A1.png" alt></p><blockquote><p><strong>至此，就ok啦，测试样例如下：</strong></p></blockquote><p><img src="https://batimagess.oss-cn-shenzhen.aliyuncs.com/%E5%8E%8B%E7%BC%A9%E5%8C%85.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何书写Api接口文档</title>
      <link href="2019/11/06/%E5%A6%82%E4%BD%95%E4%B9%A6%E5%86%99Api%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>2019/11/06/%E5%A6%82%E4%BD%95%E4%B9%A6%E5%86%99Api%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="如何写好api接口文档"><a href="#如何写好api接口文档" class="headerlink" title="如何写好api接口文档"></a>如何写好api接口文档</h1><h2 id="一、为什么写"><a href="#一、为什么写" class="headerlink" title="一、为什么写"></a>一、为什么写</h2><ol><li>当完成一个API接口时，通常需要与前端人员沟通接口的细节，这时候，一个文档就能节省很多效率</li><li>项目维护中或者项目人员更迭,方便后期人员查看、维护</li></ol><br><h2 id="二、如何写"><a href="#二、如何写" class="headerlink" title="二、如何写"></a>二、如何写</h2><p>​     <strong>功能模块标题</strong></p><ol><li><p><strong>接口简要描述：</strong></p><ul><li>主要说明该接口是实现什么功能的，如用户登录接口</li></ul></li><li><p><strong>请求URL地址：</strong></p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//xx.com/api/user/login</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>HTTP请求方式：</strong></p><ul><li>GET/POST</li></ul></li><li><p><strong>请求头部：</strong></p></li><li><p><strong>请求参数：JSON或表单</strong></p></li></ol><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>是</td><td>用户名</td></tr><tr><td>password</td><td>str</td><td>是</td><td>密码</td></tr></tbody></table><p>（这里贴个请求参数的示例图）</p><ol start="5"><li><strong>响应参数：JSON或其他</strong></li></ol><p>（这里贴给个返回数据的示例图）</p><br><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>后台人员如果要改接口，要记得更新啊  </p><p>其实比较推荐用一些在线的api管理工具：<a href="https://easydoc.xyz/#/" target="_blank" rel="noopener">易文档</a>等</p>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序上传照片(附后端代码)</title>
      <link href="2019/10/18/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E4%BC%A0%E7%85%A7%E7%89%87-%E9%99%84%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81/"/>
      <url>2019/10/18/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E4%BC%A0%E7%85%A7%E7%89%87-%E9%99%84%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序上传图片与后端接受图片的实现"><a href="#微信小程序上传图片与后端接受图片的实现" class="headerlink" title="微信小程序上传图片与后端接受图片的实现"></a>微信小程序上传图片与后端接受图片的实现</h1><h2 id="纸上谈坑"><a href="#纸上谈坑" class="headerlink" title="纸上谈坑"></a>纸上谈坑</h2><p>在我实现了这个功能之前，我讲讲我是怎么在这个坑里爬上来的：</p><p>我实现上传文件后端的接口的参数是String类型的</p><p>前台传的参数：<a href="http://tmp/wx忽略很多字母数字.png" target="_blank" rel="noopener">http://tmp/wx忽略很多字母数字.png</a></p><p>但由于这张是本地照片url（外网无法访问），我后台拿到的是一个String类型，是没有办法是去识别这是一张图片的，访问不了这个数据，仅仅把它当做字符串而已。（低级错误）</p><br><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p><strong>前言：后端接受文件有2种方式(参数)： 1. MultipartFile   2.base64</strong> </p></blockquote><br><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html" target="_blank" rel="noopener">微信上传文件的开发文档</a></p><p><strong>小程序代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.wxml --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;view&gt;文件上传&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">  &lt;view&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input id="file" type="file" bindtap="uploader"&gt;&lt;/i</span>nput&gt;</span><br><span class="line">  &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  uploader: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> imgPath = res.tempFilePaths[<span class="number">0</span>]</span><br><span class="line">        wx.uploadFile(&#123;</span><br><span class="line">          url: <span class="string">'http://localhost:8080/customerRegister/uploadPricture'</span>,</span><br><span class="line">          filePath: imgPath,</span><br><span class="line">          name: <span class="string">'files'</span>,</span><br><span class="line">          success:<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>java后端代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/customerRegister"</span>,produces = <span class="string">"application/json;charset=utf-8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/uploadPricture"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadPricture</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile[] file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        MultipartFile multipartFile = file[<span class="number">0</span>];</span><br><span class="line">        System.out.println(<span class="string">"图片名称："</span>+multipartFile.getOriginalFilename());</span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        InputStream inputStream = multipartFile.getInputStream();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;\"mas\":\"ok\"&#125;"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><blockquote><p><font color="blue">P.s. 注意：这是一个ssm项目，因此你需要在pom.xml中添加依赖和在springmvc.xml中添加以下代码，并且如果你是在postman中测试的话，需要post请求！(这个问题搞了我几个小时，因为少了上传文件的配置，就会导致multipartfile这个类失效)</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;!--pom.xml 文件上传所需要的依赖--&gt;</span><br><span class="line">&gt; &lt;dependency&gt;</span><br><span class="line">&gt;       &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">&gt;       &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">&gt;       &lt;version&gt;1.3.3&lt;/version&gt;</span><br><span class="line">&gt; &lt;/dependency&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;!--springmvc.xml--&gt;</span><br><span class="line">&gt;     &lt;!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 --&gt;</span><br><span class="line">&gt;     &lt;bean id=<span class="string">"multipartResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br><span class="line">&gt;         &lt;property name="defaultEncoding" value="UTF-8"&gt;&lt;/property&gt;</span><br><span class="line">&gt;         &lt;!-- 指定所上传的总大小不能超过<span class="number">1</span>T。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件 --&gt;</span><br><span class="line">&gt;         &lt;property name=<span class="string">"maxUploadSize"</span> value=<span class="string">"10485760000"</span> /&gt;</span><br><span class="line">&gt;         &lt;property name=<span class="string">"maxInMemorySize"</span> value=<span class="string">"40960"</span> /&gt;</span><br><span class="line">&gt;     &lt;/bean&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="2019/10/15/%E7%AE%97%E6%B3%95/"/>
      <url>2019/10/15/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="算法的学习"><a href="#算法的学习" class="headerlink" title="算法的学习"></a>算法的学习</h1><h2 id="常见函数的时间复杂度"><a href="#常见函数的时间复杂度" class="headerlink" title="常见函数的时间复杂度"></a>常见函数的时间复杂度</h2><table><thead><tr><th>算法复杂度</th><th align="center">1s可处理的规模</th></tr></thead><tbody><tr><td>lgn</td><td align="center">2*(100000000)</td></tr><tr><td>n</td><td align="center">100000000（10的8次方）</td></tr><tr><td>n²</td><td align="center">10000（10的4次方）</td></tr><tr><td>n³</td><td align="center">&lt;1000</td></tr><tr><td>2^n</td><td align="center">27</td></tr></tbody></table><br><p>反过来想：运行10^8的规模，需要消耗的时间</p><table><thead><tr><th>复杂度/n的规模</th><th align="center">100000000（10的8次方）</th></tr></thead><tbody><tr><td>lgn</td><td align="center">27/10^8 s</td></tr><tr><td>n</td><td align="center">100000000（10的8次方）</td></tr><tr><td>n²</td><td align="center">10^8 s</td></tr><tr><td>n³</td><td align="center">10^16 s</td></tr><tr><td>2^n</td><td align="center">巨大</td></tr></tbody></table><p><img src="https://algorithmimages.oss-cn-shenzhen.aliyuncs.com/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9B%B2%E7%BA%BF.jpg" alt></p><blockquote><p><strong>总结：</strong></p><p><strong>时间复杂度从低到高（优-&gt;差）</strong></p><p><strong>O(1) &lt;  O(lgN) &lt; O(sqrt(N)) &lt; O(N) &lt; O(NlgN) &lt; O(N) &lt; O(N*N) &lt; O(2^N) &lt; O(N^N)</strong></p><p>基础排序算法性能对比：</p><p>O(N*N)：冒泡、插入、选择</p><p>O(nlgn)：jdk自带的快排(Arrays.sort())</p></blockquote><br><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h2 id="递归求解"><a href="#递归求解" class="headerlink" title="递归求解"></a>递归求解</h2><ol><li>找重复（子问题划分(先做一部分，剩下的部门给其他人做)，等价装换）</li><li>找变化：变化的量应该作为参数</li><li>找边界：出口 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA利用模板导出excel</title>
      <link href="2019/10/06/JAVA%E5%88%A9%E7%94%A8%E6%A8%A1%E6%9D%BF%E5%AF%BC%E5%87%BAexcel/"/>
      <url>2019/10/06/JAVA%E5%88%A9%E7%94%A8%E6%A8%A1%E6%9D%BF%E5%AF%BC%E5%87%BAexcel/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA利用poi技术实现模板导出excel"><a href="#JAVA利用poi技术实现模板导出excel" class="headerlink" title="JAVA利用poi技术实现模板导出excel"></a>JAVA利用poi技术实现模板导出excel</h1><p>先说说我搞这个的一个痛苦经历，其实利用模板来实现数据的导入是非常方便的一件事情，但我在一个地方卡壳了很多，哎，==说我在哪个地方遇到了问题，以下是ssm工程项目</p><br><h2 id="1-为什么要用模板？"><a href="#1-为什么要用模板？" class="headerlink" title="1.为什么要用模板？"></a>1.为什么要用模板？</h2><p>用模板，我们就不需要自己通过代码来创建Excel并画表格样式，可以直接通过wps等办公软件来快速地建excel，然后我们只需要通过代码来动态地写入数据，这样就大大减少了代码量（代码书写excel和画表格样式很麻烦，而且会导致代码很乱）</p><br><h2 id="2-利用模板导出excel的思路"><a href="#2-利用模板导出excel的思路" class="headerlink" title="2.利用模板导出excel的思路"></a>2.利用模板导出excel的思路</h2><p>把模板保存到项目里或者一些存储云上，再通过路径获取到该模板文件，把其内容全部复制到代码新创建的Excel中，再往里填充数据。</p><br><h2 id="3-上代码"><a href="#3-上代码" class="headerlink" title="3.上代码"></a>3.上代码</h2><blockquote><p> <strong>包结构</strong></p></blockquote><p><img src="https://messageimages.oss-cn-shenzhen.aliyuncs.com/%E5%8C%85%E7%BB%93%E6%9E%84.png" alt></p><h3 id="1-引入依赖（pom-xml）"><a href="#1-引入依赖（pom-xml）" class="headerlink" title="1.引入依赖（pom.xml）"></a>1.引入依赖（pom.xml）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-ResponseUtil类"><a href="#2-ResponseUtil类" class="headerlink" title="2.ResponseUtil类"></a>2.ResponseUtil类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(HttpServletResponse response , Workbook wb , String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span> , <span class="string">"attachment;filename="</span>+<span class="keyword">new</span> String(fileName.getBytes(<span class="string">"utf-8"</span>),<span class="string">"iso8859-1"</span>));</span><br><span class="line">        response.setContentType(<span class="string">"application/ynd.ms;charset=UTF-8"</span>);</span><br><span class="line">        OutputStream outputStream = response.getOutputStream();</span><br><span class="line">        wb.write(outputStream);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ExcelUtil类"><a href="#3-ExcelUtil类" class="headerlink" title="3.ExcelUtil类"></a>3.ExcelUtil类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Workbook <span class="title">fillExcelDataWithTemplate</span><span class="params">(List list, String templateFileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//方法一：获取模板文件的绝对路径，当然还有其他方法可以获取其绝对路径，这里介绍这一种（有局限性）</span></span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"H:\\你自己的项目路径\\src\\main\\java\\com\\jg\\excelTemplate\\"</span>+templateFileName));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二：上传到过存储云，获取模板文件的URL；好处：项目打包上传服务器后，在能访问改模板文件</span></span><br><span class="line">        <span class="comment">//URL httpurl=new URL("https://fruitxlx.oss-cn-shenzhen.aliyuncs.com/%E5%87%BA%E5%BA%93%E6%B1%87%E6%80%BB.xls");</span></span><br><span class="line">       <span class="comment">// URLConnection urlConnection = httpurl.openConnection();</span></span><br><span class="line">        <span class="comment">//InputStream inputStream = urlConnection.getInputStream();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取模板,把其内容全部复制到代码新创建的Excel</span></span><br><span class="line">        Workbook workbook = WorkbookFactory.create(inputStream);</span><br><span class="line">        <span class="comment">//获取第一个sheet</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取总列数</span></span><br><span class="line">        <span class="keyword">int</span> cellNums = sheet.getRow(<span class="number">0</span>).getLastCellNum();</span><br><span class="line">        <span class="comment">//从第三行开始插入数据，根据你自己的excel改变</span></span><br><span class="line">        <span class="keyword">int</span> rowIndex = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给单元格设置样式</span></span><br><span class="line">        XSSFCellStyle cellStyle = (XSSFCellStyle) workbook.createCellStyle();</span><br><span class="line">        cellStyle.setBorderBottom(BorderStyle.THIN); <span class="comment">//下边框</span></span><br><span class="line">        cellStyle.setBorderLeft(BorderStyle.THIN);<span class="comment">//左边框</span></span><br><span class="line">        cellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//上边框</span></span><br><span class="line">        cellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//右边框</span></span><br><span class="line">        cellStyle.setAlignment(HorizontalAlignment.CENTER);<span class="comment">// 水平居中</span></span><br><span class="line">        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<span class="comment">// 上下居中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入数据到excel</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;list.size() ; i++) &#123;</span><br><span class="line">            <span class="comment">//创建行</span></span><br><span class="line">            Row row = sheet.createRow(rowIndex++);</span><br><span class="line">            <span class="comment">//行高</span></span><br><span class="line">            row.setHeight((<span class="keyword">short</span>)(<span class="number">350</span>));</span><br><span class="line">            <span class="comment">//TODO 根据你自己的需要插入数据到excel表格</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workbook;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="4-controller类"><a href="#4-controller类" class="headerlink" title="4.controller类"></a>4.controller类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/export"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExcelService excelService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/excel"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">export</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//根据你自己的需要查数据，list</span></span><br><span class="line">        </span><br><span class="line">        Workbook wb = ExcelUtil.fillExcelDataWithTemplate(传入你自个的list,<span class="string">"出库汇总.xls"</span>);</span><br><span class="line"></span><br><span class="line">        HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class="line"></span><br><span class="line">        ResponseUtil.export(response , wb , <span class="string">"出库汇总.xls"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><blockquote><p><font color="blue">到这一步已大功到成啦</font></p><p>顺便提醒大家一个地方（我被坑了很惨的地方），不要导下面这个依赖，我之类两个都导入了，可能就造成了冲突，找我了老半天的，或许你可以试试导下面这个依赖，而不导我上面那个依赖试试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;dependency&gt;</span><br><span class="line">&gt;      &lt;!--&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;--&gt;</span><br><span class="line">&gt;      &lt;!--&lt;artifactId&gt;poi&lt;/artifactId&gt;--&gt;</span><br><span class="line">&gt;      &lt;!--&lt;version&gt;3.17&lt;/version&gt;--&gt;</span><br><span class="line">&gt; &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql连接数过多问题</title>
      <link href="2019/09/24/Mysql%E8%BF%9E%E6%8E%A5%E6%95%B0%E8%BF%87%E5%A4%9A%E9%97%AE%E9%A2%98/"/>
      <url>2019/09/24/Mysql%E8%BF%9E%E6%8E%A5%E6%95%B0%E8%BF%87%E5%A4%9A%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql连接数过多导致报异常"><a href="#Mysql连接数过多导致报异常" class="headerlink" title="Mysql连接数过多导致报异常"></a>Mysql连接数过多导致报异常</h1><h2 id="1-异常信息："><a href="#1-异常信息：" class="headerlink" title="1.异常信息："></a>1.异常信息：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Data source rejected establishment of connection,message from server: <span class="string">"Too many connections"</span></span><br></pre></td></tr></table></figure><br><h2 id="2-可能导致的原因"><a href="#2-可能导致的原因" class="headerlink" title="2.可能导致的原因"></a>2.可能导致的原因</h2><ol><li>mysql的max_connections（默认是100）等属性配置太小的问题</li><li>操作完数据库之后，没有及时释放资源</li></ol><br><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h2><p><strong>Windows</strong>: 找到mysql的安装目录，打开my.ini文件添加一下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max_connections=1000</span><br><span class="line">max_user_connections=500</span><br><span class="line">wait_timeout=200</span><br></pre></td></tr></table></figure><blockquote><p><font color="blue"><strong>重启mysql，才能生效</strong></font></p></blockquote><br><hr><p><strong>Linux</strong>: 找到mysql的安装目录，打开my.cnf文件，在[mysqld]添加下面三行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max_connections=1000</span><br><span class="line">max_user_connections=500</span><br><span class="line">wait_timeout=200</span><br></pre></td></tr></table></figure><blockquote><p><font color="blue"><strong>重启mysql，才能生效</strong></font></p></blockquote><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E5%A2%9E%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0.png" alt></p><br><h2 id="4-查看是否生效"><a href="#4-查看是否生效" class="headerlink" title="4.查看是否生效"></a>4.查看是否生效</h2><p>在客户端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%max_connections%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E6%9F%A5%E7%9C%8Bmysql%E6%9C%80%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet分页的实现</title>
      <link href="2019/09/12/servlet%E5%88%86%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/09/12/servlet%E5%88%86%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet分页的实现"><a href="#Servlet分页的实现" class="headerlink" title="Servlet分页的实现"></a>Servlet分页的实现</h1><h2 id="分页的产生原因"><a href="#分页的产生原因" class="headerlink" title="分页的产生原因"></a>分页的产生原因</h2><blockquote><p><strong>当数据达到一定数量的时候，如果一次性将这些数据查询出来，必然会加大服务器内存的负载，降低运行速度，因此分页产生的原因：提高性能，查询效率高，页面美观</strong></p></blockquote><h2 id="分页的实现"><a href="#分页的实现" class="headerlink" title="分页的实现"></a>分页的实现</h2><blockquote><p>要实现分页，必须知道 某一页的数据 从哪里开始，到哪里结束</p></blockquote><p><img src="https://javapageimages.oss-cn-shenzhen.aliyuncs.com/%E5%88%86%E9%A1%B5%E9%9C%80%E8%A6%81%E7%9A%84%E5%8F%82%E6%95%B0.png" alt></p><h3 id="分页的sql语句分析"><a href="#分页的sql语句分析" class="headerlink" title="分页的sql语句分析"></a>分页的sql语句分析</h3><blockquote><p>假设每页显示10条数据</p></blockquote><p>sqlserver/oracle：从1开始计数</p><table><thead><tr><th align="left">第n页</th><th>开始</th><th>结束</th></tr></thead><tbody><tr><td align="left">1</td><td>1</td><td>10</td></tr><tr><td align="left">2</td><td>11</td><td>20</td></tr><tr><td align="left">3</td><td>21</td><td>30</td></tr><tr><td align="left">n</td><td>(n-1)*10+1</td><td>n*10</td></tr></tbody></table><p>mysql：从0开始计数</p><table><thead><tr><th>第n页</th><th>开始</th><th>结束</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>9</td></tr><tr><td>1</td><td>10</td><td>19</td></tr><tr><td>2</td><td>20</td><td>29</td></tr><tr><td>n</td><td>n*10</td><td>(n+1)*10-1</td></tr></tbody></table><h3 id="mysql实现分页的sql："><a href="#mysql实现分页的sql：" class="headerlink" title="mysql实现分页的sql："></a>mysql实现分页的sql：</h3><blockquote><p><strong>limit 开始，多少条</strong></p></blockquote><p>第0页：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student limit 0,10</span><br></pre></td></tr></table></figure><p>第1页：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student limit 10,10</span><br></pre></td></tr></table></figure><p>第n页：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student limit n*10 10</span><br></pre></td></tr></table></figure><p><strong>通式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from student limit 页数*页面大小,页面大小</span><br><span class="line">页数：第几页</span><br><span class="line">页面大小：每页显示的数据量</span><br></pre></td></tr></table></figure><h3 id="java代码分页需要的参数"><a href="#java代码分页需要的参数" class="headerlink" title="java代码分页需要的参数"></a>java代码分页需要的参数</h3><p>5个变量（属性）</p><ol><li><p>数据总条目数</p><ul><li>查数据库，select count(1)….</li></ul></li><li><p>页面大小(每页显示的数据条数) </p><ul><li>用户自定义（前台传参）</li></ul></li><li><p>总页数</p><ul><li>程序自动计算</li><li>总页数 = 数据总数%页面大小==0 ？ 数据总数/页面大小 ：数据总数/页面大小+1</li></ul></li><li><p>当前页(页码)</p><ul><li>用户自定义（前台传参）</li></ul></li><li><p>当前页的对象集合(实体类集合)：每一页显示的所有数据</p><ul><li>查数据库，分页sql</li></ul></li></ol><h2 id="java代码的实现"><a href="#java代码的实现" class="headerlink" title="java代码的实现"></a>java代码的实现</h2><ol><li>建议先封装一个DBUtil工具类</li></ol><blockquote><p><strong>把通用的增删查改 和 数据库的连接释放的方法写进去，到时方便调用，避免dao层代码的冗余</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的数据库操作方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL=<span class="string">"填写你自己的"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER=<span class="string">"填写你自己的"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD=<span class="string">"填写你自己的"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER=<span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">            <span class="comment">// 加载mysql数据库驱动</span></span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">            <span class="comment">// 获取数据库连接</span></span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(URL,USER,PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的增删改 用Object的原因是：可以解决占位符参数类型不一致的问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql , Object[] params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> isUpdate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 创建sql命令对象</span></span><br><span class="line">            preparedStatement = getConnection().prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给占位符赋值</span></span><br><span class="line">            <span class="keyword">if</span>(params != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; params.length ; i++)&#123;</span><br><span class="line">                    preparedStatement.setObject(i+<span class="number">1</span> , params[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            isUpdate = preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeAll(connection , preparedStatement,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isUpdate &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的查 返回是一个集合 (单，集合，null)</span></span><br><span class="line">    <span class="comment">//这里要主要，不要释放资源，因为如果在这里释放了资源，就返回不了ResultSet了，</span></span><br><span class="line">    <span class="comment">//释放资源在Dao层释放即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> ResultSet <span class="title">execueQuery</span><span class="params">(String sql , Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;NewStudent&gt; newStudentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建sql命令对象</span></span><br><span class="line">            preparedStatement = getConnection().prepareStatement(sql);</span><br><span class="line">            <span class="comment">//用占位符赋值</span></span><br><span class="line">            <span class="keyword">if</span>(params != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;params.length ; i++)&#123;</span><br><span class="line">                    preparedStatement.setObject(i+<span class="number">1</span> , params[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回结果集</span></span><br><span class="line">        <span class="keyword">return</span> resultSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接，释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(Connection connection , PreparedStatement preparedStatement , ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>) resultSet.close();</span><br><span class="line">            <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>) preparedStatement.close();</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>) connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.先把分页2个需要查数据库的参数的方法先实现了(Dao层)</p><blockquote><p><strong>数据总条目数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询新生总数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalStudentNum</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> totalNum = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//用count(1)的原因是：1比*效率更高</span></span><br><span class="line">        String sql = <span class="string">"select count(1) from newstudent"</span>;</span><br><span class="line">        <span class="comment">//把sql语句和占位符作为参数传入方法里头，如果不需要占位符，则传入null</span></span><br><span class="line">        resultSet = DBUtil.execueQuery(sql, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            totalNum = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        DBUtil.closeAll(DBUtil.connection,DBUtil.preparedStatement,resultSet);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>当前页对象的集合</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据当前页和页面大小查询当前页对象的集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;NewStudent&gt; <span class="title">queryStudentsByPage</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;NewStudent&gt; newStudentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"select * from newstudent limit ?,?"</span>;</span><br><span class="line"></span><br><span class="line">        Object[] params = &#123;currentPage*pageSize , pageSize&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回查询的数据集合</span></span><br><span class="line">        ResultSet resultSet = DBUtil.execueQuery(sql , params);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="comment">//根据自己实际情况填写</span></span><br><span class="line"></span><br><span class="line">                NewStudent newStudent = <span class="keyword">new</span> NewStudent();</span><br><span class="line">               .</span><br><span class="line">               .</span><br><span class="line">               .</span><br><span class="line"></span><br><span class="line">                newStudentList.add(newStudent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.closeAll(DBUtil.connection,DBUtil.preparedStatement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newStudentList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 在分页显示的前提下：显示数据jsp需要哪些数据     </span><br><span class="line">&gt; <span class="number">1</span>.当前页 currentPage      </span><br><span class="line">&gt; <span class="number">2</span>.页面大小 pageSize      </span><br><span class="line">&gt; <span class="number">3</span>.当前页的数据集合 currentNewStudentList     </span><br><span class="line">&gt; <span class="number">4</span>.总数据 totalStudentNum      </span><br><span class="line">&gt; <span class="number">5</span>.总页数 totalPage                  </span><br><span class="line">&gt; --&gt;新建Page类，用于封装以上<span class="number">5</span>个字段,方便后续数据的传输</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>Utils包内新建Page工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.当前页 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage;</span><br><span class="line"><span class="comment">// 2.页面大小 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line"><span class="comment">// 3.当前页的数据集合 </span></span><br><span class="line">    <span class="keyword">private</span> List&lt;NewStudent&gt; currentNewStudentList;</span><br><span class="line"><span class="comment">// 4.总数据 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalStudentNum;</span><br><span class="line"><span class="comment">// 5.总页数 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当我们调用了 数据总数的set() 和页面大小的set()以后，自动计算出总页数</span></span><br><span class="line">    <span class="comment">//注意调用顺序问题，在servlet中一定要先set数据总数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">        <span class="comment">//自动计算总页数</span></span><br><span class="line">        <span class="comment">//总页数 = 数据总数%页面大小==0 ？ 数据总数/页面大小 ：数据总数/页面大小+1</span></span><br><span class="line">        <span class="keyword">this</span>.totalPage = <span class="keyword">this</span>.totalStudentNum % <span class="keyword">this</span>.pageSize==<span class="number">0</span> ? <span class="keyword">this</span>.totalStudentNum / <span class="keyword">this</span>.pageSize:<span class="keyword">this</span>.totalStudentNum / <span class="keyword">this</span>.pageSize+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;NewStudent&gt; <span class="title">getCurrentNewStudentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentNewStudentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentNewStudentList</span><span class="params">(List&lt;NewStudent&gt; currentNewStudentList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentNewStudentList = currentNewStudentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalStudentNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalStudentNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalStudentNum</span><span class="params">(<span class="keyword">int</span> totalStudentNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalStudentNum = totalStudentNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分页的servlet层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求编码格式</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应编码格式</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据总数</span></span><br><span class="line">        <span class="keyword">int</span> totalStudentNum = 你的service对象.getTotalStudentNum();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取前台的当前页</span></span><br><span class="line"><span class="comment">        刚开始访问时没有，则默认设置为第一页，因为我用的是mysql，所以是0</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String cPage = req.getParameter(<span class="string">"currentPage"</span>);</span><br><span class="line">        <span class="keyword">if</span>(cPage==<span class="keyword">null</span>)&#123;</span><br><span class="line">            cPage = <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currentPage = Integer.parseInt(cPage);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取前台的页面大小(当前页显示的数据量)</span></span><br><span class="line"><span class="comment">        刚开始访问时没有，则默认设置为10</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String pSize = req.getParameter(<span class="string">"pageSize"</span>);</span><br><span class="line">        <span class="keyword">if</span>(pSize==<span class="keyword">null</span>)&#123;</span><br><span class="line">            pSize = <span class="string">"10"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pageSize = Integer.parseInt(pSize);</span><br><span class="line">        </span><br><span class="line">        List&lt;NewStudent&gt; currentPageNewStudentList = 你的service对象.queryStudentsByPage(currentPage , pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将分页所需的5个字段（其中有1个自动计算，因此实际只需要组装4个即可，注意顺序，先数据总数，在页面大小）组装到pageUtil对象中</span></span><br><span class="line">        PageUtil pageUtil = <span class="keyword">new</span> PageUtil();</span><br><span class="line">        pageUtil.setCurrentPage(currentPage);</span><br><span class="line">        pageUtil.setTotalStudentNum(totalStudentNum);</span><br><span class="line">        pageUtil.setPageSize(pageSize);</span><br><span class="line">        pageUtil.setCurrentNewStudentList(currentPageNewStudentList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        req.setAttribute(<span class="string">"pageUtil"</span>,pageUtil);</span><br><span class="line">        <span class="comment">//请求转发(共用同一个request)</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/view/admin/information-aggregation.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>jsp关于分页的实现</strong></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 当前页怎么获取？</span><br><span class="line">&gt; 答：先通过servlet后再访问此jsp，这样就可以拿到当前页了</span><br><span class="line">&gt; &lt;a href=&quot;你的servlet?currentPage=0&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">&gt; &lt;a href=&quot;你的servlet?currentPage=(当前页-1)&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">&gt; &lt;a href=&quot;你的servlet?currentPage=(当前页+1)&quot;&lt;/a&gt;</span><br><span class="line">&gt; &lt;a href=&quot;你的servlet?currentPage=尾页&quot;&lt;/a&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>完整的jsp代码</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;XX&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">         PageUtil pageUtil = (PageUtil) request.getAttribute(<span class="string">"pageUtil"</span>);</span><br><span class="line"> <span class="keyword">for</span> (NewStudent newStudent : pageUtil.getCurrentNewStudentList())&#123;</span><br><span class="line">%&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getName()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getGender()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getGrade()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getMajor()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getDirection()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getFoundation()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getPhone()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getQq()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=newStudent.getHobby()%&gt;&lt;/td&gt;</span><br><span class="line">           &lt;/tr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">每页显示</span><br><span class="line">&lt;select onchange=<span class="string">"location.replace('../../AdminInfoAggregationServlet?pageSize='+this.value)"</span>&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span> ; i&lt;=<span class="number">20</span> ; i=i+<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pageUtil.getPageSize()==i)&#123;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;option value="&lt;%=i%&gt;" selected="selected"&gt;&lt;%=i%&gt;&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;option value="&lt;%=i%&gt;" &gt;&lt;%=i%&gt;&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br><span class="line">条</span><br><span class="line"></span><br><span class="line">一共分了&lt;%=pageUtil.getTotalPage()%&gt;页，当前是在&lt;%=pageUtil.getCurrentPage()+<span class="number">1</span>%&gt;页</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div &gt;</span><br><span class="line">&lt;%--mysql是从<span class="number">0</span>开始的--%&gt;</span><br><span class="line">&lt;a href="../../AdminInfoAggregationServlet?currentPage=0"&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a style='cursor: pointer' onclick="beforePage(&lt;%=pageUtil.getCurrentPage()-1%&gt;)"&gt;上一页&lt;/a&gt;</span><br><span class="line">&lt;a style='cursor: pointer' onclick="nextPage(&lt;%=pageUtil.getCurrentPage()+1%&gt;)"&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href="../../AdminInfoAggregationServlet?currentPage=&lt;%=pageUtil.getTotalPage()-1%&gt;"&gt;尾页&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function">function <span class="title">beforePage</span><span class="params">(currentPage)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(currentPage==-<span class="number">1</span>)&#123;</span><br><span class="line">        alert(<span class="string">"已经是第一页啦"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                window.location=<span class="string">"../../AdminInfoAggregationServlet?currentPage=&lt;%=pageUtil.getCurrentPage()-1%&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">function <span class="title">nextPage</span><span class="params">(currentPage)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(currentPage==&lt;%=pageUtil.getTotalPage()%&gt;)&#123;</span><br><span class="line">        alert(<span class="string">"已经是尾页啦"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                window.location=<span class="string">"../../AdminInfoAggregationServlet?currentPage=&lt;%=pageUtil.getCurrentPage()+1%&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>大致的分页效果</p><p><img src="https://javapageimages.oss-cn-shenzhen.aliyuncs.com/%E5%A4%A7%E8%87%B4%E7%9A%84%E5%88%86%E9%A1%B5%E6%95%88%E6%9E%9C.png" alt></p><blockquote><p>分页效果就大致完成啦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql定时任务</title>
      <link href="2019/09/04/Mysql%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>2019/09/04/Mysql%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql定时自动清除数据"><a href="#Mysql定时自动清除数据" class="headerlink" title="Mysql定时自动清除数据"></a>Mysql定时自动清除数据</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>过多的数据会浪费Mysql数据库的磁盘空间</p><h2 id="二、准备家当"><a href="#二、准备家当" class="headerlink" title="二、准备家当"></a>二、准备家当</h2><ol><li>mysql5.1以上</li><li>Navicat</li></ol><h2 id="三、具体操作"><a href="#三、具体操作" class="headerlink" title="三、具体操作"></a>三、具体操作</h2><blockquote><p>整个过程总共分有3个部分：</p><ol><li>开启Mysql事件</li><li>写存储过程</li><li>写Event事件并设置成Enable</li></ol></blockquote><h3 id="1-在Navicat查看Mysql是否开启的事件调度-默认是OFF"><a href="#1-在Navicat查看Mysql是否开启的事件调度-默认是OFF" class="headerlink" title="1. 在Navicat查看Mysql是否开启的事件调度(默认是OFF)"></a>1. 在Navicat查看Mysql是否开启的事件调度(默认是OFF)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;event_scheduler&apos;</span><br></pre></td></tr></table></figure><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E6%9F%A5%E7%9C%8B%E6%97%B6%E9%97%B4%E8%B0%83%E5%BA%A6.png" alt></p><h3 id="2-开启事件（一劳永逸的办法）"><a href="#2-开启事件（一劳永逸的办法）" class="headerlink" title="2. 开启事件（一劳永逸的办法）"></a>2. 开启事件（一劳永逸的办法）</h3><blockquote><p><font size="4"><strong>2.1 打开mysql的安装目录，找到my.ini配置文件，加入如下配置来开启事件</strong></font></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event_scheduler=ON</span><br></pre></td></tr></table></figure><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E5%BC%80%E5%90%AF%E4%BA%8B%E4%BB%B6.png" alt></p><blockquote><p><font size="4"><strong>2.2 重启数据库（win7为例）</strong></font></p></blockquote><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E9%87%8D%E5%90%AF%E6%95%B0%E6%8D%AE%E5%BA%931.png" alt></p><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E9%87%8D%E5%90%AF%E6%95%B0%E6%8D%AE%E5%BA%932.png" alt></p><blockquote><p><font size="4"><strong>2.3 检查是否开启了事件</strong></font></p></blockquote><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E4%BA%86%E4%BA%8B%E4%BB%B6.png" alt></p><br><h3 id="3-写存储过程"><a href="#3-写存储过程" class="headerlink" title="3. 写存储过程"></a>3. 写存储过程</h3><blockquote><p>存储过程相当于Mysql的函数，它是存储在数据库服务器中的一组sql语句，通过调用这个函数的名称来执行这些sql语句命令。</p></blockquote><br><p><font size="4"><strong>3.1 首先是写需要删除的数据的sql语句</strong></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete From orderfood where DATE(time) &lt;= DATE(DATE_SUB(NOW(),INTERVAL 3 day));</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li>这条删除语句的意思是删除前3天的数据<ul><li>orderfood—表名</li><li>time———–字段名</li><li>3 day———-前3天</li></ul></li></ul><br><p><font size="4"><strong>3.2 创建存储过程</strong></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create PROCEDURE del_time() </span><br><span class="line">BEGIN</span><br><span class="line">delete From orderfood where DATE(time) &lt;= DATE(DATE_SUB(NOW(),INTERVAL 3 day));</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li>del_time—存储程序的命名</li><li>begin~end之间的内容是你需要执行的一条或多条sql语句</li></ul><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E5%88%9B%E5%BB%BA%E5%82%A8%E5%AD%98%E8%BF%87%E7%A8%8B.png" alt></p><br><h3 id="4-写Event定时事件"><a href="#4-写Event定时事件" class="headerlink" title="4.写Event定时事件"></a>4.写Event定时事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create event del_event  </span><br><span class="line">on schedule </span><br><span class="line">EVERY 1 day  </span><br><span class="line">STARTS &apos;2018-08-25 22:30:00&apos;  </span><br><span class="line">ON COMPLETION  PRESERVE ENABLE  </span><br><span class="line">do  call del_time()</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li><p>定义del_event，在Event事件中定义事件执行的开始事件和频率</p><ul><li><p>del_event —事件的名称</p></li><li><p>EVERY 1 day  STARTS ‘2018-08-25 22:30:00’ </p><p>表示创建时间定时周期，以及开始时间，该处表示从2018-08-25-10点半起，每天执行一次该任务</p></li><li><p>ON COMPLETION [NOT] PRESERVE—事件执行完之后，不会被删除(没有not)，如果加了not，则会删除</p></li><li><p>ENABLE —表示系统将执行这个事件</p></li><li><p>del_time—就是刚才写的那个存储程序（其实这里可以直接写sql语句也是可以的）</p></li></ul></li></ul><p><img src="https://mysqllimages.oss-cn-shenzhen.aliyuncs.com/%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6.png" alt></p><blockquote><p><font size="4" color="blue">至此，你的定时任务事件已经开启(ENABLE表示打开事务)</font></p></blockquote><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 定时操作的额外语句</span><br><span class="line">   -- 查询存储程序</span><br><span class="line">      show create procedure del_time</span><br><span class="line">   -- 删除存储程序</span><br><span class="line">      drop procedure del_time</span><br><span class="line">   -- 查看定时事件</span><br><span class="line">      select * from  mysql.event</span><br><span class="line">   -- 删除定时事件</span><br><span class="line">      DROP EVENT del_event</span><br><span class="line">   -- 事件的开启</span><br><span class="line">      ALTER EVENT del_event ON COMPLETION PRESERVE ENABLE</span><br><span class="line">   -- 事件的关闭</span><br><span class="line">      Alter EVENT del_event ON COMPLETION PRESERVE DISABLE</span><br></pre></td></tr></table></figure><br><blockquote><p>参考的文章：<a href="https://www.jianshu.com/p/bbab32eb3323" target="_blank" rel="noopener">https://www.jianshu.com/p/bbab32eb3323</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win7重装系统</title>
      <link href="2019/08/17/win7%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
      <url>2019/08/17/win7%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<!--阅读更多--><h1 id="win7重装"><a href="#win7重装" class="headerlink" title="win7重装"></a>win7重装</h1><p>感受：第一次重装win7的时候，简直太苦，感觉所有的坑我都遇上了</p><br><p><strong>下面我就详细的介绍我重装win7的流程</strong></p><blockquote><p>描述：</p><p>安装操作系统，目前基本上最简便的就是U盘安装，通过U盘来安装window7这个操作系统，以U盘作为启动盘；实际操作过程中我们用到最多的工具要数UltraISO这个软件了。</p></blockquote><h2 id="一-准备家当"><a href="#一-准备家当" class="headerlink" title="一.准备家当"></a>一.准备家当</h2><ol><li>一个至少4G的U盘</li><li>win7iso镜像文件</li><li>下载好UltraISO软件</li></ol><br><h3 id="1-首先在i-tell-you-下载好你想要的win7系统镜像的版本"><a href="#1-首先在i-tell-you-下载好你想要的win7系统镜像的版本" class="headerlink" title="1.首先在i tell you   下载好你想要的win7系统镜像的版本"></a>1.首先在<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">i tell you</a>   下载好你想要的win7系统镜像的版本</h3><ul><li>这里我选择我自己下载的win7系统为例,复制下图所标注的地址到迅雷那里下载</li></ul><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/i_tell_u.png" alt></p><h3 id="2-先通过“驱动注入工具-EXE”（20min的等待时间，别再那苦苦等待啦）"><a href="#2-先通过“驱动注入工具-EXE”（20min的等待时间，别再那苦苦等待啦）" class="headerlink" title="2.先通过“驱动注入工具.EXE”（20min的等待时间，别再那苦苦等待啦）"></a>2.<strong>先通过“<a href="http://iknow.lenovo.com/detail/dc_178680.html" target="_blank" rel="noopener">驱动注入工具.EXE</a>”（20min的等待时间，别再那苦苦等待啦）</strong></h3><blockquote><p><strong>1、作用：使得Win7系统镜像文件中注入USB3.0和NVME的驱动，注入成功后，可完美解决新机型安装Win7系统时无法识别磁盘的问题，否则就会出现下图的问题。</strong></p><p><strong>2、原因：微软的win7系统中没有集成USB3.0驱动以及SSD nvme驱动，所以，如果你没有USB3.0驱动程序，故而无法识别相关硬件，u盘或者固态硬盘，自然造成win7无法顺利安装，而win10系统中集成了 USB3.0驱动以及SSD nvme驱动，所以如果重装win10的话，可以跳过这一步</strong></p></blockquote><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E7%BC%BA%E5%B0%91%E9%A9%B1%E5%8A%A8.jpg" alt></p><h3 id="3-把系统镜像写入到软碟通（UltraISO）"><a href="#3-把系统镜像写入到软碟通（UltraISO）" class="headerlink" title="3.把系统镜像写入到软碟通（UltraISO）"></a>3.把系统镜像写入到软碟通（UltraISO）</h3><blockquote><p>经过第二步的操作之后，会生成一个加持过的win7镜像文件，位置在你进行注入的时候，选择的保存目录中，<strong>然后建议先备份一下u盘里的文件，因为后面的格式化掉</strong></p></blockquote><h4 id="1-点击左上角的文件，点击打开，选择加持后的系统镜像"><a href="#1-点击左上角的文件，点击打开，选择加持后的系统镜像" class="headerlink" title="1.点击左上角的文件，点击打开，选择加持后的系统镜像"></a>1.点击左上角的文件，点击打开，选择加持后的系统镜像</h4><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E6%89%93%E5%BC%80.png" alt></p><h3 id="2-写入硬盘镜像"><a href="#2-写入硬盘镜像" class="headerlink" title="2.写入硬盘镜像"></a>2.写入硬盘镜像</h3><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%86%99%E5%85%A5%E9%95%9C%E5%83%8F.png" alt></p><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%86%99%E5%85%A5%E9%95%9C%E5%83%8F2.png" alt></p><blockquote><p><font size="4"><strong>前面叫你备份的原因</strong></font></p></blockquote><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%86%99%E5%85%A5%E9%95%9C%E5%83%8F3.png" alt></p><blockquote><p><font color="blue" size="4">至此，准备工作就此完成，万事具备，只欠重启，建议重启之前，先上网查一下你电脑进入BIOS的快捷键（当然如果你熟知，可以跳过查询操作，直接重启）</font></p></blockquote><br><h2 id="二-重装win7"><a href="#二-重装win7" class="headerlink" title="二.重装win7"></a>二.重装win7</h2><blockquote><p><strong>考虑到部分同学看到英文就缺氧，进入BIOS就转向，这里给出BIOS里设置U盘启动的详细图示。以下以我的上笔记本为例。</strong></p></blockquote><h3 id="1-进入BIOS界面，把U盘设置为启动盘，保存并退出"><a href="#1-进入BIOS界面，把U盘设置为启动盘，保存并退出" class="headerlink" title="1.进入BIOS界面，把U盘设置为启动盘，保存并退出"></a>1.进入BIOS界面，把U盘设置为启动盘，保存并退出</h3><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/bios%E7%95%8C%E9%9D%A2.jpg" alt></p><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E4%BC%98%E5%85%88%E9%A1%B9.jpg" alt></p><br><h3 id="2-安装程序"><a href="#2-安装程序" class="headerlink" title="2.安装程序"></a>2.安装程序</h3><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A21.jpg" alt></p><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A22.jpg" alt></p><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A23.jpg" alt></p><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A24.jpg" alt></p><p><img src="https://win7images.oss-cn-beijing.aliyuncs.com/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A25.jpg" alt></p><blockquote><p><font color="blue" size="5">至此，win7系统已重装完毕</font></p></blockquote><br><h3 id="3-安装驱动"><a href="#3-安装驱动" class="headerlink" title="3.安装驱动"></a>3.安装驱动</h3><blockquote><p>win7系统是集成没有网卡驱动的</p></blockquote><p>自行到一台能上网的电脑，到你本电脑的官网的最底下下载一个网卡驱动，通过u盘传进你电脑，有了网卡驱动，你就可以上网下载你需要的app了</p>]]></content>
      
      
      <categories>
          
          <category> 重装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm框架搭建及测试</title>
      <link href="2019/08/16/ssm%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>2019/08/16/ssm%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<!--阅读更多--><h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><h2 id="一-准备家当"><a href="#一-准备家当" class="headerlink" title="一.准备家当"></a>一.准备家当</h2><ul><li>JDK8</li><li>idea2018</li><li>maven3.6</li><li>tomcat8</li></ul><h2 id="二-整合"><a href="#二-整合" class="headerlink" title="二.整合"></a>二.整合</h2><h3 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h3><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.png" alt></p><blockquote><p><strong>GroupId:是你公司域名的倒写</strong></p><p><strong>ArtifactId:是你的项目名</strong></p></blockquote><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E5%9F%9F%E5%90%8D%E9%A1%B9%E7%9B%AE%E5%90%8D.png" alt></p><blockquote><p><strong>选择你已安装的maven目录</strong></p></blockquote><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/maven%E4%BE%9D%E8%B5%96%E7%9A%84%E7%9B%AE%E5%BD%95.png" alt></p><blockquote><p><strong>修改你项目保存的位置</strong></p></blockquote><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E4%BF%AE%E6%94%B9%E4%BF%9D%E5%AD%98%E7%9A%84%E7%9B%AE%E5%BD%95.png" alt></p><h3 id="2-建立项目的文件架构"><a href="#2-建立项目的文件架构" class="headerlink" title="2.建立项目的文件架构"></a>2.建立项目的文件架构</h3><h4 id="1-建立必要的resources，java文件夹，并标记目录"><a href="#1-建立必要的resources，java文件夹，并标记目录" class="headerlink" title="1.建立必要的resources，java文件夹，并标记目录"></a>1.建立必要的resources，java文件夹，并标记目录</h4><blockquote><p><strong>src存放你写的java代码</strong></p></blockquote><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/java%E7%9B%AE%E5%BD%95.png" alt></p><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/resources.png" alt></p><h4 id="2-最终结构树"><a href="#2-最终结构树" class="headerlink" title="2.最终结构树"></a>2.最终结构树</h4><blockquote><p><strong>注意：在建立文件结构树时，你需要先进行如下图操作</strong></p><p><strong>这是为了你接下来建包时能建立树状结构</strong></p></blockquote><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84.png" alt></p><blockquote><p><strong>然后你需要按照下图建立这个文件结构</strong></p></blockquote><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt></p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><blockquote><p>接下来的操作，大部分你只需要复制粘贴就完事了，需要稍微修改的地方我会指出来的</p><p>有些报红，你需要改一下，因为有些包名跟你的不一致，如com.xxx</p><p>而又些报红是因为文件夹下没有文件，所以会暂时报红，后续会解决</p></blockquote><h4 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h4><blockquote><p><strong>注意：你只需要把</strong><br> <strong><groupid>com.xhp</groupid></strong><br> <strong><artifactid>ssm</artifactid></strong></p><p><strong>改成你自己的</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--组织名称，一般是公司的域名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xhp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目，模块名称--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--属性的定义--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目构建使用字符编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编辑源代码的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--目标代码的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖属性的引用，方便后缀修改版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--依赖们，即你所需要的jar包，到maven中央仓库找--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring依赖start=============--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--利用它来处理事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring依赖 end===================--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--json数据处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--新添加处理java为javabean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理添加json为javabean   end============--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--持久层依赖  start===========--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--持久层依赖   end=============--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志依赖  start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;groupId&gt;log4j&lt;/groupId&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;artifactId&gt;log4j&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;version&gt;1.2.17&lt;/version&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志依赖  end==========--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源的引入，池化技术--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis与spring的整合所需要的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet，jsp，jstl等依赖  start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet，jsp，jstl等依赖  end=======--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理时间日期格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis分页依赖 start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis分页依赖   end============--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--apache用于MD5加密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-web-xml"><a href="#2-web-xml" class="headerlink" title="2.web.xml"></a>2.web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--指定整个程序上下文信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--注册一个前端控制器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        这里写得名字是有讲究的</span></span><br><span class="line"><span class="comment">        如果我们不去修改spring配置文件默认的位置，那么springmvc</span></span><br><span class="line"><span class="comment">        它会去WEB-INF下面找一个springmvc-servlet.xml的文件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--上下文配置的位置的制定--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--servlet映射配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里统一写个斜杠--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定字符编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--注册一个支持所有http请求的过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--spring启动监听器配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-spring-mybatis-xml"><a href="#3-spring-mybatis-xml" class="headerlink" title="3.spring-mybatis.xml"></a>3.spring-mybatis.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:lang</span>=<span class="string">"http://www.springframework.org/schema/lang"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自动扫描，指定mapper接口存放在该包下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xhp.mapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入数据库相关信息配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果有需要,把所有的属性全部写到properties文件中--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--c3p0连接池的私有属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关闭连接后不自动commit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--获取连接超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"100000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接失败后尝试次数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最后关键一步,如何整合mybatis--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注入一股mybatis的sqlsessionFactory这就是我们所需要的关键步骤2.声明式事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入mappers文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这就是要求所有的(resources)mapper文件必须在com/jg/mapper/之下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/xhp/mapper/**/*.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--可以加入驼峰命名法其他mybatis的配置也就是mybatis.cfg.xml的相关配置都会转移到这里--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--插件配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--分页插件的配置，拦截器实现分页功能--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--这里面几个配置作为演示使用,不理解,一定去掉--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--   helperDialect=mysql</span></span><br><span class="line"><span class="comment">                               reasonable=true</span></span><br><span class="line"><span class="comment">                               supportMethodsArguments=true</span></span><br><span class="line"><span class="comment">                               params=count=countSql</span></span><br><span class="line"><span class="comment">                               autoRuntimeDialect=true--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--持久化接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mapper接口所在包名，Spring会自动查找其下的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xhp.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务管理 使用数据源事务管理类进行管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--确定事务管理的策略 transactionManager:指向上面的transactionManage--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">id</span>=<span class="string">"transactionAdvice"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--事务管理的相关值以及它的传播性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--查询相关配置为只读,select开头或者get或者query--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用AOP对事务管理的范围进行织入明确几个点1.对哪些地方需要进行事务管理execution书写,明确边界,2使用什么策略去管理</span></span><br><span class="line"><span class="comment">  策略我们使用了tx:advice全部书写与其中,在我们的aop的advice当中只需要去引用这个事务管理器者的建议即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xhp.service..*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"transactionAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txCut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--采用注解进行事务管理,请在service的实现类上面加上@Transanction注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-spring-context-xml"><a href="#4-spring-context-xml" class="headerlink" title="4.spring-context.xml"></a>4.spring-context.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.spring容器注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.自动扫描配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xhp.service"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.激活aop注解方式的代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--消息格式的转换--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"registerDefaultFormatters"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.number.NumberFormatAnnotationFormatterFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatterRegistrars"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormatter"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"yyyyMMdd"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-applicationContext-xml"><a href="#4-applicationContext-xml" class="headerlink" title="4.applicationContext.xml"></a>4.applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tool"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入其他spring配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring/spring-*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-spring-servlet-xml"><a href="#5-spring-servlet-xml" class="headerlink" title="5.spring-servlet.xml"></a>5.<strong>spring-servlet.xml</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tool"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启用注解  排除service注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xhp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加上MVC驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用AOP对事务管理的范围进行织入明确几个点1.对哪些地方需要进行事务管理execution书写,明确边界,2使用什么策略去管理</span></span><br><span class="line"><span class="comment">  策略我们使用了tx:advice全部书写与其中,在我们的aop的advice当中只需要去引用这个事务管理器者的建议即可--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-springmvc-xml"><a href="#6-springmvc-xml" class="headerlink" title="6.springmvc.xml"></a>6.springmvc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string"> "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一个注解扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xhp.controller"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定所上传的总大小不能超过1T。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--视图解析器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.前缀  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.后缀  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认的servlet处理者--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-jdbc-properties"><a href="#7-jdbc-properties" class="headerlink" title="7.jdbc.properties"></a>7.jdbc.properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=根据实际情况填写</span><br><span class="line">jdbc.driver=根据实际情况填写</span><br><span class="line">jdbc.username=根据实际情况填写</span><br><span class="line">jdbc.password=根据实际情况填写</span><br></pre></td></tr></table></figure><h4 id="8-log4j-properties"><a href="#8-log4j-properties" class="headerlink" title="8.log4j.properties"></a>8.log4j.properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=ERROR, stdout</span><br><span class="line"># MyBatis logging configuration...</span><br><span class="line">log4j.logger.com.how2java.tmall=TRACE</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h4 id="9-WebPathServlet"><a href="#9-WebPathServlet" class="headerlink" title="9.WebPathServlet"></a>9.WebPathServlet</h4><blockquote><p>这里我建议：在java目录下的com.xxx新建一个servlet的包</p><p>然后新建一个WebPathServlet的类，然后把下面的代码复制进去</p><p>这是为了如果项目的tomcat服务更改了application context的话，我们的代码不更改也可以照常运行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.jg.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletConfig;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line"></span><br><span class="line">@WebServlet(urlPatterns = &#123;&#125;,loadOnStartup = 2)</span><br><span class="line">public class WebPathInitServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">        //在整体的应用上下文当中存储了一个ctx的值，用它来引用上下文路径。</span><br><span class="line">        config.getServletContext().setAttribute("ctx",config.getServletContext().getContextPath());</span><br><span class="line">        super.init(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-测试"><a href="#三-测试" class="headerlink" title="三.测试"></a>三.测试</h2><h4 id="1-数据库的客户端新建一个表"><a href="#1-数据库的客户端新建一个表" class="headerlink" title="1.数据库的客户端新建一个表"></a>1.数据库的客户端新建一个表</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E8%A1%A8.png" alt></p><h4 id="2-完善你的jdbc-properties的信息"><a href="#2-完善你的jdbc-properties的信息" class="headerlink" title="2.完善你的jdbc.properties的信息"></a>2.完善你的jdbc.properties的信息</h4><h4 id="3-在webapp目录下新建一个login-jsp"><a href="#3-在webapp目录下新建一个login-jsp" class="headerlink" title="3.在webapp目录下新建一个login.jsp"></a>3.在webapp目录下新建一个login.jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/user/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"pwd"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-在entity包下新建一个User类"><a href="#4-在entity包下新建一个User类" class="headerlink" title="4.在entity包下新建一个User类"></a>4.在entity包下新建一个User类</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/entity%E5%8C%85.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xhp.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-在Controller包下新建UserController类"><a href="#5-在Controller包下新建UserController类" class="headerlink" title="5.在Controller包下新建UserController类"></a>5.在Controller包下新建UserController类</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/Controller%E5%8C%85.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xhp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xhp.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.xhp.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        User user1=userService.checkUser(user);</span><br><span class="line">        <span class="keyword">if</span>(user1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login success"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login unsuccessful"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-在service包下分别建立一个impl的包和一个UserService的接口"><a href="#6-在service包下分别建立一个impl的包和一个UserService的接口" class="headerlink" title="6.在service包下分别建立一个impl的包和一个UserService的接口"></a>6.在service包下分别建立一个impl的包和一个UserService的接口</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/service%E5%8C%85.png" alt></p><ul><li><strong>UserServiceimpl</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xhp.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xhp.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.xhp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.xhp.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceimpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">checkUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.query(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>UserService</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xhp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xhp.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">checkUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-在mapper包下新建UserMapper接口"><a href="#7-在mapper包下新建UserMapper接口" class="headerlink" title="7.在mapper包下新建UserMapper接口"></a>7.在mapper包下新建UserMapper接口</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/mapper%E5%8C%85.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xhp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xhp.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">query</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-在resources文件夹下的mapper包新建UserMapper-xml"><a href="#8-在resources文件夹下的mapper包新建UserMapper-xml" class="headerlink" title="8.在resources文件夹下的mapper包新建UserMapper.xml"></a>8.在resources文件夹下的mapper包新建UserMapper.xml</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/resources%E5%8C%85.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//ibatis.apache.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xhp.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultType</span>=<span class="string">"com.xhp.entity.User"</span>&gt;</span></span><br><span class="line">        select name,pwd</span><br><span class="line">        FROM t_user</span><br><span class="line">        where</span><br><span class="line">        name=#&#123;name&#125;</span><br><span class="line">        and</span><br><span class="line">        pwd=#&#123;pwd&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-配置tomcat"><a href="#9-配置tomcat" class="headerlink" title="9.配置tomcat"></a>9.配置tomcat</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E9%85%8D%E7%BD%AEtomcat.png" alt></p><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E9%85%8D%E7%BD%AEtomcat2.png" alt></p><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E9%85%8D%E7%BD%AEtomcat3.png" alt></p><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E9%85%8D%E7%BD%AEtomcat4.png" alt></p><h4 id="10-启动服务"><a href="#10-启动服务" class="headerlink" title="10.启动服务"></a>10.启动服务</h4><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F1.png" alt></p><p><strong>结果如下：</strong></p><p><img src="https://ssmimages.oss-cn-beijing.aliyuncs.com/%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java短信验证码的实现</title>
      <link href="2019/08/15/JAVA%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>2019/08/15/JAVA%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA实现短信验证码"><a href="#JAVA实现短信验证码" class="headerlink" title="JAVA实现短信验证码"></a>JAVA实现短信验证码</h1><!--阅读更多--><p>这里是用maven来实现，你也可以是普通的java工程，在这里，他们只是导jar包的方式有点不一样而已，maven相对来说要简单一点，只需要加依赖就好。</p><h2 id="一-准备家当"><a href="#一-准备家当" class="headerlink" title="一.准备家当"></a>一.准备家当</h2><ol><li>开通阿里云短信服务</li><li>IntelliJ IDEA 2018</li></ol><h2 id="二-获取签名名称、模版CODE以及AK（因为代码需要用到这4个东西）"><a href="#二-获取签名名称、模版CODE以及AK（因为代码需要用到这4个东西）" class="headerlink" title="二.获取签名名称、模版CODE以及AK（因为代码需要用到这4个东西）"></a>二.获取签名名称、模版CODE以及AK（因为代码需要用到这4个东西）</h2><blockquote><p><strong>这是使用阿里云短信服务必备的东西</strong></p></blockquote><h3 id="1-登录阿里云平台，选择短信服务"><a href="#1-登录阿里云平台，选择短信服务" class="headerlink" title="1.登录阿里云平台，选择短信服务"></a>1.登录阿里云平台，选择短信服务</h3><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91%E5%B9%B3%E5%8F%B0.png" alt></p><h3 id="2-短信服务开通"><a href="#2-短信服务开通" class="headerlink" title="2.短信服务开通"></a>2.短信服务开通</h3><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%BC%80%E9%80%9A.png" alt></p><h3 id="3-获取AK"><a href="#3-获取AK" class="headerlink" title="3.获取AK"></a>3.获取AK</h3><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E5%A4%B4%E5%83%8F.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/AK%E5%AE%89%E5%85%A8%E6%8F%90%E7%A4%BA.png" alt></p><h3 id="4-开通RAM访问控制，点击“立即开通”即可"><a href="#4-开通RAM访问控制，点击“立即开通”即可" class="headerlink" title="4.开通RAM访问控制，点击“立即开通”即可"></a>4.开通RAM访问控制，点击“立即开通”即可</h3><h3 id="5-新建用户"><a href="#5-新建用户" class="headerlink" title="5.新建用户"></a>5.新建用户</h3><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%96%B0%E5%BB%BAAccessKey%E6%88%90%E5%8A%9F.png" alt></p><blockquote><p><font color="blue" size="5">注意：务必保存好AK信息！！！！！！</font></p></blockquote><h3 id="6-给创建的用户授权（一共需添加4个权限）"><a href="#6-给创建的用户授权（一共需添加4个权限）" class="headerlink" title="6.给创建的用户授权（一共需添加4个权限）"></a>6.给创建的用户授权（一共需添加4个权限）</h3><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%8E%88%E6%9D%832.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%8E%88%E6%9D%83.png" alt></p><h3 id="7-添加签名名称"><a href="#7-添加签名名称" class="headerlink" title="7.添加签名名称"></a>7.添加签名名称</h3><ul><li>到短信服务界面</li></ul><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%B7%BB%E5%8A%A0%E7%AD%BE%E5%90%8D.png" alt></p><ul><li>注意我这里填的“测试”是没有通过审核的，我后来改成了“加工厂”通过了</li></ul><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%B7%BB%E5%8A%A0%E7%AD%BE%E5%90%8D%E8%BF%87%E7%A8%8B%E5%AE%A1%E6%A0%B8.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E7%AD%BE%E5%90%8D%E6%88%90%E5%8A%9F.png" alt></p><h3 id="8-添加模板CODE"><a href="#8-添加模板CODE" class="headerlink" title="8.添加模板CODE"></a>8.添加模板CODE</h3><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%B7%BB%E5%8A%A0%E6%A8%A1%E6%9D%BF.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%A8%A1%E6%9D%BF%E5%AE%A1%E6%A0%B8.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%A8%A1%E6%9D%BF%E6%88%90%E5%8A%9F.png" alt></p><h2 id="三-JAVA代码-maven项目"><a href="#三-JAVA代码-maven项目" class="headerlink" title="三.JAVA代码(maven项目)"></a>三.JAVA代码(maven项目)</h2><ul><li><a href="https://help.aliyun.com/document_detail/55284.html?spm=a2c4g.11186623.6.661.393756e0O7n2yl" target="_blank" rel="noopener">可参考JAVA短信发送API官方开发文档</a>：这个开发文档里面有SDK及DEMO的下载，也可用我下面的代码</li></ul><blockquote><p>下面分2大部分：</p><p>第一部分是一个测试的Main方法（可以立竿见影，手动狗头）；</p><p>第二部分是把测试的Main方法改成接口，json数据格式返回</p></blockquote><h3 id="Part1：Main方法测试代码"><a href="#Part1：Main方法测试代码" class="headerlink" title="Part1：Main方法测试代码"></a>Part1：Main方法测试代码</h3><h4 id="1-pom文件添加依赖"><a href="#1-pom文件添加依赖" class="headerlink" title="1.pom文件添加依赖"></a>1.<strong>pom文件添加依赖</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 注：如提示报错，先升级基础包版，无法解决可联系技术支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-新建一个Controller，把下面的全部代码复制粘贴"><a href="#2-新建一个Controller，把下面的全部代码复制粘贴" class="headerlink" title="2.新建一个Controller，把下面的全部代码复制粘贴"></a>2.新建一个Controller，把下面的全部代码复制粘贴</h4><blockquote><p><strong>你只需要修改有TODO的地方，一共只有5个地方</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.IClientProfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云短信服务：</span></span><br><span class="line"><span class="comment"> * 注意：需要 签名名称、模版CODE 以及 RAM访问控制中的 AccessKeyID 和 AccessKeySecret  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">SendSms</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化ascClient需要的几个参数</span></span><br><span class="line">        <span class="comment">//短信API产品名称（短信产品名固定，无需修改）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">static</span> String product = <span class="string">"Dysmsapi"</span>;</span><br><span class="line">        <span class="comment">//短信API产品域名（接口地址固定，无需修改）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">static</span> String domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SendSmsResponse <span class="title">sendSms</span><span class="params">(String telephone, String code)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">        <span class="comment">//设置超时时间-可自行调整</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换成你的AK</span></span><br><span class="line">        <span class="keyword">final</span> String accessKeyId = <span class="string">"你的accessKeyId"</span>;<span class="comment">//TODO 改成你的accessKeyId</span></span><br><span class="line">        <span class="keyword">final</span> String accessKeySecret = <span class="string">"你的accessKeySecret"</span>;<span class="comment">//TODO 改你的accessKeySecret</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化ascClient,暂时不支持多region（请勿修改）</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId,accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">        <span class="comment">//组装请求对象</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">        <span class="comment">//必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式；发送国际/港澳台消息时，接收号码格式为国际区号+号码，如“85200000000”</span></span><br><span class="line">        request.setPhoneNumbers(telephone);</span><br><span class="line">        <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(<span class="string">"你的签名"</span>);<span class="comment">//TODO 改成你的签名</span></span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到，发送国际/港澳台消息时，请使用国际/港澳台短信模版</span></span><br><span class="line">        request.setTemplateCode(<span class="string">"你的模板CODE"</span>);<span class="comment">//TODO 改成你的模板CODE</span></span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">        <span class="comment">//友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\\r\\n,否则会导致JSON在服务端解析失败</span></span><br><span class="line">        request.setTemplateParam(<span class="string">"&#123;\"name\":\"Tom\", \"code\":\"123\"&#125;"</span>);</span><br><span class="line">        <span class="comment">//可选-上行短信扩展码(扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段)</span></span><br><span class="line">        <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line">        <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line">        request.setOutId(<span class="string">"yourOutId"</span>);</span><br><span class="line">        <span class="comment">//请求失败这里会抛ClientException异常</span></span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        <span class="keyword">if</span>(sendSmsResponse.getCode()!= <span class="keyword">null</span> &amp;&amp; sendSmsResponse.getCode().equals(<span class="string">"OK"</span>))&#123;</span><br><span class="line">        System.out.println(<span class="string">"短信发送成功！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"短信发送失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sendSmsResponse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成4位验证码</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> newCode;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNewcode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> newCode;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNewcode</span><span class="params">()</span></span>&#123;</span><br><span class="line">                newCode = (<span class="keyword">int</span>)(Math.random()*<span class="number">9000</span>)+<span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClientException, InterruptedException </span>&#123;</span><br><span class="line">        setNewcode();</span><br><span class="line">        String code = Integer.toString(getNewcode());</span><br><span class="line">        System.out.println(<span class="string">"发送的验证码为："</span>+code);</span><br><span class="line">        <span class="comment">//发短信</span></span><br><span class="line">        SendSmsResponse response =sendSms(<span class="string">"你的手机号码"</span>,code); <span class="comment">// TODO 填写你需要测试的手机号码</span></span><br><span class="line">        System.out.println(<span class="string">"短信接口返回的数据----------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Code="</span> + response.getCode());</span><br><span class="line">        System.out.println(<span class="string">"Message="</span> + response.getMessage());</span><br><span class="line">        System.out.println(<span class="string">"RequestId="</span> + response.getRequestId());</span><br><span class="line">        System.out.println(<span class="string">"BizId="</span> + response.getBizId());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%E6%8E%A7%E5%88%B6%E5%8F%B0.png" alt></p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81.png" alt></p><h3 id="Part2-改成接口形式，返回json格式"><a href="#Part2-改成接口形式，返回json格式" class="headerlink" title="Part2:改成接口形式，返回json格式"></a>Part2:改成接口形式，返回json格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.IClientProfile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> com.jg.service.RegisterService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里云短信服务：</span></span><br><span class="line"><span class="comment">     * 注意：需要 签名名称、模版CODE 以及 RAM访问控制中的 AccessKeyID 和 AccessKeySecret  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//初始化ascClient需要的几个参数</span></span><br><span class="line">    <span class="comment">//短信API产品名称（短信产品名固定，无需修改）</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String product = <span class="string">"Dysmsapi"</span>;</span><br><span class="line">    <span class="comment">//短信API产品域名（接口地址固定，无需修改）</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SendSmsResponse <span class="title">sendSms</span><span class="params">(String telephone, String code)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换成你的AK</span></span><br><span class="line">        <span class="keyword">final</span> String accessKeyId = <span class="string">"你的accessKeyId"</span>;   <span class="comment">//TODO 改成你的accessKeyId</span></span><br><span class="line">        <span class="keyword">final</span> String accessKeySecret = <span class="string">"你的accessKeySecret"</span>;<span class="comment">//TODO 改你的accessKeySecret</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">        <span class="comment">//组装请求对象-具体描述见控制台-文档部分内容</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">        <span class="comment">//必填:待发送手机号</span></span><br><span class="line">        request.setPhoneNumbers(telephone);</span><br><span class="line">         <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(<span class="string">"你的签名"</span>);<span class="comment">//TODO 改成你的签名</span></span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到，发送国际/港澳台消息时，请使用国际/港澳台短信模版</span></span><br><span class="line">        request.setTemplateCode(<span class="string">"你的模板CODE"</span>);<span class="comment">//TODO 改成你的模板CODE</span></span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">        <span class="comment">//友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\\r\\n,否则会导致JSON在服务端解析失败</span></span><br><span class="line">        request.setTemplateParam(<span class="string">"&#123;\"code\":\""</span> + code + <span class="string">"\"&#125;"</span>);</span><br><span class="line">        <span class="comment">//选填-上行短信扩展码(无特殊需求用户请忽略此字段)</span></span><br><span class="line">        <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line">        <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line">        request.setOutId(<span class="string">"yourOutId"</span>);</span><br><span class="line">        <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        <span class="keyword">if</span>(sendSmsResponse.getCode()!= <span class="keyword">null</span> &amp;&amp; sendSmsResponse.getCode().equals(<span class="string">"OK"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"短信发送成功！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"短信发送失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sendSmsResponse;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//随机生成4位验证码</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> newCode;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNewcode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNewcode</span><span class="params">()</span></span>&#123;</span><br><span class="line">            newCode = (<span class="keyword">int</span>)(Math.random()*<span class="number">9999</span>)+<span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sendSms"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String , String &gt; register(String telephone) <span class="keyword">throws</span> ClientException, InterruptedException&#123;</span><br><span class="line"></span><br><span class="line">        telephone=<span class="string">"你测试的手机号码"</span>;<span class="comment">//TODO 填写你测试的手机号码，测试完后可以删掉，只要前台传手机号码过来即可</span></span><br><span class="line">        Map&lt;String , String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        setNewcode();</span><br><span class="line">        String code = Integer.toString(getNewcode());</span><br><span class="line">        System.out.println(<span class="string">"发送的验证码为："</span>+code);</span><br><span class="line">        <span class="comment">//发短信</span></span><br><span class="line">        SendSmsResponse response =sendSms(telephone,code); </span><br><span class="line"><span class="comment">//        System.out.println("短信接口返回的数据----------------");</span></span><br><span class="line"><span class="comment">//        System.out.println("Code=" + response.getCode());</span></span><br><span class="line"><span class="comment">//        System.out.println("Message=" + response.getMessage());</span></span><br><span class="line"><span class="comment">//        System.out.println("RequestId=" + response.getRequestId());</span></span><br><span class="line"><span class="comment">//        System.out.println("BizId=" + response.getBizId());</span></span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"Code"</span>,response.getCode());</span><br><span class="line">        map.put(<span class="string">"Message"</span>,response.getMessage());</span><br><span class="line">        map.put(<span class="string">"RequestId"</span>,response.getRequestId());</span><br><span class="line">        map.put(<span class="string">"BizId"</span>,response.getBizId());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://codeimages.oss-cn-shenzhen.aliyuncs.com/%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%B5%8B%E8%AF%95.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云上安装JDK、Mysql、Tomcat以及其配置过程</title>
      <link href="2019/08/15/linux%E4%B8%8A%E5%AE%89%E8%A3%85JDK%E3%80%81Mysql%E3%80%81Tomcat%E4%BB%A5%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/"/>
      <url>2019/08/15/linux%E4%B8%8A%E5%AE%89%E8%A3%85JDK%E3%80%81Mysql%E3%80%81Tomcat%E4%BB%A5%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在阿里云上安装JDK、Mysql、Tomcat"><a href="#如何在阿里云上安装JDK、Mysql、Tomcat" class="headerlink" title="如何在阿里云上安装JDK、Mysql、Tomcat"></a>如何在阿里云上安装JDK、Mysql、Tomcat</h1><h2 id="准备家当"><a href="#准备家当" class="headerlink" title="准备家当"></a><strong>准备家当</strong></h2><ul><li>操作系统：购买阿里云的服务器：CentOS 7</li><li>工具：<a href="https://usualsoftware.oss-cn-shenzhen.aliyuncs.com/putty/putty.exe" target="_blank" rel="noopener">putty</a>和winSCP</li><li>JDK版本：1.8</li><li>Tomcat版本：9</li><li>Mysql版本：5.7</li></ul><p><strong>有2种方法安装软件：</strong></p><ol><li><p>傻瓜式(宝塔面板)</p><ul><li><p>图形化界面</p></li><li><p>相当于在360中的一键安装</p></li></ul></li><li><p>命令行（掌握）：安装软件一般有三种方式</p><ol><li>rpm</li><li>解压缩</li><li>yum</li></ol></li></ol><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>通过rpm方式</p><h3 id="1-首先到官网下载jdk8到本地（此方法不需要配置环境变量）JDK下载"><a href="#1-首先到官网下载jdk8到本地（此方法不需要配置环境变量）JDK下载" class="headerlink" title="1.首先到官网下载jdk8到本地（此方法不需要配置环境变量）JDK下载"></a>1.首先到官网下载jdk8到本地（此方法不需要配置环境变量）<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK下载</a></h3><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/jdk%E4%B8%8B%E8%BD%BD.png" alt="1564241027161"></p><h3 id="2-通过winSCP把rpm文件上传到云服务器上"><a href="#2-通过winSCP把rpm文件上传到云服务器上" class="headerlink" title="2.通过winSCP把rpm文件上传到云服务器上"></a>2.通过winSCP把rpm文件上传到云服务器上</h3><ul><li><p>2-1 进入登录界面，主机名为你服务器的外网ip，用户名和密码是进入你服务器的信息</p><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/winSCP%E7%99%BB%E5%BD%95.png" alt="1564241239076"></p></li></ul><h3 id="3-把rpm文件直接拖拽到右侧"><a href="#3-把rpm文件直接拖拽到右侧" class="headerlink" title="3.把rpm文件直接拖拽到右侧"></a>3.把rpm文件直接拖拽到右侧</h3><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E6%8B%96%E6%8B%BD.png" alt="1564241761116"></p><h3 id="4-通过putty工具远程登录连接到服务器"><a href="#4-通过putty工具远程登录连接到服务器" class="headerlink" title="4.通过putty工具远程登录连接到服务器"></a>4.通过putty工具远程登录连接到服务器</h3><ul><li><font size="4">4-1 填入你服务器的外网ip，接着点‘open’</font></li></ul><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/puttyLogin.png" alt="1564154862568"></p><ul><li><font size="4">4-2  用户名和密码与你上述输入winSCP的信息一致（密码需要你自行去你服务器的管理端设置），下面黑框的密码是隐藏的（不要以为是卡了）</font></li></ul><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/putty%E9%BB%91%E6%A1%86%E7%99%BB%E5%BD%95.png" alt></p><h3 id="5-安装jdk"><a href="#5-安装jdk" class="headerlink" title="5.安装jdk"></a>5.安装jdk</h3><ul><li><p>5-1 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看当前目录下的文件：ls</span><br><span class="line"></span><br><span class="line">执行安装命令：rpm -ivh jdk-8u221-linux-x64.rpm</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A2.png" alt="1564242402712"></p><ul><li><p>5-2  <strong>默认安装在 /usr/java文件夹中，出现下列的信息，说明安装成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检验是否jdk安装成功：</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></li></ul><p>  <img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E6%A3%80%E9%AA%8Cjava.png" alt="1564242556940"></p><h3 id="6、jdk卸载"><a href="#6、jdk卸载" class="headerlink" title="6、jdk卸载"></a>6、jdk卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测当前系统是否存在java环境： java -version</span></span><br><span class="line"><span class="comment"># 先查看jdk版本的信息：rpm -qa|grep jdk</span></span><br><span class="line"><span class="comment"># 卸载：rpm -e --nodeps jdk的版本信息</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9ick8j8tmsj93waiowZ java]<span class="comment"># rpm -qa|grep jdk</span></span><br><span class="line">jdk1.8-1.8.0_221-fcs.x86_64</span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ java]<span class="comment"># rpm -e --nodeps jdk1.8-1.8.0_221-fcs.x86_64</span></span><br><span class="line">[root@iZwz9ick8j8tmsj93waiowZ java]<span class="comment"># java -version</span></span><br><span class="line">-bash: /usr/bin/java: No such file or directory</span><br></pre></td></tr></table></figure><h2 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h2><p>通过解压缩方式</p><h3 id="1-下载Tomcat9"><a href="#1-下载Tomcat9" class="headerlink" title="1.下载Tomcat9"></a>1.下载<a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">Tomcat9</a></h3><p>linux默认的解压格式是tar.gz</p><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/tomcat9%E4%B8%8B%E8%BD%BD.png" alt="1564243942352"></p><h3 id="2-将此压缩包上传到服务器"><a href="#2-将此压缩包上传到服务器" class="headerlink" title="2.将此压缩包上传到服务器"></a>2.将此压缩包上传到服务器</h3><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E4%B8%8A%E4%BC%A0tomca.png" alt="1564244017924"></p><h3 id="3-新建tomcat文件夹"><a href="#3-新建tomcat文件夹" class="headerlink" title="3.新建tomcat文件夹"></a>3.新建tomcat文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入/usr/<span class="built_in">local</span>：<span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">新建文件夹：mkdir tomcat</span><br></pre></td></tr></table></figure><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E6%96%B0%E5%BB%BAtomcat%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="1564246013731"></p><h3 id="4-移动tomcat压缩包至tomcat文件夹"><a href="#4-移动tomcat压缩包至tomcat文件夹" class="headerlink" title="4.移动tomcat压缩包至tomcat文件夹"></a>4.移动tomcat压缩包至tomcat文件夹</h3><p>考虑后面要做tomcat集群，所以新建立目录并将解压包移进去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">移动文件：mv /root/apache-tomcat-9.0.22.tar.gz /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">进入文件：<span class="built_in">cd</span>/usr/<span class="built_in">local</span>/tomcat</span><br></pre></td></tr></table></figure><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6.png" alt="1564246268768"></p><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E6%9F%A5%E8%AF%A2tomcat%E7%A7%BB%E5%8A%A8.png" alt="1564246305016"></p><h3 id="5-解压文件"><a href="#5-解压文件" class="headerlink" title="5.解压文件"></a>5.解压文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在此目录解压文件：tar -zxvf apache-tomcat-9.0.22.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E8%A7%A3%E5%8E%8Btomcat.png" alt="1564246496516"></p><h3 id="6-配置环境变量"><a href="#6-配置环境变量" class="headerlink" title="6.配置环境变量"></a>6.配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">编辑：vim /etc/profile.d/tomcat.sh</span><br><span class="line">编辑窗口下：CATALINA_BASE=/usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">          PATH=<span class="variable">$CATALINA_BASE</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">          <span class="built_in">export</span> PATH CATALINA_BAS</span><br><span class="line">让配置生效：<span class="built_in">source</span>  /etc/profile.d/tomcat.sh</span><br></pre></td></tr></table></figure><p><font size="3" color="blue">退出编辑模式：按下Esc后，输入冒号：然后输wq</font></p><p><img src="C:%5CUsers%5Chbp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1564246983916.png" alt></p><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="1564246926530"></p><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E8%AE%A9%E9%85%8D%E7%BD%AE%E7%94%9F%E6%95%88.png" alt="1564247149854"></p><h3 id="7-开启防火墙"><a href="#7-开启防火墙" class="headerlink" title="7.开启防火墙"></a>7.开启防火墙</h3><p>确保Linux的防火墙端口是开启的，如果是阿里云，需要保证安全组策略对应的端口号也是开启的，下面有说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态（running表示开启）：</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99.png" alt></p><h3 id="8-开放-8080-端口，重启防火墙"><a href="#8-开放-8080-端口，重启防火墙" class="headerlink" title="8.开放 8080 端口，重启防火墙"></a>8.开放 8080 端口，重启防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久开放8080端口：</span></span><br><span class="line"><span class="comment"># 命令含义：</span></span><br><span class="line"><span class="comment">#  –zone #指定区域</span></span><br><span class="line"><span class="comment">#  –add-port=80/tcp #添加端口，格式为：&lt;端口号/协议&gt;</span></span><br><span class="line"><span class="comment">#  –permanent #永久生效，没有此参数重启后失效</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭8080端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙(更新防火墙规则)：</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">或者：systemctl restart firewalld.service（有些系统版本是用这个的）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有开启的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E5%BC%80%E6%94%BE8080%20%E7%AB%AF%E5%8F%A3%E9%87%8D%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99.png" alt></p><h3 id="9-启动tomcat"><a href="#9-启动tomcat" class="headerlink" title="9.启动tomcat"></a>9.启动tomcat</h3><ul><li>1.进入到tomcat的bin目录输入启动命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1.png" alt="1564248026806"></p><h3 id="10-配置安全组"><a href="#10-配置安全组" class="headerlink" title="10.配置安全组"></a>10.配置安全组</h3><ul><li>1.到阿里云的管理控制台修改防火墙的端口号为8080</li></ul><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E5%AE%89%E5%85%A8%E7%BB%84.png" alt="1564248293276"></p><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/808.png" alt="1564248383322"></p><h3 id="11-在浏览器访问tomcat主页：ip地址：8080"><a href="#11-在浏览器访问tomcat主页：ip地址：8080" class="headerlink" title="11.在浏览器访问tomcat主页：ip地址：8080"></a>11.在浏览器访问tomcat主页：ip地址：8080</h3><ul><li>10-1 出现以下页面说明成功</li></ul><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/tomcat%E5%B9%BF%E5%91%8A%E7%95%8C%E9%9D%A2.png" alt="1564248513880"></p><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><h3 id="1-下载mysql源安装包："><a href="#1-下载mysql源安装包：" class="headerlink" title="1.下载mysql源安装包："></a>1.下载mysql源安装包：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 下载mysql</span></span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><p><em>如果复制上述语句无效，手动打到putty</em></p><h3 id="2-安装mysql源："><a href="#2-安装mysql源：" class="headerlink" title="2.安装mysql源："></a>2.安装mysql源：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3.安装MySQL"></a>3.安装MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h3 id="4-启动MySQL服务"><a href="#4-启动MySQL服务" class="headerlink" title="4.启动MySQL服务"></a>4.启动MySQL服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h3 id="5-查询mysql的运行状态"><a href="#5-查询mysql的运行状态" class="headerlink" title="5.查询mysql的运行状态"></a>5.查询mysql的运行状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2021-03-01 19:39:44 CST; 3s ago</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">  Process: 15621 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid <span class="variable">$MYSQLD_OPTS</span> (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 15567 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 15625 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─15625 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">Mar 01 19:39:39 iZwz9ick8j8tmsj93waiowZ systemd[1]: Starting MySQL Server...</span><br><span class="line">Mar 01 19:39:44 iZwz9ick8j8tmsj93waiowZ systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure><h3 id="5-开机启动"><a href="#5-开机启动" class="headerlink" title="5.开机启动"></a>5.开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h3 id="6-修改root本地登录密码"><a href="#6-修改root本地登录密码" class="headerlink" title="6. 修改root本地登录密码"></a>6. 修改root本地登录密码</h3><ol><li><strong>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>这样会打印出一个分配到的密码。用root登陆mysql</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>输入：分配到的新密码</p></li><li><p><strong>输入以下命令来修改密码</strong></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'xxx'</span>;</span><br></pre></td></tr></table></figure><p>注意：xxx要有大小写字母，数字，特殊字符</p><p>（因为mysql5.7的安全机制，密码一定要有大小写字母和特殊符号和数字。）</p><h3 id="7-添加远程登录用户"><a href="#7-添加远程登录用户" class="headerlink" title="7.添加远程登录用户"></a>7.添加远程登录用户</h3><p>添加远程登录用户<br>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户并设置用户拥有所有权限也就是管理员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grant all privileges on *.* to '新用户名'@'指定ip' identified by '新用户密码' WITH GRANT OPTION;</span></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'密码'</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><ul><li>这个的%表示所有的ip都可以远程访问此数据库</li></ul><h3 id="8-修改mysql字符集"><a href="#8-修改mysql字符集" class="headerlink" title="8.修改mysql字符集"></a>8.修改mysql字符集</h3><h4 id="8-1-查看mysql字符集"><a href="#8-1-查看mysql字符集" class="headerlink" title="8.1 查看mysql字符集"></a>8.1 查看mysql字符集</h4><ol><li><p>如果在建库建表的时候， 没有明确指定字符集， 则采用默认客户端和服务器端的字符集都用了 latin1 ，其中是不包含中文字符的。</p></li><li><p>如何查看默认的编码字符集：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在linux登录mysql后</span></span><br><span class="line">status</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">show variables like <span class="string">'%char%'</span>;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">show variables like <span class="string">'%character%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/mysql%E9%BB%98%E8%AE%A4%E5%AD%97%E7%AC%A6%E9%9B%86.png" alt></p><h4 id="8-2-修改字符集"><a href="#8-2-修改字符集" class="headerlink" title="8.2 修改字符集"></a>8.2 修改字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/etc目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line"><span class="comment"># 修改配置文件my.cnf</span></span><br><span class="line">vim my.cnf</span><br><span class="line"><span class="comment"># 在输入模式下，把下面这些代码输入到首行(把原有的mysqld删除掉)</span></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br></pre></td></tr></table></figure><h4 id="8-3-重启mysql服务使配置生效："><a href="#8-3-重启mysql服务使配置生效：" class="headerlink" title="8.3 重启mysql服务使配置生效："></a>8.3 重启mysql服务使配置生效：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h4 id="8-4-再看查看字符集"><a href="#8-4-再看查看字符集" class="headerlink" title="8.4 再看查看字符集"></a>8.4 再看查看字符集</h4><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86.png" alt></p><h3 id="9-mysql安装位置"><a href="#9-mysql安装位置" class="headerlink" title="9.mysql安装位置"></a>9.mysql安装位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><table><thead><tr><th>路径</th><th>解释</th></tr></thead><tbody><tr><td>/var/lib/mysql/</td><td>mysql 数据库文件的存放路径</td></tr><tr><td>/usr/share/mysql</td><td>配置文件目录</td></tr><tr><td>/usr/bin</td><td>相关命令目录</td></tr><tr><td>/etc/init.d/mysql</td><td>服务启停相关</td></tr></tbody></table><h3 id="10-开放3306端口，重启防火墙"><a href="#10-开放3306端口，重启防火墙" class="headerlink" title="10. 开放3306端口，重启防火墙"></a>10. 开放3306端口，重启防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放 8080 端口：</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙：</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">或者：systemctl restart firewalld.service（有些系统版本是用这个的）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有开启的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h3 id="11-配置安全组"><a href="#11-配置安全组" class="headerlink" title="11.配置安全组"></a>11.配置安全组</h3><ul><li>到阿里云管理台的防火墙那添加规则</li></ul><p><img src="https://aliinstallimages.oss-cn-shenzhen.aliyuncs.com/3306.png" alt="1564249347611"></p><h3 id="9-自行下载一个数据库客户端测试"><a href="#9-自行下载一个数据库客户端测试" class="headerlink" title="9.自行下载一个数据库客户端测试"></a>9.自行下载一个数据库客户端测试</h3><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单记录一下在Linux CentOS 7中安装jdk，tomcat，mysql的全过程，希望对有需求的朋友有所帮助</p>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决数据库和Tomcat9的中文乱码问题</title>
      <link href="2019/08/15/%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CTomcat9%E7%9A%84%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>2019/08/15/%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CTomcat9%E7%9A%84%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat9解决前台数据到后台数据中文乱码问题"><a href="#Tomcat9解决前台数据到后台数据中文乱码问题" class="headerlink" title="Tomcat9解决前台数据到后台数据中文乱码问题"></a>Tomcat9解决前台数据到后台数据中文乱码问题</h1><ul><li>Tomcat9<strong>只</strong>需要找到tomcat9目录下的bin目录的catalina.bat</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">把</span><br><span class="line"></span><br><span class="line">set <span class="string">"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS%"</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">set <span class="string">"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：Tomcat9<strong><u>不需要</u></strong>通过如下配置来实现</p><p><img src="https://tomcat9images.oss-cn-shenzhen.aliyuncs.com/1565107761200.png" alt></p></blockquote><hr><h1 id="数据库解决数据存入时中文乱码问题"><a href="#数据库解决数据存入时中文乱码问题" class="headerlink" title="数据库解决数据存入时中文乱码问题"></a>数据库解决数据存入时中文乱码问题</h1><ul><li>在你定义的url常量的后面加入 ?characterEncoding=UTF-8 即可！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?characterEncoding=UTF-8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+Github搭建个人博客</title>
      <link href="2019/08/13/%E4%BD%BF%E7%94%A8Hexo+Github%20Pages+Git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/08/13/%E4%BD%BF%E7%94%A8Hexo+Github%20Pages+Git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Hexo-Git-Github-Pages搭建个人博客"><a href="#使用Hexo-Git-Github-Pages搭建个人博客" class="headerlink" title="使用Hexo+Git+Github Pages搭建个人博客"></a>使用Hexo+Git+Github Pages搭建个人博客</h1><h2 id="一-什么是Hexo？"><a href="#一-什么是Hexo？" class="headerlink" title="一.什么是Hexo？"></a>一.什么是Hexo？</h2><ol><li>Hexo是基于Node.js，是一个快速、简洁且高效的博客框架。</li><li>Hexo 使用 Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li></ol><h2 id="二-为什么要用Hexo？"><a href="#二-为什么要用Hexo？" class="headerlink" title="二.为什么要用Hexo？"></a>二.为什么要用Hexo？</h2><p>优势：</p><ul><li>轻量级，无需数据库，发布环境下是静态页面 - Hexo</li><li>直接在github pages平台上托管我们的博客</li><li>利用MarkDown语法，可以写出简洁优质的博文</li></ul><p>总结：</p><ul><li><p>hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html托管到Github pages去，可以省去服务器维护的时间和经理。</p><p>简而言之：hexo是个静态页面生成、上传的工具。</p></li></ul><h2 id="三-Hexo的安装"><a href="#三-Hexo的安装" class="headerlink" title="三.Hexo的安装"></a>三.Hexo的安装</h2><h3 id="3-1-准备家当："><a href="#3-1-准备家当：" class="headerlink" title="3.1-准备家当："></a>3.1-准备家当：</h3><ol><li>Node.js（自行下载好，尽量不要选择版本高的）</li><li>Git（自行下载好）</li><li>Github账号注册</li><li>Notepad++或sublime等编辑器</li></ol><h3 id="3-2-开始安装"><a href="#3-2-开始安装" class="headerlink" title="3.2-开始安装"></a>3.2-开始安装</h3><h4 id="1-在自己认为合适的盘符新建个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"><a href="#1-在自己认为合适的盘符新建个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面" class="headerlink" title="1.在自己认为合适的盘符新建个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"></a>1.在自己认为合适的盘符新建个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面</h4><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E8%BF%9B%E5%85%A5blog%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt></p><h4 id="2-输入以下命令，开始安装Hexo"><a href="#2-输入以下命令，开始安装Hexo" class="headerlink" title="2.输入以下命令，开始安装Hexo"></a><strong>2.输入以下命令，开始安装Hexo</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E5%AE%89%E8%A3%85hexo.png" alt></p><h4 id="3-检查hexo是否安装成功"><a href="#3-检查hexo是否安装成功" class="headerlink" title="3.检查hexo是否安装成功"></a><strong>3.检查hexo是否安装成功</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E6%A3%80%E6%9F%A5hexo%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="文件上传失败"></p><h4 id="4-初始化该文件夹"><a href="#4-初始化该文件夹" class="headerlink" title="4.初始化该文件夹"></a><strong>4.初始化该文件夹</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%87%E4%BB%B6%E5%A4%B91.png" alt="文件上传失败"></p><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%87%E4%BB%B6%E5%A4%B92.png" alt></p><h4 id="5-安装所需要的组件"><a href="#5-安装所需要的组件" class="headerlink" title="5.安装所需要的组件"></a><strong>5.安装所需要的组件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E7%BB%84%E4%BB%B6.png" alt></p><h4 id="6-开始体验Hexo，首先编译生成静态文件"><a href="#6-开始体验Hexo，首先编译生成静态文件" class="headerlink" title="6.开始体验Hexo，首先编译生成静态文件"></a><strong>6.开始体验Hexo，首先编译生成静态文件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E9%A6%96%E6%AC%A1%E4%BD%93%E9%AA%8CHexo.png" alt></p><h4 id="7-开启服务器-hexo-server-，访问该网址-localhost-4000-，正式体验Hexo"><a href="#7-开启服务器-hexo-server-，访问该网址-localhost-4000-，正式体验Hexo" class="headerlink" title="7.开启服务器(hexo server)，访问该网址(localhost:4000)，正式体验Hexo"></a><strong>7.开启服务器(hexo server)，访问该网址(localhost:4000)，正式体验Hexo</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt></p><p>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号</p><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E6%94%B9%E5%8F%98%E7%AB%AF%E5%8F%A3%E5%8F%B7.png" alt></p><h4 id="8-出现以下页面则为成功-至此安装hexo则为完成"><a href="#8-出现以下页面则为成功-至此安装hexo则为完成" class="headerlink" title="8.出现以下页面则为成功,至此安装hexo则为完成"></a><strong>8.出现以下页面则为成功,至此安装hexo则为完成</strong></h4><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/hexo%E9%A1%B5%E9%9D%A2.png" alt></p><h2 id="四-将Hexo与Github-page联系起来"><a href="#四-将Hexo与Github-page联系起来" class="headerlink" title="四.将Hexo与Github page联系起来"></a>四.将Hexo与Github page联系起来</h2><h4 id="1-设置Git的user-name和email"><a href="#1-设置Git的user-name和email" class="headerlink" title="1.设置Git的user name和email"></a><strong>1.设置Git的user name和email</strong></h4><p>进入安装了hexo的文件夹空白处右键，点击Git Base Here(安装了git才会出现的)，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><h4 id="2-生成新的SSH-Key，如果没有-ssh文件，会为你自动创建-ssh文件夹"><a href="#2-生成新的SSH-Key，如果没有-ssh文件，会为你自动创建-ssh文件夹" class="headerlink" title="2.生成新的SSH Key，如果没有.ssh文件，会为你自动创建.ssh文件夹"></a><strong>2.生成新的SSH Key，如果没有.ssh文件，会为你自动创建.ssh文件夹</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后系统会要你输入密码：如果你不想在使用密钥时输入口令，将其留空即可（即直接按回车）。如果你输入的话，要记得，到时候会用到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>输完密码后，你可以去开始，打开你的用户目录，有一个“.ssh”文件夹，里面有“id_rsa” “id_rsa.pub” 和 “known_hosts”这三个文件。其中“id_rsa”是你的私钥文件，“id_rsa.pub”是你的公钥文件，一会要用公钥文件。</p><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/sshkey.png" alt></p><h4 id="3-把上述文件id-rsa-pub用Notepad-或sublime打开，然后全选复制里面的内容"><a href="#3-把上述文件id-rsa-pub用Notepad-或sublime打开，然后全选复制里面的内容" class="headerlink" title="3.把上述文件id_rsa.pub用Notepad++或sublime打开，然后全选复制里面的内容"></a><strong>3.把上述文件id_rsa.pub用Notepad++或sublime打开，然后全选复制里面的内容</strong></h4><h4 id="4-登录到Github，然后新建一个仓库"><a href="#4-登录到Github，然后新建一个仓库" class="headerlink" title="4.登录到Github，然后新建一个仓库"></a><strong>4.登录到Github，然后新建一个仓库</strong></h4><blockquote><p><strong>注意：新建仓库，项目名必须要遵守格式：账户名.github.io（即以下两个红框要一致），不然接下来会有很多麻烦，将来你的网站访问地址就是http://用户名.github.io 。并且需要勾选Initialize   this repository with a README</strong></p><p><strong>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</strong></p></blockquote><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt></p><h4 id="5-点击的settings后，点击Deploy-Keys"><a href="#5-点击的settings后，点击Deploy-Keys" class="headerlink" title="5.点击的settings后，点击Deploy Keys"></a><strong>5.点击的settings后，点击Deploy Keys</strong></h4><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5.png" alt></p><h4 id="6-点击Add-deploy-key，然后把刚刚复制的公钥粘贴进去-title可不填，勾选Allow-write-access"><a href="#6-点击Add-deploy-key，然后把刚刚复制的公钥粘贴进去-title可不填，勾选Allow-write-access" class="headerlink" title="6.点击Add deploy key，然后把刚刚复制的公钥粘贴进去,title可不填，勾选Allow write access"></a><strong>6.点击Add deploy key，然后把刚刚复制的公钥粘贴进去,title可不填，勾选Allow write access</strong></h4><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E7%82%B9%E5%87%BBdeploy.png" alt></p><h4 id="7-测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明本地就和Github服务端连接上了"><a href="#7-测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明本地就和Github服务端连接上了" class="headerlink" title="7.测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明本地就和Github服务端连接上了"></a><strong>7.测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明本地就和Github服务端连接上了</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E6%B5%8B%E8%AF%95.png" alt></p><h2 id="五-把博客部署到Github"><a href="#五-把博客部署到Github" class="headerlink" title="五.把博客部署到Github"></a>五.把博客部署到Github</h2><h4 id="1-修改Hexo配置文件"><a href="#1-修改Hexo配置文件" class="headerlink" title="1.修改Hexo配置文件"></a><strong>1.修改Hexo配置文件</strong></h4><p>在 blog文件夹下找到 _config.yml 文件（站点配置文件），打开后，找到deploy进行如下设置。</p><p><em>注意</em>：除了 “https://” 中的冒号以外，其他每个冒号后面都有个空格，最后保存。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:yellowbp/yellowbp.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><u>hexo2.x版本的写法（新版本已经不管用了）</u></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/yellowbp/yellowbp.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>​      </p><p>​      其中的repository，你可以到你github新建的仓库上复制</p><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E5%A4%8D%E5%88%B6%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt></p><h4 id="2-新建一篇博客，在cmd执行命令：hexo-new-“你的博客名”"><a href="#2-新建一篇博客，在cmd执行命令：hexo-new-“你的博客名”" class="headerlink" title="2.新建一篇博客，在cmd执行命令：hexo new  “你的博客名”"></a><strong>2.新建一篇博客，在cmd执行命令：hexo new  “你的博客名”</strong></h4><p>或</p><p>在blog目录内右键，选择Git Bash，打开后看到Git Bash标题栏的路径为/D/blog</p><blockquote><p><font color="blue">注意：以后我们很多的博客操作都要在此目录下运行Git Bash才行，比如新建博文、上传部署等等。</font></p></blockquote><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E6%96%B0%E5%BB%BA%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.png" alt></p><p>​       这时候在文件夹_posts目录下将会看到已经创建的文件</p><p>​      <img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/posts%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%88%9B%E5%BB%BA%E7%9A%84%E6%96%87%E4%BB%B6.png" alt></p><h4 id="3-在生成以及部署文章之前，需要安装一个扩展："><a href="#3-在生成以及部署文章之前，需要安装一个扩展：" class="headerlink" title="3.在生成以及部署文章之前，需要安装一个扩展："></a><strong>3.在生成以及部署文章之前，需要安装一个扩展：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%89%A9%E5%B1%95.png" alt></p><h4 id="4-使用编辑器编好文章（等下会说如何编写），那么现在就可以使用一下命令，生成以及部署了"><a href="#4-使用编辑器编好文章（等下会说如何编写），那么现在就可以使用一下命令，生成以及部署了" class="headerlink" title="4.使用编辑器编好文章（等下会说如何编写），那么现在就可以使用一下命令，生成以及部署了"></a><strong>4.使用编辑器编好文章（等下会说如何编写），那么现在就可以使用一下命令，生成以及部署了</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h4 id="5-部署成功后访问你的地址：http-用户名-github-io。那么将看到生成的文章"><a href="#5-部署成功后访问你的地址：http-用户名-github-io。那么将看到生成的文章" class="headerlink" title="5.部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章"></a><strong>5.部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章</strong></h4><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F%E5%90%8E%E7%9A%84%E7%BD%91%E9%A1%B5.png" alt></p><blockquote><p><font color="blue">到此，以Hexo+Git+Github pages搭建博客完结！！！</font></p></blockquote><hr><h2 id="六-Hexo主题"><a href="#六-Hexo主题" class="headerlink" title="六.Hexo主题"></a>六.Hexo主题</h2><blockquote><p>前言：</p><p>在成功用上述方法搭建好个人博客之后，你可能会觉得官方默认的主题不太好看。怎么办？幸好Hexo主题可以更改的，那么问题就简单了，在哪里可以选择自己喜欢的主题，然后更换</p></blockquote><h4 id="1-选择主题"><a href="#1-选择主题" class="headerlink" title="1.选择主题"></a><strong>1.选择主题</strong></h4><p>主题从哪里找呢？官方就有提供了不少好看的 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网主题</a>，可以从中选择。</p><p>比较多人用的主题是 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next</a>。具有简约，配置详细的特点</p><h4 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="2.安装主题"></a><strong>2.安装主题</strong></h4><h5 id="2-1-在官网上，选择红框的部分（你可以通过点击图片来观看这个主题的样式）"><a href="#2-1-在官网上，选择红框的部分（你可以通过点击图片来观看这个主题的样式）" class="headerlink" title="2.1 在官网上，选择红框的部分（你可以通过点击图片来观看这个主题的样式）"></a>2.1 在官网上，选择红框的部分（你可以通过点击图片来观看这个主题的样式）</h5><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/themes%E5%AE%98%E7%BD%91.png" alt></p><h5 id="2-2-到了如下界面，往下拉，就是关于该主题的详细文档，你可以看到install的英文，复制该命令，然后到-你下载的Hexo目录右键选择Git-Bash，粘贴该命令，即可下载。"><a href="#2-2-到了如下界面，往下拉，就是关于该主题的详细文档，你可以看到install的英文，复制该命令，然后到-你下载的Hexo目录右键选择Git-Bash，粘贴该命令，即可下载。" class="headerlink" title="2.2  到了如下界面，往下拉，就是关于该主题的详细文档，你可以看到install的英文，复制该命令，然后到               你下载的Hexo目录右键选择Git Bash，粘贴该命令，即可下载。"></a>2.2  到了如下界面，往下拉，就是关于该主题的详细文档，你可以看到install的英文，复制该命令，然后到               你下载的Hexo目录右键选择Git Bash，粘贴该命令，即可下载。</h5><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E4%B8%BB%E9%A2%98%E4%BB%93%E5%BA%93%E9%A1%B5%E9%9D%A21.png" alt></p><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E4%B8%BB%E9%A2%98%E4%BB%93%E5%BA%93%E9%A1%B5%E9%9D%A22.png" alt></p><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E4%B8%BB%E9%A2%98%E4%BB%93%E5%BA%93%E9%A1%B5%E9%9D%A23.png" alt></p><h4 id="3-应用主题"><a href="#3-应用主题" class="headerlink" title="3.应用主题"></a><strong>3.应用主题</strong></h4><p>到站点配置文件（_config.yml）下，Ctrl+F查找theme,根据详细文档来把主题更换一下,然后保存</p><blockquote><p><font color="blue"><strong>注意冒号后面<u>都</u>一定要有一个空格</strong></font></p></blockquote><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8.png" alt></p><p>​        你可以在Git Bash输入以下命令，在本地测试一下（localhost:4000）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="4-把主题部署到Github-Pages上，在Git-Bash上输入以下命令"><a href="#4-把主题部署到Github-Pages上，在Git-Bash上输入以下命令" class="headerlink" title="4.把主题部署到Github Pages上，在Git Bash上输入以下命令"></a><strong>4.把主题部署到Github Pages上，在Git Bash上输入以下命令</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>在hexo g -d这个命令会让你输入登录github的账号密码</p><p>然后输入http;//用户名.github.io观看效果</p><h4 id="5-Next的主题有很多好玩的东西，具体看它的详细文档即可"><a href="#5-Next的主题有很多好玩的东西，具体看它的详细文档即可" class="headerlink" title="5.Next的主题有很多好玩的东西，具体看它的详细文档即可"></a><strong>5.Next的主题有很多好玩的东西，具体看它的详细文档即可</strong></h4><hr><h2 id="七-写博客的工具-这里推荐用typora编译器"><a href="#七-写博客的工具-这里推荐用typora编译器" class="headerlink" title="七.写博客的工具(这里推荐用typora编译器)"></a>七.写博客的工具(这里推荐用typora编译器)</h2><blockquote><p>大致过程：</p><ol><li><p>日志的书写，使用<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">MarkDown</a>语法：</p></li><li><p>写完后在本地把Hexo s跑起来，将日志生成为HTML，动态的看日志效果：</p></li><li><p>通过Hexo部署命令，将静态网页部分发布到服务器上去。其实网上看到的Hexo日志只是静态页面部分。</p></li></ol></blockquote><h4 id="1-在Git-Bash输入以下命令（在blog目录下右键）"><a href="#1-在Git-Bash输入以下命令（在blog目录下右键）" class="headerlink" title="1.在Git Bash输入以下命令（在blog目录下右键）"></a>1.<strong>在Git Bash输入以下命令</strong>（在blog目录下右键）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new “文章名”</span><br></pre></td></tr></table></figure><p>  在/blog/source_posts目录下即可看到你新建的博客</p><p><img src="https://hexoimages.oss-cn-shenzhen.aliyuncs.com/post%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt></p><h4 id="2-通过typora打开，用markdown语法书写博客，然后保存"><a href="#2-通过typora打开，用markdown语法书写博客，然后保存" class="headerlink" title="2.通过typora打开，用markdown语法书写博客，然后保存"></a><strong>2.通过typora打开，用markdown语法书写博客，然后保存</strong></h4><h4 id="3-hexo-s本地测试一下"><a href="#3-hexo-s本地测试一下" class="headerlink" title="3.hexo s本地测试一下"></a><strong>3.hexo s本地测试一下</strong></h4><h4 id="4-本地成功后，hexo-g-d部署到Github上"><a href="#4-本地成功后，hexo-g-d部署到Github上" class="headerlink" title="4.本地成功后，hexo g -d部署到Github上"></a><strong>4.本地成功后，hexo g -d部署到Github上</strong></h4><hr><h2 id="八-如何在Hexo博客文章中插入图片"><a href="#八-如何在Hexo博客文章中插入图片" class="headerlink" title="八.如何在Hexo博客文章中插入图片"></a>八.如何在Hexo博客文章中插入图片</h2><blockquote><p>前言：</p><p>在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，这里介绍一种稳定好用的方法</p><p>网上的很多做法是通过本地上传照片来实现在Github Pages上显示照片的，这会导致一个问题，占用Github Pages空间，加载很慢，毕竟github的服务器在国外，而且不稳定，容易失效</p></blockquote><p><strong>我这里的做法是：</strong></p><p><strong>在阿里云那里买一个对象存储服务（OSS）价格可以接受，专门很来存放我博客里的照片的，在把图片上传到OSS后，会生成对应的url地址，将地址直接拿来引用即可。这样就可以达到稳定高效</strong></p><p><strong>在typora里用以下格式进行引用图片(英文输入法)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片路径)</span><br></pre></td></tr></table></figure><h2 id="九-hexo常用命令"><a href="#九-hexo常用命令" class="headerlink" title="九.hexo常用命令"></a>九.hexo常用命令</h2><blockquote><p>hexo命令基本只需要记住下面的命令即可（左边是缩写 右边是完整的命令）：</p><p>hexo g == hexo generate —生成静态文件</p><p>hexo d == hexo deploy —部署到服务器</p><p>hexo s == hexo server— 开启本地服务</p><p>hexo n == hexo new— 新建</p><p>hexo clean —清除</p><p>hexo g -d –生成并上传</p></blockquote><h2 id="十-博客迁移到另一台电脑"><a href="#十-博客迁移到另一台电脑" class="headerlink" title="十.博客迁移到另一台电脑"></a>十.博客迁移到另一台电脑</h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用以下列2种方法：</p><h3 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h3><p><a href="https://www.zhihu.com/question/21193762中的CrazyMilk的回答很不错，理论上可行，但我还没实操过" target="_blank" rel="noopener">https://www.zhihu.com/question/21193762中的CrazyMilk的回答很不错，理论上可行，但我还没实操过</a></p><h3 id="法一"><a href="#法一" class="headerlink" title="法一:"></a>法一:</h3><ul><li>_config.yml、package.json、scaffolds/、source/、themes/替换hexo中的文件夹即可</li><li>注意_config.yml中的url要改成<code>url: https://yellowbp.github.io/</code></li></ul><hr><blockquote><p>本文在安装Hexo的部分，主要参考了以下博客：</p><p><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
